import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order:  1-7-13-5-11-17-3-9-15-6-12-18-2-8-14-4-10-16
// this is a 40 degree W18, which is the only variant I could figure out
// 60 degree W18 is just going to defeat me for now

public node bugatti_w18_concept_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6900 * units.rpm;
	input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01,  (0.0/18.0) * cycle)
            .connect_wire(wires.wire07,  (1.0/18.0) * cycle)
			.connect_wire(wires.wire13,  (2.0/18.0) * cycle)
            .connect_wire(wires.wire05,  (3.0/18.0) * cycle)
            .connect_wire(wires.wire11,  (4.0/18.0) * cycle)
			.connect_wire(wires.wire17,  (5.0/18.0) * cycle)
            .connect_wire(wires.wire03,  (6.0/18.0) * cycle)
            .connect_wire(wires.wire09,  (7.0/18.0) * cycle)
			.connect_wire(wires.wire15,  (8.0/18.0) * cycle)
            .connect_wire(wires.wire06,  (9.0/18.0) * cycle)
            .connect_wire(wires.wire12, (10.0/18.0) * cycle)
			.connect_wire(wires.wire18, (11.0/18.0) * cycle)
            .connect_wire(wires.wire02, (12.0/18.0) * cycle)
            .connect_wire(wires.wire08, (13.0/18.0) * cycle)
			.connect_wire(wires.wire14, (14.0/18.0) * cycle)
            .connect_wire(wires.wire04, (15.0/18.0) * cycle)
            .connect_wire(wires.wire10, (16.0/18.0) * cycle)
			.connect_wire(wires.wire16, (17.0/18.0) * cycle);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
    output wire13: ignition_wire();
    output wire14: ignition_wire();
    output wire15: ignition_wire();
    output wire16: ignition_wire();
    output wire17: ignition_wire();
    output wire18: ignition_wire();
}

public node bugatti_w18_concept_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 220 * units.deg,
            gamma: 1.0,
            lift: 10.0 * units.mm,
            steps: 100
        );
}

public node bugatti_w18_concept_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 220 * units.deg,
            gamma: 1.0,
            lift: 10.0 * units.mm,
            steps: 100
        );
}

public node bugatti_w18_concept_camshaft_builder {
    input in_lobe_profile: bugatti_w18_concept_lobe_profile_int();
	input ex_lobe_profile: bugatti_w18_concept_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_C: _intake_cam_C;
    output exhaust_cam_C: _exhaust_cam_C;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_C(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_C(params, lobe_profile: exhaust_lobe_profile)
    
	camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)


	label rot18(18 * units.deg)
	label rot30(30 * units.deg)
	label rot40(40 * units.deg)
	label rot54(54 * units.deg)
	label rot60(60 * units.deg)
	label rot72(72 * units.deg)
    label rot90(90 * units.deg)
	label rot120(120 * units.deg)
    label rot360(360 * units.deg)
	
    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center +  0 * rot40) //  #1
        .add_lobe(rot360 + intake_lobe_center + 12 * rot40) //  #2
        .add_lobe(rot360 + intake_lobe_center +  6 * rot40) //  #3
        .add_lobe(rot360 + intake_lobe_center + 15 * rot40) //  #4
        .add_lobe(rot360 + intake_lobe_center +  3 * rot40) //  #5
        .add_lobe(rot360 + intake_lobe_center +  9 * rot40) //  #6

    _intake_cam_C
        .add_lobe(rot360 + intake_lobe_center +  1 * rot40) //  #7
        .add_lobe(rot360 + intake_lobe_center + 13 * rot40) //  #8
        .add_lobe(rot360 + intake_lobe_center +  7 * rot40) //  #9
        .add_lobe(rot360 + intake_lobe_center + 16 * rot40) // #10
        .add_lobe(rot360 + intake_lobe_center +  4 * rot40) // #11
        .add_lobe(rot360 + intake_lobe_center + 10 * rot40) // #12

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center +  2 * rot40) // #13
        .add_lobe(rot360 + intake_lobe_center + 14 * rot40) // #14
        .add_lobe(rot360 + intake_lobe_center +  8 * rot40) // #15
        .add_lobe(rot360 + intake_lobe_center + 17 * rot40) // #16
        .add_lobe(rot360 + intake_lobe_center +  5 * rot40) // #17
        .add_lobe(rot360 + intake_lobe_center + 11 * rot40) // #18
	
    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center +  0 * rot40) //  #1
        .add_lobe(rot360 - exhaust_lobe_center + 12 * rot40) //  #2
        .add_lobe(rot360 - exhaust_lobe_center +  6 * rot40) //  #3
        .add_lobe(rot360 - exhaust_lobe_center + 15 * rot40) //  #4
        .add_lobe(rot360 - exhaust_lobe_center +  3 * rot40) //  #5
        .add_lobe(rot360 - exhaust_lobe_center +  9 * rot40) //  #6

    _exhaust_cam_C
        .add_lobe(rot360 - exhaust_lobe_center +  1 * rot40) //  #7
        .add_lobe(rot360 - exhaust_lobe_center + 13 * rot40) //  #8
        .add_lobe(rot360 - exhaust_lobe_center +  7 * rot40) //  #9
        .add_lobe(rot360 - exhaust_lobe_center + 16 * rot40) // #10
        .add_lobe(rot360 - exhaust_lobe_center +  4 * rot40) // #11
        .add_lobe(rot360 - exhaust_lobe_center + 10 * rot40) // #12

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center +  2 * rot40) // #13
        .add_lobe(rot360 - exhaust_lobe_center + 14 * rot40) // #14
        .add_lobe(rot360 - exhaust_lobe_center +  8 * rot40) // #15
        .add_lobe(rot360 - exhaust_lobe_center + 17 * rot40) // #16
        .add_lobe(rot360 - exhaust_lobe_center +  5 * rot40) // #17
        .add_lobe(rot360 - exhaust_lobe_center + 11 * rot40) // #18
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node bugatti_w18_concept_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 46.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation_in: 1.0;
	input flow_attenuation_ex: 1.0;
    input lift_scale: 1.2;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  60 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale,  90 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(13 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(14 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  55 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale,  85 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(13 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(14 * lift_scale, 280 * flow_attenuation_ex)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.0 * units.inch) * 4 * units.inch,
        intake_runner_cross_section_area: circle_area(1.0 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node bugatti_w18 {
    alias output __out: engine;

    wires wires()

	label lean_angle(-30 * units.deg)
	label bank_extra_angle(20 * units.deg)
	
    label bore(76.5 * units.mm)
    label stroke(75.6 * units.mm)
    label rod_length(135.0 * units.mm)
    label rod_mass(434 * units.g)
	label piston_mass(290 * units.g)
    label compression_height(20.0 * units.mm)
	label piston_dome(3.7 * units.cc)
	label deck_clearance(0.5 * units.mm)
    label crank_mass(75 * units.lb)
    label flywheel_mass(20 * units.lb)
    label flywheel_radius(6 * units.inch)
	
	label position_x((stroke / 2 + rod_length + compression_height + deck_clearance) * -0.2)

    engine engine(
        name: "Bugatti Concept W18",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 1200 * units.rpm,
        redline: 6500 * units.rpm,
        throttle_gamma: 1.0,
		simulation_frequency: 5000
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: position_x,
        position_y: 0.0,
        tdc: 130 * units.deg + lean_angle + bank_extra_angle // +40 degrees
    )

    rod_journal rj01(angle: ( 0  * units.deg + bank_extra_angle))
	rod_journal rj02(angle: ( 0  * units.deg))
	rod_journal rj03(angle: ( 0  * units.deg - bank_extra_angle))
    rod_journal rj04(angle: (120 * units.deg + bank_extra_angle))
	rod_journal rj05(angle: (120 * units.deg))
	rod_journal rj06(angle: (120 * units.deg - bank_extra_angle))
    rod_journal rj07(angle: (240 * units.deg + bank_extra_angle))
	rod_journal rj08(angle: (240 * units.deg))
	rod_journal rj09(angle: (240 * units.deg - bank_extra_angle))
    rod_journal rj10(angle: (240 * units.deg + bank_extra_angle))
	rod_journal rj11(angle: (240 * units.deg))
	rod_journal rj12(angle: (240 * units.deg - bank_extra_angle))
    rod_journal rj13(angle: (120 * units.deg + bank_extra_angle))
	rod_journal rj14(angle: (120 * units.deg))
	rod_journal rj15(angle: (120 * units.deg - bank_extra_angle))
    rod_journal rj16(angle: ( 0  * units.deg + bank_extra_angle))
	rod_journal rj17(angle: ( 0  * units.deg))
	rod_journal rj18(angle: ( 0  * units.deg - bank_extra_angle))
	
    c0
        .add_rod_journal(rj01)
        .add_rod_journal(rj02)
        .add_rod_journal(rj03)
        .add_rod_journal(rj04)
        .add_rod_journal(rj05)
		.add_rod_journal(rj06)
		.add_rod_journal(rj07)
		.add_rod_journal(rj08)
		.add_rod_journal(rj09)
		.add_rod_journal(rj10)
		.add_rod_journal(rj11)
		.add_rod_journal(rj12)
		.add_rod_journal(rj13)
		.add_rod_journal(rj14)
		.add_rod_journal(rj15)
		.add_rod_journal(rj16)
		.add_rod_journal(rj17)
		.add_rod_journal(rj18)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

	intake intakeL(
		plenum_volume: 2.0 * units.L,
		plenum_cross_section_area: 150.0 * units.cm2,
		intake_flow_rate: k_carb(320.0),
		idle_flow_rate: k_carb(0.001),
		idle_throttle_plate_position: 0.9963,
		throttle_gamma: 3.0,
		runner_flow_rate: k_carb(400.0),
		runner_length: 12.0 * units.inch,
		velocity_decay: 0.1
	)

	intake intakeC(
		plenum_volume: 2.0 * units.L,
		plenum_cross_section_area: 150.0 * units.cm2,
		intake_flow_rate: k_carb(320.0),
		idle_flow_rate: k_carb(0.001),
		idle_throttle_plate_position: 0.9963,
		throttle_gamma: 3.0,
		runner_flow_rate: k_carb(400.0),
		runner_length: 6.0 * units.inch,
		velocity_decay: 0.1
	)

	intake intakeR(
		plenum_volume: 2.0 * units.L,
		plenum_cross_section_area: 150.0 * units.cm2,
		intake_flow_rate: k_carb(320.0),
		idle_flow_rate: k_carb(0.001),
		idle_throttle_plate_position: 0.9963,
		throttle_gamma: 3.0,
		runner_flow_rate: k_carb(400.0),
		runner_length: 8.0 * units.inch,
		velocity_decay: 0.1
	)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(960.0),
        primary_tube_length: 5.0 * units.inch,
        primary_flow_rate: k_carb(450.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(3.0 * units.inch) * 3,
		length: 500 * units.mm,
		volume: (200 * units.mm * circle_area(3.0 * units.inch) * 3) + (200 * units.mm * 2 * circle_area(6.0 * units.inch)) + (100 * units.mm * circle_area(4.0 * units.inch) * 4)
    )

    exhaust_system exhaust(
		es_params,
		audio_volume: 1.0 * 0.003,
		impulse_response: ir_lib.default_0
	)
	
	label pipe_length_1(100 * units.mm)
	label pipe_length_2(080 * units.mm)
	label pipe_length_3(060 * units.mm)
	label pipe_length_4(040 * units.mm)
	label pipe_length_5(020 * units.mm)
	label pipe_length_6(000 * units.mm)
	
	label exhaust_stagger_L(30 * units.mm)
	label exhaust_stagger_C(0 * units.mm)
	label exhaust_stagger_R(15 * units.mm)
 
    cylinder_bank bL(bank_params, angle: 40 * units.deg + lean_angle + bank_extra_angle, position_x: position_x) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj01,
            ignition_wire: wires.wire01,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj04,
            ignition_wire: wires.wire02,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj07,
            ignition_wire: wires.wire03,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj10,
            ignition_wire: wires.wire04,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_4 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj13,
            ignition_wire: wires.wire05,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_5 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj16,
            ignition_wire: wires.wire06,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_6 + exhaust_stagger_L
        )
 
    cylinder_bank bC(bank_params, angle: 0 * units.deg + lean_angle, position_x: position_x) // C (third)
    bC
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj02,
            ignition_wire: wires.wire07,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj05,
            ignition_wire: wires.wire08,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj08,
            ignition_wire: wires.wire09,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj11,
            ignition_wire: wires.wire10,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_4 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj14,
            ignition_wire: wires.wire11,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_5 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj17,
            ignition_wire: wires.wire12,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_6 + exhaust_stagger_C
        )
		
    cylinder_bank bR(bank_params, angle: -40 * units.deg + lean_angle - bank_extra_angle, position_x: position_x) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj03,
            ignition_wire: wires.wire13,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj06,
            ignition_wire: wires.wire14,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj09,
            ignition_wire: wires.wire15,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj12,
            ignition_wire: wires.wire16,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_4 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj15,
            ignition_wire: wires.wire17,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_5 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj18,
            ignition_wire: wires.wire18,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_6 + exhaust_stagger_R
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bC)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    bugatti_w18_concept_camshaft_builder camshaft(
	    in_lobe_profile: bugatti_w18_concept_lobe_profile_int(),
		ex_lobe_profile: bugatti_w18_concept_lobe_profile_exh()
	)

    bL.set_cylinder_head (
        bugatti_w18_concept_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )
    bC.set_cylinder_head (
        bugatti_w18_concept_head(
            intake_camshaft: camshaft.intake_cam_C,
            exhaust_camshaft: camshaft.exhaust_cam_C,
            flip_display: false
        )
    )
    bR.set_cylinder_head (
        bugatti_w18_concept_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000  * units.rpm, 41 * units.deg)
        .add_sample(1000  * units.rpm, 41 * units.deg)
        .add_sample(2000  * units.rpm, 41 * units.deg)
        .add_sample(3000  * units.rpm, 41 * units.deg)
        .add_sample(4000  * units.rpm, 41 * units.deg)
        .add_sample(5000  * units.rpm, 41 * units.deg)
        .add_sample(6000  * units.rpm, 41 * units.deg)
		.add_sample(7000  * units.rpm, 41 * units.deg)
		.add_sample(8000  * units.rpm, 41 * units.deg)

    engine.add_ignition_module(
        bugatti_w18_concept_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// Bugatti 18/3 Chiron concept
// all numbers are from Automobile Catalog or are my own guesses
public node bugatti_18_3_chiron_vehicle {
    alias output __out:
        vehicle(
            mass: 3750 * units.lb,
            drag_coefficient: 0.35,
            cross_sectional_area: 1.9 * (units.m * units.m),
            diff_ratio: 4.096,
            tire_radius: 354.5 * units.mm, // 335/30ZR20
            rolling_resistance: 600 * units.N
        );
}

public node bugatti_18_3_chiron_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 2000 * units.lb_ft
        )
        .add_gear(2.313)
        .add_gear(1.524)
        .add_gear(1.125)
        .add_gear(0.889)
        .add_gear(0.676);
}

public node main {
    set_engine(bugatti_w18())
    set_vehicle(bugatti_18_3_chiron_vehicle())
    set_transmission(bugatti_18_3_chiron_transmission())
}

main()