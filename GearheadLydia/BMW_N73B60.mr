import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

//firing order: 1 7 5 11 3 9 6 12 2 8 4 10
// normalized:  1 2 9 10 5 6 11 12 3 4 7 8

public node bmw_n73b60_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6550 * units.rpm;
	input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, (0.0/12.0) * cycle)
            .connect_wire(wires.wire07, (1.0/12.0) * cycle)
			.connect_wire(wires.wire05, (2.0/12.0) * cycle)
            .connect_wire(wires.wire11, (3.0/12.0) * cycle)
            .connect_wire(wires.wire03, (4.0/12.0) * cycle)
			.connect_wire(wires.wire09, (5.0/12.0) * cycle)
            .connect_wire(wires.wire06, (6.0/12.0) * cycle)
            .connect_wire(wires.wire12, (7.0/12.0) * cycle)
			.connect_wire(wires.wire02, (8.0/12.0) * cycle)
            .connect_wire(wires.wire08, (9.0/12.0) * cycle)
            .connect_wire(wires.wire04, (10.0/12.0) * cycle)
			.connect_wire(wires.wire10, (11.0/12.0) * cycle);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

public node bmw_n73b60_lobe_profile_int_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 250 * units.deg,
            gamma: 1.0,
            lift: 5.5 * units.mm,
            steps: 100
        );
}

public node bmw_n73b60_lobe_profile_int_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 250 * units.deg,
            gamma: 1.0,
            lift: 9.5 * units.mm,
            steps: 100
        );
}

public node bmw_n73b60_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 250 * units.deg,
            gamma: 1.0,
            lift: 8.5 * units.mm,
            steps: 100
        );
}

public node bmw_n73b60_camshaft_builder {
    input in_lobe_profile_lo: bmw_n73b60_lobe_profile_int_lo();
    input in_lobe_profile_hi: bmw_n73b60_lobe_profile_int_hi();
    input ex_lobe_profile: bmw_n73b60_lobe_profile_exh();
    input intake_lobe_center_lo: 115 * units.deg;
    input intake_lobe_center_hi: 115 * units.deg;
    input exhaust_lobe_center: 115 * units.deg;
    input advance_in: 10.0 * units.deg;
    input advance_ex: 10.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0_lo: _intake_cam_0_lo;
    output intake_cam_0_hi: _intake_cam_0_hi;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1_lo: _intake_cam_1_lo;
    output intake_cam_1_hi: _intake_cam_1_hi;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance_in,
        base_radius: base_radius
    )

    camshaft _intake_cam_0_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in)
    camshaft _intake_cam_0_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in)
    camshaft _exhaust_cam_0(params, lobe_profile: ex_lobe_profile, advance: advance_ex)

    camshaft _intake_cam_1_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in)
    camshaft _intake_cam_1_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in)
    camshaft _exhaust_cam_1(params, lobe_profile: ex_lobe_profile, advance: advance_ex)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0_lo
		.add_lobe(rot360 + intake_lobe_center_lo + 0 * rot60) // #1
		.add_lobe(rot360 + intake_lobe_center_lo + 8 * rot60) // #2
		.add_lobe(rot360 + intake_lobe_center_lo + 4 * rot60) // #3
		.add_lobe(rot360 + intake_lobe_center_lo + 10 * rot60) // #4
		.add_lobe(rot360 + intake_lobe_center_lo + 2 * rot60) // #5
        .add_lobe(rot360 + intake_lobe_center_lo + 6 * rot60) // #6

    _intake_cam_0_hi
		.add_lobe(rot360 + intake_lobe_center_hi + 0 * rot60) // #1
		.add_lobe(rot360 + intake_lobe_center_hi + 8 * rot60) // #2
		.add_lobe(rot360 + intake_lobe_center_hi + 4 * rot60) // #3
		.add_lobe(rot360 + intake_lobe_center_hi + 10 * rot60) // #4
		.add_lobe(rot360 + intake_lobe_center_hi + 2 * rot60) // #5
        .add_lobe(rot360 + intake_lobe_center_hi + 6 * rot60) // #6

	_exhaust_cam_0
		.add_lobe(rot360 - exhaust_lobe_center + 0 * rot60) // #1
		.add_lobe(rot360 - exhaust_lobe_center + 8 * rot60) // #2
		.add_lobe(rot360 - exhaust_lobe_center + 4 * rot60) // #3
		.add_lobe(rot360 - exhaust_lobe_center + 10 * rot60) // #4
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot60) // #5
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot60) // #6

    _intake_cam_1_lo
		.add_lobe(rot360 + intake_lobe_center_lo + 1 * rot60) // #7
		.add_lobe(rot360 + intake_lobe_center_lo + 9 * rot60) // #8
		.add_lobe(rot360 + intake_lobe_center_lo + 5 * rot60) // #9
		.add_lobe(rot360 + intake_lobe_center_lo + 11 * rot60) // #10
		.add_lobe(rot360 + intake_lobe_center_lo + 3 * rot60) // #11
        .add_lobe(rot360 + intake_lobe_center_lo + 7 * rot60) // #12

    _intake_cam_1_hi
		.add_lobe(rot360 + intake_lobe_center_hi + 1 * rot60) // #7
		.add_lobe(rot360 + intake_lobe_center_hi + 9 * rot60) // #8
		.add_lobe(rot360 + intake_lobe_center_hi + 5 * rot60) // #9
		.add_lobe(rot360 + intake_lobe_center_hi + 11 * rot60) // #10
		.add_lobe(rot360 + intake_lobe_center_hi + 3 * rot60) // #11
        .add_lobe(rot360 + intake_lobe_center_hi + 7 * rot60) // #12

	_exhaust_cam_1
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot60) // #7
		.add_lobe(rot360 - exhaust_lobe_center + 9 * rot60) // #8
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot60) // #9
		.add_lobe(rot360 - exhaust_lobe_center + 11 * rot60) // #10
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot60) // #11
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot60) // #12
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node bmw_n73b60_head {
    input cam_in_lo;
    input cam_in_hi;
	input cam_ex;
    input chamber_volume: 35.0 * units.cc; // guess - very BMW-like
    input flip_display: false;
	
	input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1.00 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1.00 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

		
    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.0 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.0 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
		valvetrain: vtec_valvetrain(
            vtec_intake_camshaft: cam_in_hi,
            vtec_exhaust_camshaft: cam_ex,
            intake_camshaft: cam_in_lo,
            exhaust_camshaft: cam_ex,
            min_rpm: 1000 * units.rpm
		),
        flip_display: flip_display
    )
}


public node bmw_n73b60_engine {
    alias output __out: engine;

    wires wires()

    label bore(89.0 * units.mm)
	label bore_spacing(94.0 * units.mm) // guess for exhaust
    label stroke(80.0 * units.mm)
    label rod_length(140.0 * units.mm) // guess
    label rod_mass(550 * units.g)
	label piston_mass(450 * units.g)
    label compression_height(30.00 * units.mm) // guess
	label piston_dome(-3.5 * units.cc) // makes compression ratio come out to 11.3:1
	label deck_height((210.0 + 1.65) * units.mm) // assumption - same as M70??
    label crank_mass(60 * units.lb)
    label flywheel_mass(30 * units.lb)
    label flywheel_radius(6 * units.inch)

    engine engine(
        name: "BMW N73B60",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 1200 * units.rpm,
        redline: 6500 * units.rpm,
        throttle_gamma: 1.0,
		simulation_frequency: 6000
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle:  0  * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

	intake intakeL(
		plenum_volume: 1.0 * units.L,
		plenum_cross_section_area: 50.0 * units.cm2,
		intake_flow_rate: k_carb(1200.0),
		idle_flow_rate: k_carb(0.001),
		idle_throttle_plate_position: 0.9992,
		throttle_gamma: 2.0,
		runner_flow_rate: k_carb(300.0),
		runner_length: 10.0 * units.inch,
		velocity_decay: 0.1
	)

	intake intakeR(
		plenum_volume: 1.0 * units.L,
		plenum_cross_section_area: 50.0 * units.cm2,
		intake_flow_rate: k_carb(1200.0),
		idle_flow_rate: k_carb(0.001),
		idle_throttle_plate_position: 0.9992,
		throttle_gamma: 2.0,
		runner_flow_rate: k_carb(300.0),
		runner_length: 10.0 * units.inch,
		velocity_decay: 0.1
	)
	
	label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(2000.0),
        primary_tube_length: 15.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius) * 2,
		length: 3000 * units.mm,
		volume: 3000 * units.mm * circle_area(exhaust_radius) * 2
    )

    exhaust_system exhaust(
		es_params,
		audio_volume: 1.0 * 0.1,
		impulse_response: ir_lib.default_0
	)

    label pipe_length_1(bore_spacing * 1.5)
	label pipe_length_2(bore_spacing * 0.9)
	label pipe_length_3(bore_spacing * 0.3)
	label pipe_length_4(bore_spacing * 0.0)
	label pipe_length_5(bore_spacing * 0.6)
	label pipe_length_6(bore_spacing * 1.2)
	
	label pipe_length_stagger(30 * units.mm)
		
    cylinder_bank b0(bank_params, angle: 30 * units.deg) // L (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire01,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + pipe_length_stagger,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire02,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + pipe_length_stagger,
			sound_attenuation: 1.0
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire03,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + pipe_length_stagger,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire04,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_4 + pipe_length_stagger,
			sound_attenuation: 1.0
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire05,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_5 + pipe_length_stagger,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire06,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_6 + pipe_length_stagger,
			sound_attenuation: 1.0
        )
 
    cylinder_bank b1(bank_params, angle: -30 * units.deg) // R (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire07,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_1,
			sound_attenuation: 1.0
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire08,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_2,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire09,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_3,
			sound_attenuation: 1.0
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire10,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_4,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire11,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_5,
			sound_attenuation: 1.0
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire12,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_6,
			sound_attenuation: 0.7
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    bmw_n73b60_camshaft_builder camshaft()

    b0.set_cylinder_head (
        bmw_n73b60_head(
            cam_in_lo: camshaft.intake_cam_0_lo,
			cam_in_hi: camshaft.intake_cam_0_hi,
            cam_ex: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        bmw_n73b60_head(
            cam_in_lo: camshaft.intake_cam_1_lo,
			cam_in_hi: camshaft.intake_cam_1_hi,
            cam_ex: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 25 * units.deg)
        .add_sample(1000 * units.rpm, 48 * units.deg)
        .add_sample(2000 * units.rpm, 56 * units.deg)
        .add_sample(3000 * units.rpm, 56 * units.deg)
        .add_sample(4000 * units.rpm, 50 * units.deg)
        .add_sample(5000 * units.rpm, 40 * units.deg)
        .add_sample(6000 * units.rpm, 30 * units.deg)
        .add_sample(7000 * units.rpm, 25 * units.deg)

    engine.add_ignition_module(
        bmw_n73b60_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2006 BMW 760i (E65)
public node bmw_760i_e65_vehicle {
    alias output __out:
        vehicle(
            mass: 2105 * units.kg,
            drag_coefficient: 0.25,
            cross_sectional_area: 2.35 * (units.m * units.m),
            diff_ratio: 3.15,
            tire_radius: 350.5 * units.mm, // 245/50ZR18
            rolling_resistance: 500 * units.N
        );
}

public node zf_6hp26z_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 800 * units.lb_ft // actually rated for 600Nm but ignore that
        )
        .add_gear(4.171)
        .add_gear(2.340)
        .add_gear(1.521)
        .add_gear(1.143)
        .add_gear(0.887)
        .add_gear(0.691);
}

public node main {
    set_engine(bmw_n73b60_engine())
    set_vehicle(bmw_760i_e65_vehicle())
    set_transmission(zf_6hp26z_transmission())
}

main()