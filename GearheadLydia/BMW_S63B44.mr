import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 15486372
// in standard:   18436572

public node bmw_s63b44_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7250 * units.rpm;
    input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node bmw_s63b44_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 230 * units.deg,
            gamma: 1.5,
            lift: 12.5 * units.mm,
            steps: 100
        );
}

public node bmw_s63b44_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 230 * units.deg,
            gamma: 1.5,
            lift: 12.5 * units.mm,
            steps: 100
        );
}

public node bmw_s63b44_camshaft_builder {
    input in_lobe_profile: bmw_s63b44_lobe_profile_int();
    input ex_lobe_profile: bmw_s63b44_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 105.0 * units.deg;
    input exhaust_lobe_center: 105.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;
    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
}

public node bmw_s63b44_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 46.0 * units.cc;
    input flip_display: false;
    
    // guesses
    input flow_intake: 285;
    input flow_exhaust: 255;
    input lift_max: 12.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 5.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 5.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.1 * units.inch) * 6 * units.inch,
        intake_runner_cross_section_area: circle_area(1.1 * units.inch),
        exhaust_runner_volume: circle_area(0.75 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.75 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node bmw_s63b44_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "BMW S63B44",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1100 * units.rpm,
        redline: 7000 * units.rpm,
        throttle_gamma: 2.0
    )

    label bore(89.0 * units.mm)
    label stroke(88.3 * units.mm)
    label rod_length(141.5 * units.mm)
    label rod_mass(500 * units.g)
    label compression_height(32.0 * units.mm)
    label piston_mass(400 * units.g)
    label piston_dome(0.00 * units.cc) // this one is a guess
    label deck_clearance(1 * units.mm)
    label crank_mass(45 * units.kg)
    label flywheel_mass(15 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // -45 degrees
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle: 270 * units.deg)
    rod_journal rj3(angle:  90 * units.deg)
    rod_journal rj4(angle: 180 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)


    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    performer_rpm_intake intake(
        carburetor_cfm: 550.0,
        idle_flow_rate_cfm: 0.001,
        idle_throttle_plate_position: 0.996
    )

    label exhaust_radius((4.5 * units.inch)/2)

    exhaust_system_parameters es_params_L(
        outlet_flow_rate: k_carb(400.0),
        primary_tube_length: 15.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 2950 * units.mm,
        volume: (2950 * units.mm * circle_area(exhaust_radius))
    )

    exhaust_system_parameters es_params_R(
        outlet_flow_rate: k_carb(400.0),
        primary_tube_length: 15.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 2800 * units.mm,
        volume: (2800 * units.mm * circle_area(exhaust_radius))
    )

    exhaust_system exhaustL(es_params_L, audio_volume: 1.0 * 0.1, impulse_response: ir_lib.default_0)
    exhaust_system exhaustR(es_params_R, audio_volume: 1.0 * 0.1, impulse_response: ir_lib.default_0)
    
    label pipe_length_1(5.0 * units.cm)
    label pipe_length_2(0.0 * units.cm)
    label pipe_length_3(1.5 * units.cm)
    label pipe_length_4(6.5 * units.cm)

    cylinder_bank bL(bank_params, angle: 45.0 * units.deg) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_1,
            sound_attenuation: 0.3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_2,
            sound_attenuation: 0.5
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_3,
            sound_attenuation: 0.5
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_4,
            sound_attenuation: 0.3
        )

    cylinder_bank bR(bank_params, angle: -45.0 * units.deg) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_4,
            sound_attenuation: 0.6
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_3,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_2,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_1,
            sound_attenuation: 0.6
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    bmw_s63b44_camshaft_builder camshaft(
        in_lobe_profile: bmw_s63b44_lobe_profile_int(),
        ex_lobe_profile: bmw_s63b44_lobe_profile_exh()
    )

    bL.set_cylinder_head (
        bmw_s63b44_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: false
        )
    )
    bR.set_cylinder_head (
        bmw_s63b44_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 55 * units.deg)
        .add_sample(1000 * units.rpm, 60 * units.deg)
        .add_sample(2000 * units.rpm, 60 * units.deg)
        .add_sample(3000 * units.rpm, 60 * units.deg)
        .add_sample(4000 * units.rpm, 60 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 60 * units.deg)
        .add_sample(7000 * units.rpm, 60 * units.deg)
        .add_sample(8000 * units.rpm, 60 * units.deg)

    engine.add_ignition_module(
        bmw_s63b44_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2013 BMW M6 Coupe (F13)
public node bmw_m6_f13_vehicle {
    alias output __out:
        vehicle(
            mass: 4065 * units.lb, // guesstimate for manual; auto is 4078
            drag_coefficient: 0.32,
            cross_sectional_area: 2.29 * (units.m * units.m),
            diff_ratio: 3.154,
            tire_radius: 344 * units.mm, // 295/35ZR19
            rolling_resistance: 550 * units.N
        );
}

// 2013 BMW M5 Sedan (F10)
public node bmw_m5_f10_vehicle {
    alias output __out:
        vehicle(
            mass: 4343 * units.lb,
            drag_coefficient: 0.33,
            cross_sectional_area: 2.4 * (units.m * units.m),
            diff_ratio: 3.154,
            tire_radius: 344 * units.mm, // 295/35ZR19
            rolling_resistance: 550 * units.N
        );
}

public node zf_gs6_53bz_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 900 * units.lb_ft
        )
        .add_gear(4.055)
        .add_gear(2.396)
        .add_gear(1.582)
        .add_gear(1.192)
        .add_gear(1.000)
        .add_gear(0.872);
}

public node main {
    set_engine(bmw_s63b44_engine())
    set_vehicle(bmw_m6_f13_vehicle())
    set_transmission(zf_gs6_53bz_transmission())
}

main()