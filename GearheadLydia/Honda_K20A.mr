import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node honda_k20a_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8400 * units.rpm;
    input limiter_duration: 0.05;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/4.0) * cycle)
            .connect_wire(wires.wire3, (1.0/4.0) * cycle)
            .connect_wire(wires.wire4, (2.0/4.0) * cycle)
            .connect_wire(wires.wire2, (3.0/4.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}


// http://mywikimotors.com/honda-k20a-k20c/
// https://www.motortrend.com/how-to/0704-turp-honda-civic/

public node honda_k20a_lobe_profile_int_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 196 * units.deg,
            gamma: 1.0,
            lift: 9.3 * units.mm,
            steps: 100
        );
}

public node honda_k20a_lobe_profile_exh_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 193 * units.deg,
            gamma: 1.0,
            lift: 8.7 * units.mm,
            steps: 100
        );
}

public node honda_k20a_lobe_profile_int_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 224 * units.deg,
            gamma: 1.5,
            lift: 12.65 * units.mm,
            steps: 100
        );
}

public node honda_k20a_lobe_profile_exh_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 219 * units.deg,
            gamma: 1.5,
            lift: 12.14 * units.mm,
            steps: 100
        );
}

public node honda_k20a_camshaft_builder {
    input in_lobe_profile_lo: honda_k20a_lobe_profile_int_lo();
    input ex_lobe_profile_lo: honda_k20a_lobe_profile_exh_lo();
    input in_lobe_profile_hi: honda_k20a_lobe_profile_int_hi();
    input ex_lobe_profile_hi: honda_k20a_lobe_profile_exh_hi();
    input intake_lobe_center_lo: 115.0 * units.deg;
    input exhaust_lobe_center_lo: 115.0 * units.deg;
    input intake_lobe_center_hi: 115.0 * units.deg;
    input exhaust_lobe_center_hi: 115.0 * units.deg;
    input advance_in_lo: 0.0 * units.deg;
    input advance_ex_lo: 0.0 * units.deg;
    input advance_in_hi: 0.0 * units.deg;
    input advance_ex_hi: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0_lo: _intake_cam_0_lo;
    output exhaust_cam_0_lo: _exhaust_cam_0_lo;

    output intake_cam_0_hi: _intake_cam_0_hi;
    output exhaust_cam_0_hi: _exhaust_cam_0_hi;

    camshaft_parameters params(
        advance: advance_in_lo,
        base_radius: base_radius
    )

    camshaft _intake_cam_0_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in_lo)
    camshaft _exhaust_cam_0_lo(params, lobe_profile: ex_lobe_profile_lo, advance: advance_ex_lo)

    camshaft _intake_cam_0_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in_hi)
    camshaft _exhaust_cam_0_hi(params, lobe_profile: ex_lobe_profile_hi, advance: advance_ex_hi)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0_lo
        .add_lobe(rot360 + intake_lobe_center_lo + 0 * rot180)
        .add_lobe(rot360 + intake_lobe_center_lo + 3 * rot180)
        .add_lobe(rot360 + intake_lobe_center_lo + 1 * rot180)
        .add_lobe(rot360 + intake_lobe_center_lo + 2 * rot180)

    _exhaust_cam_0_lo
        .add_lobe(rot360 - exhaust_lobe_center_lo + 0 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center_lo + 3 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center_lo + 1 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center_lo + 2 * rot180)

    _intake_cam_0_hi
        .add_lobe(rot360 + intake_lobe_center_hi + 0 * rot180)
        .add_lobe(rot360 + intake_lobe_center_hi + 3 * rot180)
        .add_lobe(rot360 + intake_lobe_center_hi + 1 * rot180)
        .add_lobe(rot360 + intake_lobe_center_hi + 2 * rot180)

    _exhaust_cam_0_hi
        .add_lobe(rot360 - exhaust_lobe_center_hi + 0 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center_hi + 3 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center_hi + 1 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center_hi + 2 * rot180)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node honda_k20a_head {
    input cam_in_lo;
    input cam_ex_lo;
    input cam_in_hi;
    input cam_ex_hi;
    input chamber_volume: 51.5 * units.cc; // K24 is 50.5 apparently
    input flip_display: false;
    
    alias output __out: head;
    
    // http://www.users.interport.net/s/r/srweiss/tablehdc.htm#HHonda
    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(  0,   0)
        .add_flow_sample( 50,  45)
        .add_flow_sample(100,  85)
        .add_flow_sample(150, 136)
        .add_flow_sample(200, 176)
        .add_flow_sample(250, 215)
        .add_flow_sample(300, 245)
        .add_flow_sample(350, 268)
        .add_flow_sample(400, 282)
        .add_flow_sample(450, 291)
        .add_flow_sample(500, 298)
        .add_flow_sample(550, 309)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(  0,   0)
        .add_flow_sample( 50,  35)
        .add_flow_sample(100,  78)
        .add_flow_sample(150, 120)
        .add_flow_sample(200, 154)
        .add_flow_sample(250, 183)
        .add_flow_sample(300, 199)
        .add_flow_sample(350, 210)
        .add_flow_sample(400, 216)
        .add_flow_sample(450, 221)
        .add_flow_sample(500, 223)
        .add_flow_sample(550, 226)

        
    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.1 * units.inch) * 5 * units.inch,
        intake_runner_cross_section_area: circle_area(1.1 * units.inch),
        exhaust_runner_volume: circle_area(0.6 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.6 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: vtec_valvetrain(
            vtec_intake_camshaft: cam_in_hi,
            vtec_exhaust_camshaft: cam_ex_hi,
            intake_camshaft: cam_in_lo,
            exhaust_camshaft: cam_ex_lo,
            min_rpm: 6000 * units.rpm
        ),
        flip_display: flip_display
    )
}

// https://www.k20a.org/threads/conrod-and-piston-weight.74112/

public node honda_k20a_engine {
    alias output __out: engine;

    engine engine(
        name: "Honda K20A",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 8000 * units.rpm,
        hf_gain: 0.01,
        jitter: 0.5,
        throttle_gamma: 1.0
    )
    
    label lean_angle(15 * units.deg)

    label bore(86.0 * units.mm)
    label bore_spacing(94.0 * units.mm)
    label stroke(86.0 * units.mm)
    label rod_length(139.0 * units.mm)
    label rod_mass(588 * units.g)
    label piston_mass(427 * units.g)
    label compression_height(30.0 * units.mm)
    label deck_height((212.0 + 0.84) * units.mm)
    label piston_dome(4.0 * units.cc) // for 10.5:1 CR
    label crank_mass(17.3 * units.kg)
    label flywheel_mass(5.0 * units.kg)
    label flywheel_radius(5.0 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90.0 * units.deg + lean_angle
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 180 * units.deg)
    rod_journal rj2(angle: 180 * units.deg)
    rod_journal rj3(angle:  0  * units.deg)
    
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 50.0 * units.cm2,
        intake_flow_rate: k_carb(600.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9975,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(400.0),
        runner_length: 5.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((3.5 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(400.0),
        primary_tube_length: bore_spacing * 7,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 2500 * units.mm,
        volume: 2500 * units.mm * circle_area(exhaust_radius)
    )
    
    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
 
    cylinder_bank b0(bank_params, angle: 0 * units.deg + lean_angle)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: bore_spacing * 1.5,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: bore_spacing * 0.0,
            sound_attenuation: 0.87
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: bore_spacing * 0.3,
            sound_attenuation: 0.90
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: bore_spacing * 0.6,
            sound_attenuation: 0.93
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    honda_k20a_camshaft_builder camshaft()

    b0.set_cylinder_head (
        honda_k20a_head(
            cam_in_lo: camshaft.intake_cam_0_lo,
            cam_in_hi: camshaft.intake_cam_0_hi,
            cam_ex_lo: camshaft.exhaust_cam_0_lo,
            cam_ex_hi: camshaft.exhaust_cam_0_hi,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 20 * units.deg)
        .add_sample(1000 * units.rpm, 30 * units.deg)
        .add_sample(2000 * units.rpm, 37 * units.deg)
        .add_sample(3000 * units.rpm, 37 * units.deg)
        .add_sample(4000 * units.rpm, 37 * units.deg)
        .add_sample(5000 * units.rpm, 37 * units.deg)
        .add_sample(6000 * units.rpm, 37 * units.deg)
        .add_sample(7000 * units.rpm, 37 * units.deg)
        .add_sample(8000 * units.rpm, 37 * units.deg)
        .add_sample(9000 * units.rpm, 37 * units.deg)

    engine.add_ignition_module(
        honda_k20a_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 2002 Honda Civic Type-R (EP3)
public node honda_civic_type_r_ep3_vehicle {
    alias output __out:
        vehicle(
            mass: 1204 * units.kg,
            drag_coefficient: 0.34,
            cross_sectional_area: 2.00 * (units.m * units.m),
            diff_ratio: 4.764,
            tire_radius: 308.5 * units.mm, // 205/45R17
            rolling_resistance: 1204 * units.kg * 9.81 * (205.0/275.0) * 0.01
        );
}

public node honda_npr3_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 350 * units.lb_ft
        )
        .add_gear(3.266)
        .add_gear(2.130)
        .add_gear(1.517)
        .add_gear(1.147)
        .add_gear(0.921)
        .add_gear(0.738);
}

public node main {
    set_engine(honda_k20a_engine())
    set_vehicle(honda_civic_type_r_ep3_vehicle())
    set_transmission(honda_npr3_transmission())
}

main()