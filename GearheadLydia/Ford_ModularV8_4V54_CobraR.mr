import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 13726548
// in standard:  26543187

public node ford_modular_cobra54_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6400 * units.rpm;
    input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node ford_modular_cobra46_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 256 * units.deg,
            gamma: 1.4,
            lift: 9.95 * units.mm,
            steps: 100
        );
}

public node ford_modular_cobra46_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 250 * units.deg,
            gamma: 1.4,
            lift: 9.9 * units.mm,
            steps: 100
        );
}

public node ford_modular_cobra54_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 208.75 * units.deg,
            gamma: 1.0,
            lift: 515 * units.thou,
            steps: 100
        );
}

public node ford_modular_cobra54_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 208.7 * units.deg,
            gamma: 1.0,
            lift: 468 * units.thou,
            steps: 100
        );
}

public node ford_modular_cobra54_camshaft_builder {
    input in_lobe_profile: ford_modular_cobra46_lobe_profile_int();
    input ex_lobe_profile: ford_modular_cobra46_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    //input lobe_separation: 110.0 * units.deg;
    //input intake_lobe_center: 110.0 * units.deg;
    //input exhaust_lobe_center: 110.0 * units.deg;
    input lobe_separation: 139.0 * units.deg;
    input intake_lobe_center: 139.0 * units.deg;
    input exhaust_lobe_center: 121.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node ford_modular_cobra54_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 57.0 * units.cc;
    input flip_display: false;
    
    alias output __out: head;
    
    // https://www.svtperformance.com/threads/gt-500-head-flow.540708/
    // converted from 25" to 28"
    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(  0,   0.0)
        .add_flow_sample( 50,  45.5) // 43
        .add_flow_sample(100,  96.1) // 90.8
        .add_flow_sample(150, 139.0) // 131.3
        .add_flow_sample(200, 179.0) // 169.1
        .add_flow_sample(250, 215.3) // 203.5
        .add_flow_sample(300, 248.0) // 234.3
        .add_flow_sample(350, 272.7) // 257.7
        .add_flow_sample(400, 290.3) // 274.3
        .add_flow_sample(450, 301.0) // 284.4
        .add_flow_sample(500, 307.5) // 290.6
        .add_flow_sample(550, 311.8) // 294.6

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(  0,   0.0)
        .add_flow_sample( 50,  42.3) // 40
        .add_flow_sample(100,  94.8) // 89.6
        .add_flow_sample(150, 140.2) // 132.5
        .add_flow_sample(200, 178.3) // 168.5
        .add_flow_sample(250, 204.3) // 193.0
        .add_flow_sample(300, 224.9) // 212.5
        .add_flow_sample(350, 236.5) // 223.5
        .add_flow_sample(400, 244.5) // 231.0
        .add_flow_sample(450, 259.5) // 245.2
        .add_flow_sample(500, 259.3) // 245; listed as 240.5, assumed typo
        .add_flow_sample(550, 259.3) // 245

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 5 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 5 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node ford_modular_4v54_cobra_r_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Ford SVT Cobra R 4V",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 6000 * units.rpm, // 6200
        throttle_gamma: 1.0
        //jitter: 0.3,
        //hf_gain: 0.005
    )

    // https://fordauthority.com/fmc/ford-motor-company-engines/ford-modular-family/ford-5-4l-triton-engine/
    label bore(90.22 * units.mm)
    label bore_spacing(100.0 * units.mm)
    label stroke(105.8 * units.mm)
    label rod_length(169.1 * units.mm)
    label rod_mass(618 * units.g)
    label compression_height(29.64 * units.mm)
    label piston_mass(361 * units.g)
    label piston_dome(4.451 * units.cc)
    label deck_height((256.0 + 0.2) * units.mm)
    label crank_mass(54.3 * units.lb)
    label flywheel_mass(15 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // -45 degrees
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle: 270 * units.deg)
    rod_journal rj3(angle:  90 * units.deg)
    rod_journal rj4(angle: 180 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)


    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 3.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(450),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.994,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(280),
        runner_length: 8.5 * units.inch,
        velocity_decay: 0.1
    )

    label exhaust_radius((5.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(700),
        primary_tube_length: 15.0 * units.inch,
        primary_flow_rate: k_carb(250),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 1200 * units.mm,
        volume: 1200 * units.mm * circle_area(exhaust_radius) * 2
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.05, impulse_response: ir_lib.default_0)

    label pipe_length_1(2.7 * bore_spacing)
    label pipe_length_2(1.8 * bore_spacing)
    label pipe_length_3(0.9 * bore_spacing)
    label pipe_length_4(0.0 * bore_spacing)

    label exhaust_stagger(0.2 * bore_spacing)

    cylinder_bank bL(bank_params, angle: 45.0 * units.deg) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + exhaust_stagger
        )

    cylinder_bank bR(bank_params, angle: -45.0 * units.deg) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    ford_modular_cobra54_camshaft_builder camshaft(
        in_lobe_profile: ford_modular_cobra54_lobe_profile_int(),
        ex_lobe_profile: ford_modular_cobra54_lobe_profile_exh()
    )

    bL.set_cylinder_head (
        ford_modular_cobra54_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )
    bR.set_cylinder_head (
        ford_modular_cobra54_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 30 * units.deg)
        .add_sample(1000 * units.rpm, 35 * units.deg)
        .add_sample(2000 * units.rpm, 37 * units.deg)
        .add_sample(3000 * units.rpm, 38 * units.deg)
        .add_sample(4000 * units.rpm, 38 * units.deg)
        .add_sample(5000 * units.rpm, 38 * units.deg)
        .add_sample(6000 * units.rpm, 38 * units.deg)
        .add_sample(7000 * units.rpm, 38 * units.deg)

    engine.add_ignition_module(
        ford_modular_cobra54_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2000 Ford Mustang SVT Cobra R (SN95)
public node ford_mustang_cobra_r_sn95_vehicle {
    alias output __out:
        vehicle(
            mass: 3580 * units.lb,
            drag_coefficient: 0.35,
            cross_sectional_area: 2.08 * (units.m * units.m),
            diff_ratio: 3.27,
            tire_radius: 334 * units.mm, // 265/40ZR18
            rolling_resistance: 500 * units.N
        );
}

public node tremec_t56_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 800 * units.lb_ft
        )
        .add_gear(2.96)
        .add_gear(2.07)
        .add_gear(1.43)
        .add_gear(1.00)
        .add_gear(0.80)
        .add_gear(0.62);
}

public node main {
    set_engine(ford_modular_4v54_cobra_r_engine())
    set_vehicle(ford_mustang_cobra_r_sn95_vehicle())
    set_transmission(tremec_t56_transmission())
}

main()