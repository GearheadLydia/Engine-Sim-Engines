import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

label anglesplay(0 * units.deg)

public node scylla_v12_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 9600 * units.rpm;
    input limiter_duration: 0.04;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, ( 0.0 / 12.0) * cycle)
            .connect_wire(wires.wire07, ( 1.0 / 12.0) * cycle + anglesplay)
            .connect_wire(wires.wire03, ( 2.0 / 12.0) * cycle)
            .connect_wire(wires.wire09, ( 3.0 / 12.0) * cycle + anglesplay)
            .connect_wire(wires.wire02, ( 4.0 / 12.0) * cycle)
            .connect_wire(wires.wire08, ( 5.0 / 12.0) * cycle + anglesplay)
            .connect_wire(wires.wire06, ( 6.0 / 12.0) * cycle)
            .connect_wire(wires.wire12, ( 7.0 / 12.0) * cycle + anglesplay)
            .connect_wire(wires.wire04, ( 8.0 / 12.0) * cycle)
            .connect_wire(wires.wire10, ( 9.0 / 12.0) * cycle + anglesplay)
            .connect_wire(wires.wire05, (10.0 / 12.0) * cycle)
            .connect_wire(wires.wire11, (11.0 / 12.0) * cycle + anglesplay);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

public node scylla_v12_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 245 * units.deg,
            gamma: 1.0,
            lift: 12.0 * units.mm,
            steps: 100
        );
}

public node scylla_v12_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.0,
            lift: 12.0 * units.mm,
            steps: 100
        );
}

public node scylla_v12_camshaft_builder {
    input in_lobe_profile: scylla_v12_lobe_profile_int();
    input ex_lobe_profile: scylla_v12_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 110.0 * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)

    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center +  0 * rot60) // # 1
        .add_lobe(rot360 + intake_lobe_center +  4 * rot60) // # 2
        .add_lobe(rot360 + intake_lobe_center +  2 * rot60) // # 3
        .add_lobe(rot360 + intake_lobe_center +  8 * rot60) // # 4
        .add_lobe(rot360 + intake_lobe_center + 10 * rot60) // # 5
        .add_lobe(rot360 + intake_lobe_center +  6 * rot60) // # 6

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center +  1 * rot60 + anglesplay) // # 7
        .add_lobe(rot360 + intake_lobe_center +  5 * rot60 + anglesplay) // # 8
        .add_lobe(rot360 + intake_lobe_center +  3 * rot60 + anglesplay) // # 9
        .add_lobe(rot360 + intake_lobe_center +  9 * rot60 + anglesplay) // # 10
        .add_lobe(rot360 + intake_lobe_center + 11 * rot60 + anglesplay) // # 11
        .add_lobe(rot360 + intake_lobe_center +  7 * rot60 + anglesplay) // # 12

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center +  0 * rot60) // # 1
        .add_lobe(rot360 - exhaust_lobe_center +  4 * rot60) // # 2
        .add_lobe(rot360 - exhaust_lobe_center +  2 * rot60) // # 3
        .add_lobe(rot360 - exhaust_lobe_center +  8 * rot60) // # 4
        .add_lobe(rot360 - exhaust_lobe_center + 10 * rot60) // # 5
        .add_lobe(rot360 - exhaust_lobe_center +  6 * rot60) // # 6

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center +  1 * rot60 + anglesplay) // # 7
        .add_lobe(rot360 - exhaust_lobe_center +  5 * rot60 + anglesplay) // # 8
        .add_lobe(rot360 - exhaust_lobe_center +  3 * rot60 + anglesplay) // # 9
        .add_lobe(rot360 - exhaust_lobe_center +  9 * rot60 + anglesplay) // # 10
        .add_lobe(rot360 - exhaust_lobe_center + 11 * rot60 + anglesplay) // # 11
        .add_lobe(rot360 - exhaust_lobe_center +  7 * rot60 + anglesplay) // # 12
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node scylla_v12_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 40.0 * units.cc;
    input flip_display: false;
    
    input flow_intake: 350.0;
    input flow_exhaust: 280.0;
    input lift_max: 12.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 10.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 10.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.0 * units.inch) * 4 * units.inch,
        intake_runner_cross_section_area: circle_area(1.0 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node scylla_v12_engine {
    alias output __out: engine;

    wires wires()

    label bore(88.0 * units.mm)
    label bore_spacing(98.0 * units.mm)
    label stroke(82.2 * units.mm)
    label rod_length(140.0 * units.mm)
    label compression_height(30.0 * units.mm)
    label piston_dome(0.0 * units.cc)
    label chamber_volume(35.0 * units.cc)
    
    label crank_mass(75 * units.lb)
    label rod_mass(500 * units.g)
    label piston_mass(350 * units.g)
    label flywheel_mass(10 * units.lb)
    label flywheel_radius(4.5 * units.inch)
    
    label compression_ratio(11.0)
    label deck_clearance((((bore * bore / 4.0 * constants.pi * stroke)/(compression_ratio-1.0)) - chamber_volume + piston_dome) / (bore * bore / 4.0 * constants.pi))

    engine engine(
        name: "Scylla V12",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1100 * units.rpm,
        redline: 9500 * units.rpm,
        throttle_gamma: 1.0,
        simulation_frequency: 10000
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (90 + 30 + (anglesplay / 2.0)) * units.deg
    )

    rod_journal rj1(angle:  0  * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 120 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle: 240 * units.deg)
    rod_journal rj6(angle:  0  * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)


    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(1350.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.998,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(300.0),
        runner_length: 6.0 * units.inch,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1200.0),
        primary_tube_length: 12.0 * units.inch,
        primary_flow_rate: k_carb(280.0),
        velocity_decay: 0.4, //0.5
        volume: 3.0 * units.L,
        length: 500 * units.mm
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.005, impulse_response: ir_lib.default_0)
    
    //label pipe_length_1(5.0 * units.cm)
    //label pipe_length_2(4.5 * units.cm)
    //label pipe_length_3(4.0 * units.cm)
    //label pipe_length_4(3.5 * units.cm)
    //label pipe_length_5(3.0 * units.cm)
    //label pipe_length_6(2.5 * units.cm)
    
    label pipe_length_1(2.4 * units.inch)
    label pipe_length_2(1.2 * units.inch)
    label pipe_length_3(0.6 * units.inch)
    label pipe_length_4(0.0 * units.inch)
    label pipe_length_5(0.6 * units.inch)
    label pipe_length_6(1.2 * units.inch)
    
    label pipe_stagger(20 * units.mm)

    cylinder_bank bL(bank_params, angle: (30 * units.deg  + (anglesplay / 2.0))) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire01,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + pipe_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire02,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + pipe_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire03,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + pipe_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire04,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + pipe_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire05,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_5 + pipe_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire06,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_6 + pipe_stagger
        )

    cylinder_bank bR(bank_params, angle: -(30 * units.deg + (anglesplay / 2.0))) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire07,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire08,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire09,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire10,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire11,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_5
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire12,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_6
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    scylla_v12_camshaft_builder camshaft(
        in_lobe_profile: scylla_v12_lobe_profile_int(),
        ex_lobe_profile: scylla_v12_lobe_profile_exh()
    )

    bL.set_cylinder_head (
        scylla_v12_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            chamber_volume: chamber_volume,
            flip_display: true
        )
    )
    bR.set_cylinder_head (
        scylla_v12_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            chamber_volume: chamber_volume,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 50 * units.deg)
        .add_sample(1000 * units.rpm, 65 * units.deg)
        .add_sample(2000 * units.rpm, 70 * units.deg)
        .add_sample(3000 * units.rpm, 70 * units.deg)
        .add_sample(4000 * units.rpm, 70 * units.deg)
        .add_sample(5000 * units.rpm, 70 * units.deg)
        .add_sample(6000 * units.rpm, 70 * units.deg)
        .add_sample(7000 * units.rpm, 70 * units.deg)
        .add_sample(8000 * units.rpm, 70 * units.deg)
        .add_sample(9000 * units.rpm, 70 * units.deg)

    engine.add_ignition_module(
        scylla_v12_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

public node scylla_supercar_vehicle {
    alias output __out:
        vehicle(
            mass: 1546 * units.kg,
            drag_coefficient: 0.35,
            cross_sectional_area: 2.16 * (units.m * units.m),
            diff_ratio: 4.60,
            tire_radius: 372.50 * units.mm, // 375/25ZR22
            rolling_resistance: 1546 * units.kg * 9.81 * (340.0/275.0) * 0.01
        );
}

public node scylla_supercar_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1500 * units.lb_ft
        )
        .add_gear(2.79)
        .add_gear(1.92)
        .add_gear(1.30)
        .add_gear(0.94)
        .add_gear(0.72)
        .add_gear(0.57)
        .add_gear(0.47);
}

public node main {
    set_engine(scylla_v12_engine())
    set_vehicle(scylla_supercar_vehicle())
    set_transmission(scylla_supercar_transmission())
}

main()