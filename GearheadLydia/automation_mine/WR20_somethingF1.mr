import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 1-17-6-11-2-16-8-12-4-18-10-14-5-20-9-15-3-19-7-13

public node formula1_w20_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 10500 * units.rpm;
	input limiter_duration: 0.04;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01,  (0.0/20.0) * cycle)
            .connect_wire(wires.wire17,  (1.0/20.0) * cycle)
            .connect_wire(wires.wire06,  (2.0/20.0) * cycle)
            .connect_wire(wires.wire11,  (3.0/20.0) * cycle)
            .connect_wire(wires.wire02,  (4.0/20.0) * cycle)
            .connect_wire(wires.wire16,  (5.0/20.0) * cycle)
            .connect_wire(wires.wire08,  (6.0/20.0) * cycle)
            .connect_wire(wires.wire12,  (7.0/20.0) * cycle)
            .connect_wire(wires.wire04,  (8.0/20.0) * cycle)
            .connect_wire(wires.wire18,  (9.0/20.0) * cycle)
            .connect_wire(wires.wire10, (10.0/20.0) * cycle)
            .connect_wire(wires.wire14, (11.0/20.0) * cycle)
            .connect_wire(wires.wire05, (12.0/20.0) * cycle)
            .connect_wire(wires.wire20, (13.0/20.0) * cycle)
            .connect_wire(wires.wire09, (14.0/20.0) * cycle)
            .connect_wire(wires.wire15, (15.0/20.0) * cycle)
            .connect_wire(wires.wire03, (16.0/20.0) * cycle)
            .connect_wire(wires.wire19, (17.0/20.0) * cycle)
            .connect_wire(wires.wire07, (18.0/20.0) * cycle)
            .connect_wire(wires.wire13, (19.0/20.0) * cycle);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
    output wire13: ignition_wire();
    output wire14: ignition_wire();
    output wire15: ignition_wire();
    output wire16: ignition_wire();
    output wire17: ignition_wire();
    output wire18: ignition_wire();
    output wire19: ignition_wire();
    output wire20: ignition_wire();
}

// cams copied from VR6 R32

public node formula1_w20_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.0,
            lift: 11.0 * units.mm,
            steps: 100
        );
}

public node formula1_w20_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.0,
            lift: 11.0 * units.mm,
            steps: 100
        );
}

public node formula1_w20_camshaft_builder {
    input in_lobe_profile: formula1_w20_lobe_profile_int();
	input ex_lobe_profile: formula1_w20_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 100.0  * units.deg;
    input exhaust_lobe_center: 100.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 13 * units.mm;

    output intake_cam_LO: _intake_cam_LO;
    output exhaust_cam_LO: _exhaust_cam_LO;
    output intake_cam_LI: _intake_cam_LI;
    output exhaust_cam_LI: _exhaust_cam_LI;
    output intake_cam_RI: _intake_cam_RI;
    output exhaust_cam_RI: _exhaust_cam_RI;
    output intake_cam_RO: _intake_cam_RO;
    output exhaust_cam_RO: _exhaust_cam_RO;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_LO(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_LO(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_LI(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_LI(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_RI(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_RI(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_RO(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_RO(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
    label rot36(36 * units.deg)
    label rot45(45 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)
	
	// firing order: 1-17-6-11-2-16-8-12-4-18-10-14-5-20-9-15-3-19-7-13

    _intake_cam_LO
        .add_lobe(rot360 + intake_lobe_center + ( 0 * rot36)) //  #1
		.add_lobe(rot360 + intake_lobe_center + (16 * rot36)) //  #3
        .add_lobe(rot360 + intake_lobe_center + (12 * rot36)) //  #5
		.add_lobe(rot360 + intake_lobe_center + (18 * rot36)) //  #7
		.add_lobe(rot360 + intake_lobe_center + (14 * rot36)) //  #9

    _intake_cam_LI
        .add_lobe(rot360 + intake_lobe_center + ( 4 * rot36)) //  #2
		.add_lobe(rot360 + intake_lobe_center + ( 8 * rot36)) //  #4
        .add_lobe(rot360 + intake_lobe_center + ( 2 * rot36)) //  #6
		.add_lobe(rot360 + intake_lobe_center + ( 6 * rot36)) //  #8
		.add_lobe(rot360 + intake_lobe_center + (10 * rot36)) //  #10

    _intake_cam_RI
        .add_lobe(rot360 + intake_lobe_center + ( 3 * rot36)) // #11
		.add_lobe(rot360 + intake_lobe_center + (19 * rot36)) // #13
        .add_lobe(rot360 + intake_lobe_center + (15 * rot36)) // #15
		.add_lobe(rot360 + intake_lobe_center + ( 1 * rot36)) // #17
		.add_lobe(rot360 + intake_lobe_center + (17 * rot36)) // #19

    _intake_cam_RO
        .add_lobe(rot360 + intake_lobe_center + ( 7 * rot36)) // #12
		.add_lobe(rot360 + intake_lobe_center + (11 * rot36)) // #14
        .add_lobe(rot360 + intake_lobe_center + ( 5 * rot36)) // #16
		.add_lobe(rot360 + intake_lobe_center + ( 9 * rot36)) // #18
		.add_lobe(rot360 + intake_lobe_center + (13 * rot36)) // #20

    _exhaust_cam_LO
        .add_lobe(rot360 - exhaust_lobe_center + ( 0 * rot36)) //  #1
		.add_lobe(rot360 - exhaust_lobe_center + (16 * rot36)) //  #3
        .add_lobe(rot360 - exhaust_lobe_center + (12 * rot36)) //  #5
		.add_lobe(rot360 - exhaust_lobe_center + (18 * rot36)) //  #7
		.add_lobe(rot360 - exhaust_lobe_center + (14 * rot36)) //  #9

    _exhaust_cam_LI
        .add_lobe(rot360 - exhaust_lobe_center + ( 4 * rot36)) //  #2
		.add_lobe(rot360 - exhaust_lobe_center + ( 8 * rot36)) //  #4
        .add_lobe(rot360 - exhaust_lobe_center + ( 2 * rot36)) //  #6
		.add_lobe(rot360 - exhaust_lobe_center + ( 6 * rot36)) //  #8
		.add_lobe(rot360 - exhaust_lobe_center + (10 * rot36)) //  #10

    _exhaust_cam_RI
        .add_lobe(rot360 - exhaust_lobe_center + ( 3 * rot36)) // #11
		.add_lobe(rot360 - exhaust_lobe_center + (19 * rot36)) // #13
        .add_lobe(rot360 - exhaust_lobe_center + (15 * rot36)) // #15
		.add_lobe(rot360 - exhaust_lobe_center + ( 1 * rot36)) // #17
		.add_lobe(rot360 - exhaust_lobe_center + (17 * rot36)) // #19

    _exhaust_cam_RO
        .add_lobe(rot360 - exhaust_lobe_center + ( 7 * rot36)) // #12
		.add_lobe(rot360 - exhaust_lobe_center + (11 * rot36)) // #14
        .add_lobe(rot360 - exhaust_lobe_center + ( 5 * rot36)) // #16
		.add_lobe(rot360 - exhaust_lobe_center + ( 9 * rot36)) // #18
		.add_lobe(rot360 - exhaust_lobe_center + (13 * rot36)) // #20
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node formula1_w20_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 45.0 * units.cc;
	input intake_runner_volume: circle_area(1.1 * units.inch) * 2 * units.inch;
	input intake_runner_cross_section_area: circle_area(1.1 * units.inch);
	input exhaust_runner_volume: circle_area(0.85 * units.inch) * 2 * units.inch;
	input exhaust_runner_cross_section_area: circle_area(0.85 * units.inch);
    input flip_display: false;
	
	input flow_attenuation_in: 1.3;
	input flow_attenuation_ex: 1.3;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  60 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale,  90 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  55 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale,  85 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node w16 {
    alias output __out: engine;

    wires wires()

	label vee_angle(15 * units.deg)

    label bore(60.5 * units.mm)
    label stroke(60.5 * units.mm)
    label rod_length(120 * units.mm)
    label rod_mass(400 * units.g)
	label piston_mass(300 * units.g)
    label compression_height(20.0 * units.mm)
	label piston_dome(0.0 * units.cc)
	label deck_clearance(1.50 * units.mm)
    label crank_mass(55 * units.lb)
    label flywheel_mass(10 * units.lb)
    label flywheel_radius(5 * units.inch)

    engine engine(
        name: "Formula 1 WR20",
        starter_torque: 250 * units.lb_ft,
		starter_speed: 950 * units.rpm,
        redline: 10000 * units.rpm,
        throttle_gamma: 1.0,
		simulation_frequency: 6000
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (90+54) * units.deg
    )

    rod_journal rj02(angle: ( 0  * units.deg) + (vee_angle/2))
    rod_journal rj04(angle: (144 * units.deg) - (vee_angle/2))
    rod_journal rj06(angle: (216 * units.deg) + (vee_angle/2))
	rod_journal rj08(angle: (288 * units.deg) - (vee_angle/2))
    rod_journal rj10(angle: ( 72 * units.deg) + (vee_angle/2))
    rod_journal rj12(angle: ( 72 * units.deg) - (vee_angle/2))
	rod_journal rj14(angle: (288 * units.deg) + (vee_angle/2))
    rod_journal rj16(angle: (216 * units.deg) - (vee_angle/2))
    rod_journal rj18(angle: (144 * units.deg) + (vee_angle/2))
    rod_journal rj20(angle: ( 0  * units.deg) - (vee_angle/2))

    c0
        .add_rod_journal(rj02)
        .add_rod_journal(rj04)
        .add_rod_journal(rj06)
        .add_rod_journal(rj08)
        .add_rod_journal(rj10)
        .add_rod_journal(rj12)
        .add_rod_journal(rj14)
        .add_rod_journal(rj16)
        .add_rod_journal(rj18)
        .add_rod_journal(rj20)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake_L(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(1125.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9983,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(300.0),
        runner_length: 8.0 * units.inch,
        velocity_decay: 0.2
    )

    intake intake_R(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(1250.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9983,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(300.0),
        runner_length: 8.0 * units.inch,
        velocity_decay: 0.2
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(2500.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(350.0),
        velocity_decay: 0.2, //0.5
        volume: 5.0 * units.L,
		length: 500 * units.mm
    )
	
    exhaust_system exhaust(es_params, audio_volume: 1.00 * 0.002, impulse_response: ir_lib.default_0)

	label exhaust_stagger_FR(0.1 * units.inch)
	label exhaust_stagger_LR(1.0 * units.inch)
	label exhaust_stagger_IO(0.3 * units.inch)
	label pipe_length_1(48.0 * units.mm)
	label pipe_length_2(36.0 * units.mm)
	label pipe_length_3(24.0 * units.mm)
	label pipe_length_4(12.0 * units.mm)
	label pipe_length_5(0.0 * units.mm)

    cylinder_bank bLO(bank_params, angle: (54 * units.deg) + (vee_angle/2)) // LO (first)
    bLO
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj02,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire01,
			primary_length: pipe_length_1 + exhaust_stagger_FR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj06,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire03,
			primary_length: pipe_length_3 + exhaust_stagger_FR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj10,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire05,
			primary_length: pipe_length_5 + exhaust_stagger_FR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj14,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire07,
			primary_length: pipe_length_4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj18,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire09,
			primary_length: pipe_length_2
        )

    cylinder_bank bRI(bank_params, angle: (-54 * units.deg) + (vee_angle/2)) // RI (second)
    bRI
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj02,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire11,
			primary_length: pipe_length_2 + exhaust_stagger_FR + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj06,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire13,
			primary_length: pipe_length_4 + exhaust_stagger_FR + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj10,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire15,
			primary_length: pipe_length_5 + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj14,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire17,
			primary_length: pipe_length_3 + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj18,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire19,
			primary_length: pipe_length_1 + exhaust_stagger_IO + exhaust_stagger_LR
        )
	
    cylinder_bank bLI(bank_params, angle: (54 * units.deg) - (vee_angle/2)) // LI (third)
    bLI
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj04,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire02,
			primary_length: pipe_length_1 + exhaust_stagger_FR + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj08,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire04,
			primary_length: pipe_length_3 + exhaust_stagger_FR + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj12,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire06,
			primary_length: pipe_length_5 + exhaust_stagger_FR + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj16,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire08,
			primary_length: pipe_length_4 + exhaust_stagger_IO + exhaust_stagger_LR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj20,
            intake: intake_L,
            exhaust_system: exhaust,
            ignition_wire: wires.wire10,
			primary_length: pipe_length_2 + exhaust_stagger_IO + exhaust_stagger_LR
        )

    cylinder_bank bRO(bank_params, angle: (-54 * units.deg) - (vee_angle/2)) // RO (fourth)
    bRO
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj04,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire12,
			primary_length: pipe_length_2 + exhaust_stagger_FR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj08,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire14,
			primary_length: pipe_length_4 + exhaust_stagger_FR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj12,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire16,
			primary_length: pipe_length_5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj16,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire18,
			primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj20,
            intake: intake_R,
            exhaust_system: exhaust,
            ignition_wire: wires.wire20,
			primary_length: pipe_length_1
        )

    engine
        .add_cylinder_bank(bLO)
        .add_cylinder_bank(bRI)
        .add_cylinder_bank(bLI)
        .add_cylinder_bank(bRO)

    engine.add_crankshaft(c0)

    formula1_w20_camshaft_builder camshaft(
	    in_lobe_profile: formula1_w20_lobe_profile_int(),
		ex_lobe_profile: formula1_w20_lobe_profile_exh()
	)

	label intake_runner_radius(1.0 * units.inch)
	label exhaust_runner_radius(0.75 * units.inch)
	
	label runner_length_shrt(2.0 * units.inch)
	label runner_length_long(4.5 * units.inch)

    bLO.set_cylinder_head (
        formula1_w20_head(
            intake_camshaft: camshaft.intake_cam_LO,
            exhaust_camshaft: camshaft.exhaust_cam_LO,
			intake_runner_volume: circle_area(intake_runner_radius) * runner_length_long,
			intake_runner_cross_section_area: circle_area(intake_runner_radius),
			exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_shrt,
			exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: true
        )
    )
    bRI.set_cylinder_head (
        formula1_w20_head(
            intake_camshaft: camshaft.intake_cam_RI,
            exhaust_camshaft: camshaft.exhaust_cam_RI,
			intake_runner_volume: circle_area(intake_runner_radius) * runner_length_shrt,
			intake_runner_cross_section_area: circle_area(intake_runner_radius),
			exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_long,
			exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: false
        )
    )
    bLI.set_cylinder_head (
        formula1_w20_head(
            intake_camshaft: camshaft.intake_cam_LI,
            exhaust_camshaft: camshaft.exhaust_cam_LI,
			intake_runner_volume: circle_area(intake_runner_radius) * runner_length_shrt,
			intake_runner_cross_section_area: circle_area(intake_runner_radius),
			exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_long,
			exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: true
        )
    )
    bRO.set_cylinder_head (
        formula1_w20_head(
            intake_camshaft: camshaft.intake_cam_RO,
            exhaust_camshaft: camshaft.exhaust_cam_RO,
			intake_runner_volume: circle_area(intake_runner_radius) * runner_length_long,
			intake_runner_cross_section_area: circle_area(intake_runner_radius),
			exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_shrt,
			exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample( 0000 * units.rpm, 25 * units.deg)
        .add_sample( 1000 * units.rpm, 25 * units.deg)
        .add_sample( 2000 * units.rpm, 25 * units.deg)
        .add_sample( 3000 * units.rpm, 25 * units.deg)
        .add_sample( 4000 * units.rpm, 25 * units.deg)
        .add_sample( 5000 * units.rpm, 25 * units.deg)
        .add_sample( 6000 * units.rpm, 25 * units.deg)
		.add_sample( 7000 * units.rpm, 25 * units.deg)
		.add_sample( 8000 * units.rpm, 25 * units.deg)
		.add_sample( 9000 * units.rpm, 25 * units.deg)
		.add_sample(10000 * units.rpm, 25 * units.deg)
		.add_sample(11000 * units.rpm, 25 * units.deg)
		.add_sample(12000 * units.rpm, 25 * units.deg)
		.add_sample(13000 * units.rpm, 25 * units.deg)

    engine.add_ignition_module(
        formula1_w20_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2019 Bugatti Chiron Super Sport 300+
public node bugatti_chiron_vehicle {
    alias output __out:
        vehicle(
            mass: 1975 * units.kg,
            drag_coefficient: 0.36,
            cross_sectional_area: 1.95 * (units.m * units.m),
            diff_ratio: 3.643,
            tire_radius: 355.5 * units.mm, // P355/25R21
            rolling_resistance: 1975 * units.kg * 9.81 * (355.0/275.0) * 0.01
        );
}

public node bugatti_chiron_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 2000 * units.lb_ft
        )
        .add_gear(2.25)
        .add_gear(1.61)
        .add_gear(1.19)
        .add_gear(0.92)
        .add_gear(0.75)
        .add_gear(0.62)
        .add_gear(0.55);
}

public node main {
    set_engine(w16())
    set_vehicle(bugatti_chiron_vehicle())
    set_transmission(bugatti_chiron_transmission())
}

main()