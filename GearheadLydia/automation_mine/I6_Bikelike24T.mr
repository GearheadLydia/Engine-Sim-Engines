import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node i6_bikelike24t_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 10250 * units.rpm;
    input limiter_duration: 0.04;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
            .connect_wire(wires.wire3, (2.0/6.0) * cycle)
            .connect_wire(wires.wire6, (3.0/6.0) * cycle)
            .connect_wire(wires.wire2, (4.0/6.0) * cycle)
            .connect_wire(wires.wire4, (5.0/6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node i6_bikelike24t_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 245.0 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node i6_bikelike24t_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 245.0 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node i6_bikelike24t_camshaft_builder {
    input lobe_profile: i6_bikelike24t_lobe_profile_int();
    input ex_lobe_profile: i6_bikelike24t_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 115.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 15.0 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot120)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
}

public node i6_bikelike24t_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 30.0 * units.cc;
    input flip_display: false;
    
    input flow_intake: 335.0;
    input flow_exhaust: 280.0;
    input lift_max: 12.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 10.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 10.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.1 * units.inch) * 6 * units.inch,
        intake_runner_cross_section_area: circle_area(1.1 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 6 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node i6_bikelike24t_engine {
    alias output __out: engine;

    engine engine(
        name: "Bike Like 6cyl",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1500 * units.rpm,
        redline: 10000 * units.rpm,
        fuel: fuel(max_burning_efficiency: 1.1), // free power to supplant unavailable turbo
        throttle_gamma: 1.0
    )
    
    label lean_angle(0.0 * units.deg)

    label bore(78.0 * units.mm)
    label stroke(83.5 * units.mm)
    label rod_length(135.0 * units.mm)
    label rod_mass(500 * units.g)
    label piston_mass(400 * units.g)
    label compression_height(25.00 * units.mm)
    label deck_clearance(1.0 * units.mm)
    label piston_dome(10.0 * units.cc)
    label crank_mass(50 * units.lb)
    label flywheel_mass(1 * units.lb)
    label flywheel_radius(5 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg + lean_angle
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle:  0  * units.deg)
    
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(500.0),
        idle_flow_rate: k_carb(0.0001),
        idle_throttle_plate_position: 0.9973,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(450.0),
        runner_length: 8.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((4.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(500.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(250.0),
        velocity_decay: 0.3, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 2200 * units.mm,
        volume: 2200 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(
        es_params,
        audio_volume: 1.0 * 0.03,
        impulse_response: ir_lib.default_0
    )
 
    cylinder_bank b0(bank_params, angle: 0 * units.deg + lean_angle)
    b0
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 50 * units.mm,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 30 * units.mm,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 10 * units.mm,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 00 * units.mm,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 20 * units.mm,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 40 * units.mm,
            sound_attenuation: 1.0
        )


    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    i6_bikelike24t_camshaft_builder camshaft()

    b0.set_cylinder_head (
        i6_bikelike24t_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample( 0000 * units.rpm, 55 * units.deg)
        .add_sample( 1000 * units.rpm, 60 * units.deg)
        .add_sample( 2000 * units.rpm, 60 * units.deg)
        .add_sample( 3000 * units.rpm, 60 * units.deg)
        .add_sample( 4000 * units.rpm, 59 * units.deg)
        .add_sample( 5000 * units.rpm, 56 * units.deg)
        .add_sample( 6000 * units.rpm, 53 * units.deg)
        .add_sample( 7000 * units.rpm, 49 * units.deg)
        .add_sample( 8000 * units.rpm, 45 * units.deg)
        .add_sample( 9000 * units.rpm, 41 * units.deg)
        .add_sample(10000 * units.rpm, 36 * units.deg)
        .add_sample(11000 * units.rpm, 32 * units.deg)

    engine.add_ignition_module(
        i6_bikelike24t_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 2006 Flechette RSR
public node flechette_vehicle {
    alias output __out:
        vehicle(
            mass: 1400 * units.kg,
            drag_coefficient: 0.35,
            cross_sectional_area: 2.0 * (units.m * units.m),
            diff_ratio: 3.600,
            tire_radius: 328.93 * units.mm, // 285/35R18
            rolling_resistance: 1400 * units.kg * 9.81 * (285.0/275.0) * 0.01
        );
}

public node flechette_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(3.500)
        .add_gear(2.360)
        .add_gear(1.685)
        .add_gear(1.312)
        .add_gear(1.000)
        .add_gear(0.793);
}

public node main {
    set_engine(i6_bikelike24t_engine())
    set_vehicle(flechette_vehicle())
    set_transmission(flechette_transmission())
}

main()