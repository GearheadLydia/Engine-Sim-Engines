import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order assumed to be similar to Cadillac 45 degree V16

label rot60(60 * units.deg)

public node bmw_goldfisch_v16_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6200 * units.rpm;
    input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, (0.0/8.0) * cycle)
            .connect_wire(wires.wire09, (0.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire06, (1.0/8.0) * cycle)
            .connect_wire(wires.wire14, (1.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire02, (2.0/8.0) * cycle)
            .connect_wire(wires.wire10, (2.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire05, (3.0/8.0) * cycle)
            .connect_wire(wires.wire13, (3.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire08, (4.0/8.0) * cycle)
            .connect_wire(wires.wire16, (4.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire03, (5.0/8.0) * cycle)
            .connect_wire(wires.wire11, (5.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire07, (6.0/8.0) * cycle)
            .connect_wire(wires.wire15, (6.0/8.0) * cycle + rot60)
            .connect_wire(wires.wire04, (7.0/8.0) * cycle)
            .connect_wire(wires.wire12, (7.0/8.0) * cycle + rot60);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
    output wire13: ignition_wire();
    output wire14: ignition_wire();
    output wire15: ignition_wire();
    output wire16: ignition_wire();
}

// https://www.bimmerforums.com/forum/showthread.php?1230544-Cam-specs-for-M70
// assuming cams are same profile as M70B50
public node bmw_goldfisch_v16_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 245 * units.deg,
            gamma: 1.0,
            lift: 11.5 * units.mm,
            steps: 100
        );
}

public node bmw_goldfisch_v16_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 255 * units.deg,
            gamma: 1.0,
            lift: 11.5 * units.mm,
            steps: 100
        );
}

public node bmw_goldfisch_v16_camshaft_builder {
    input in_lobe_profile: bmw_goldfisch_v16_lobe_profile_int();
    input ex_lobe_profile: bmw_goldfisch_v16_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 112.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 10.0 * units.deg;
    input base_radius: 16.0 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
    label rot45(45 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90) //  #1
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90) //  #2
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90) //  #3
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90) //  #4
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90) //  #5
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90) //  #6
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90) //  #7
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90) //  #8

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90 + rot60) //  #9
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90 + rot60) // #10
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90 + rot60) // #11
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90 + rot60) // #12
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90 + rot60) // #13
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90 + rot60) // #14
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90 + rot60) // #15
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90 + rot60) // #16

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90) //  #1
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90) //  #2
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90) //  #3
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90) //  #4
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90) //  #5
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90) //  #6
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90) //  #7
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90) //  #8

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90 + rot60) //  #9
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90 + rot60) // #10
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90 + rot60) // #11
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90 + rot60) // #12
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90 + rot60) // #13
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90 + rot60) // #14
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90 + rot60) // #15
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90 + rot60) // #16
}

public node bmw_goldfisch_v16_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 35.0 * units.cc;
    input flip_display: false;
    
    // guesses
    input flow_intake: 180;
    input flow_exhaust: 130;
    input lift_max: 11.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 5.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 5.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 6 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 5 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

// deck height for goldfisch_v16: (75/2)+135+34.15+clearance
// deck height for S52: 210mm

public node bmw_goldfisch_v16_engine {
    alias output __out: engine;

    label bore(84.0 * units.mm)
    label bore_spacing(91.0 * units.mm)
    label stroke(75.0 * units.mm)
    label rod_length(135.0 * units.mm)
    label rod_mass(550 * units.g)
    label piston_mass(450 * units.g)
    label compression_height(34.15 * units.mm)
    label piston_dome(10.0 * units.cc)
    label deck_height((210.0 + 1.65) * units.mm)
    label crank_mass(100 * units.lb)
    label flywheel_mass(20 * units.lb)
    label flywheel_radius(6 * units.inch)

    engine engine(
        name: "BMW ''Goldfisch'' V16",
        starter_torque: 250 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 6000 * units.rpm,
        throttle_gamma: 1.0,
        simulation_frequency: 7000,
        hf_gain: 0.01,
        jitter: 0.5
    )

    wires wires()

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 5 * units.kg, radius: 6.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle: 180 * units.deg)
    rod_journal rj3(angle:  90 * units.deg)
    rod_journal rj4(angle: 270 * units.deg)
    rod_journal rj5(angle: 270 * units.deg)
    rod_journal rj6(angle:  90 * units.deg)
    rod_journal rj7(angle: 180 * units.deg)
    rod_journal rj8(angle:   0 * units.deg)
    
    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)
        .add_rod_journal(rj7)
        .add_rod_journal(rj8)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intakeL(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(400.0),
        idle_flow_rate: k_carb(0.0001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(250.0),
        runner_length: 7.0 * units.inch,
        velocity_decay: 0.1
    )

    intake intakeR(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(400.0),
        idle_flow_rate: k_carb(0.0001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(250.0),
        runner_length: 7.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((3.5 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(700.0),
        primary_tube_length: 9.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2500 * units.mm,
        volume: 2500 * units.mm * circle_area(exhaust_radius) * 2
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.1, impulse_response: ir_lib.default_0)
    
    label pipe_length_1(bore_spacing * 1.8)
    label pipe_length_2(bore_spacing * 1.3)
    label pipe_length_3(bore_spacing * 0.9)
    label pipe_length_4(bore_spacing * 0.5)
    label pipe_length_5(bore_spacing * 0.0)
    label pipe_length_6(bore_spacing * 0.4)
    label pipe_length_7(bore_spacing * 0.8)
    label pipe_length_8(bore_spacing * 1.2)
    
    label pipe_length_stagger(30 * units.mm)
        
    cylinder_bank bL(bank_params, angle: 30 * units.deg) // L (second)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire01,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire02,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire03,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire04,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_4
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire05,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_5
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire06,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_6
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj7,
            ignition_wire: wires.wire07,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_7
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj8,
            ignition_wire: wires.wire08,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_8
        )
 
    cylinder_bank bR(bank_params, angle: -30 * units.deg) // R (first)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire09,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire10,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire11,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire12,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire13,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_5 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire14,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_6 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj7,
            ignition_wire: wires.wire15,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_7 + pipe_length_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj8,
            ignition_wire: wires.wire16,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_8 + pipe_length_stagger
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    bmw_goldfisch_v16_camshaft_builder camshaft(
        in_lobe_profile: bmw_goldfisch_v16_lobe_profile_int(),
        ex_lobe_profile: bmw_goldfisch_v16_lobe_profile_exh()
    )

    bL.set_cylinder_head (
        bmw_goldfisch_v16_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )

    bR.set_cylinder_head (
        bmw_goldfisch_v16_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 64 * units.deg)
        .add_sample(1000 * units.rpm, 74 * units.deg)
        .add_sample(2000 * units.rpm, 74 * units.deg)
        .add_sample(3000 * units.rpm, 73 * units.deg)
        .add_sample(4000 * units.rpm, 72 * units.deg)
        .add_sample(5000 * units.rpm, 71 * units.deg)
        .add_sample(6000 * units.rpm, 70 * units.deg)
        .add_sample(7000 * units.rpm, 70 * units.deg)

    engine.add_ignition_module(
        bmw_goldfisch_v16_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 1990 BMW 750iL (E32)
public node bmw_750il_e32_vehicle {
    alias output __out:
        vehicle(
            mass: 1921 * units.kg,
            drag_coefficient: 0.34,
            cross_sectional_area: 2.14 * (units.m * units.m),
            diff_ratio: 3.15,
            tire_radius: 325 * units.mm, // 225/60ZR15
            rolling_resistance: 1921 * units.kg * 9.81 * (225.0/275.0) * 0.01
        );
}

public node zf_4hp24_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(2.479)
        .add_gear(1.479)
        .add_gear(1.000)
        .add_gear(0.728);
}

public node main {
    set_engine(bmw_goldfisch_v16_engine())
    set_vehicle(bmw_750il_e32_vehicle())
    set_transmission(zf_4hp24_transmission())
}

main()