import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

// firing order (derived, based on reverse-numbered cylinders): 1-4-6-3-5-8-2-7

label cycle(2 * 360 * units.deg)

public node porsche_boxer_908_02_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8550 * units.rpm;
    input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire8, (0.0/8.0) * cycle)
            .connect_wire(wires.wire2, (1.0/8.0) * cycle)
            .connect_wire(wires.wire7, (2.0/8.0) * cycle)
            .connect_wire(wires.wire1, (3.0/8.0) * cycle)
            .connect_wire(wires.wire4, (4.0/8.0) * cycle)
            .connect_wire(wires.wire6, (5.0/8.0) * cycle)
            .connect_wire(wires.wire3, (6.0/8.0) * cycle)
            .connect_wire(wires.wire5, (7.0/8.0) * cycle);
}

private node wires {
    output wire8: ignition_wire();
    output wire4: ignition_wire();
    output wire7: ignition_wire();
    output wire3: ignition_wire();
    output wire6: ignition_wire();
    output wire2: ignition_wire();
    output wire5: ignition_wire();
    output wire1: ignition_wire();
}

// cam specs are guesses
public node porsche_boxer_908_02_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 210 * units.deg,
            gamma: 1.0,
            lift: 500 * units.thou,
            steps: 100
        );
}

public node porsche_boxer_908_02_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 210 * units.deg,
            gamma: 1.0,
            lift: 500 * units.thou,
            steps: 100
        );
}

public node porsche_boxer_908_02_camshaft_builder {
    input lobe_profile: porsche_boxer_908_02_lobe_profile_int();
    input ex_lobe_profile: porsche_boxer_908_02_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 100 * units.deg;
    input exhaust_lobe_center: 100 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: (1.25 * units.inch) / 2; // guess

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90) // #4
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90) // #3
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90) // #2
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90) // #1

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90) // #4
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90) // #3
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90) // #2
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90) // #1

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90) // #8
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90) // #7
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90) // #6
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90) // #5

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90) // #8
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90) // #7
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90) // #6
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90) // #5
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node porsche_boxer_908_02_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 30.0 * units.cc; // guess
    input flip_display: false;
    
    input flow_attenuation_in: 0.9;
    input flow_attenuation_ex: 0.9;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  60 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale,  90 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  55 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale,  85 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(0.9 * units.inch) * 4 * units.inch,
        intake_runner_cross_section_area: circle_area(0.9 * units.inch),
        exhaust_runner_volume: circle_area(0.6 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.6 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node porsche_boxer_908_02_engine {
    alias output __out: engine;

    engine engine(
        name: "Porsche 908/02",
        starter_torque: 100 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 8400 * units.rpm,
        throttle_gamma: 1.0
    )

    label bore(84.0 * units.mm)
    label bore_spacing(94.0 * units.mm) // guess for exhaust
    label stroke(66.0 * units.mm)
    label rod_length(130.0 * units.mm) // real
    label rod_mass(500 * units.g)
    label piston_mass(450 * units.g)
    label compression_height(33.9 * units.mm)
    label deck_clearance((0.5 + 1.1) * units.mm)
    label piston_dome(0.0 * units.cc) // for 10.4:1 CR
    label crank_mass(30.0 * units.kg)
    label flywheel_mass(10 * units.lb)
    label flywheel_radius(4.5 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 0.0 * units.deg
    )

    rod_journal rj1(angle:  0  * units.deg)
    rod_journal rj2(angle: 180 * units.deg)
    rod_journal rj3(angle: 180 * units.deg)
    rod_journal rj4(angle:  0  * units.deg)
    rod_journal rj5(angle:  90 * units.deg)
    rod_journal rj6(angle: 270 * units.deg)
    rod_journal rj7(angle: 270 * units.deg)
    rod_journal rj8(angle:  90 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)
        .add_rod_journal(rj7)
        .add_rod_journal(rj8)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intakeL(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(450.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.998,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(240.0),
        runner_length: 10.0 * units.inch,
        velocity_decay: 0.1
    )

    intake intakeR(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(450.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.998,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(240.0),
        runner_length: 4.0 * units.inch,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_params_L(
        outlet_flow_rate: k_carb(450.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(180.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area((3.5 * units.inch) / 2) * 4,
        length: 300 * units.mm,
        volume: 300 * units.mm * circle_area((3.5 * units.inch) / 2) * 4
    )

    exhaust_system_parameters es_params_R(
        outlet_flow_rate: k_carb(450.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(180.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area((3.5 * units.inch) / 2) * 4,
        length: 340 * units.mm,
        volume: 340 * units.mm * circle_area((3.5 * units.inch) / 2) * 4
    )

    exhaust_system exhaustL(es_params_L, audio_volume: 1.0 * 0.002, impulse_response: ir_lib.default_0)
    exhaust_system exhaustR(es_params_R, audio_volume: 1.0 * 0.002, impulse_response: ir_lib.default_0)

    label pipe_length_1(1.4 * bore_spacing)
    label pipe_length_2(0.8 * bore_spacing)
    label pipe_length_3(0.2 * bore_spacing)
    label pipe_length_4(0.0 * bore_spacing)
    
    label exhaust_stagger(0.3 * bore_spacing)

    cylinder_bank bR(bank_params, angle: -90.0 * units.deg) // R (first)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire8,
            intake: intakeR,
            exhaust_system: exhaustR,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intakeR,
            exhaust_system: exhaustR,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire6,
            intake: intakeR,
            exhaust_system: exhaustR,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj7,
            ignition_wire: wires.wire5,
            intake: intakeR,
            exhaust_system: exhaustR,
            primary_length: pipe_length_4
        )

    cylinder_bank bL(bank_params, angle: 90.0 * units.deg) // L (second)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire4,
            intake: intakeL,
            exhaust_system: exhaustL,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire3,
            intake: intakeL,
            exhaust_system: exhaustL,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire2,
            intake: intakeL,
            exhaust_system: exhaustL,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj8,
            ignition_wire: wires.wire1,
            intake: intakeL,
            exhaust_system: exhaustL,
            primary_length: pipe_length_4
        )

    engine
        .add_cylinder_bank(bR)
        .add_cylinder_bank(bL)

    engine.add_crankshaft(c0)

    porsche_boxer_908_02_camshaft_builder camshaft()

    bR.set_cylinder_head (
        porsche_boxer_908_02_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    bL.set_cylinder_head (
        porsche_boxer_908_02_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample( 0000 * units.rpm, 50 * units.deg)
        .add_sample( 1000 * units.rpm, 55 * units.deg)
        .add_sample( 2000 * units.rpm, 55 * units.deg)
        .add_sample( 3000 * units.rpm, 55 * units.deg)
        .add_sample( 4000 * units.rpm, 55 * units.deg)
        .add_sample( 5000 * units.rpm, 55 * units.deg)
        .add_sample( 6000 * units.rpm, 55 * units.deg)
        .add_sample( 7000 * units.rpm, 55 * units.deg)
        .add_sample( 8000 * units.rpm, 55 * units.deg)
        .add_sample( 9000 * units.rpm, 55 * units.deg)

    engine.add_ignition_module(
        porsche_boxer_908_02_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 1969 Porsche 908/02
public node porsche_908_02_vehicle {
    alias output __out:
        vehicle(
            mass: 600 * units.kg,
            drag_coefficient: 0.28,
            cross_sectional_area: 1.4 * (units.m * units.m),
            diff_ratio: 3.800,
            tire_radius: 310.0 * units.mm, // Automobile Catalog: "4.75/11.30 - 15 (F); 6.00/13.50 - 15 (R)"
            rolling_resistance: 600 * units.kg * 9.81 * (165.0/275.0) * 0.01
        );
}

// borrowing Porsche 964 G50 ratios
public node porsche_908_02_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 400 * units.lb_ft
        )
        .add_gear(3.154)
        .add_gear(1.695)
        .add_gear(1.407)
        .add_gear(1.086)
        .add_gear(0.868);
}

public node main {
    set_engine(porsche_boxer_908_02_engine())
    set_vehicle(porsche_908_02_vehicle())
    set_transmission(porsche_908_02_transmission())
}

main()