import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 18436572

public node toyota_1uzfe_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6800 * units.rpm;
	input limiter_duration: 0.10;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node toyota_1uzfe_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 212 * units.deg, // 232 advertised
            gamma: 1.0,
            lift: 7.6 * units.mm,
            steps: 100
        );
}

public node toyota_1uzfe_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 209 * units.deg, //229 advertised
            gamma: 1.0,
            lift: 7.6 * units.mm,
            steps: 100
        );
}

public node toyota_1uzfe_camshaft_builder {
    input in_lobe_profile: toyota_1uzfe_lobe_profile_int();
	input ex_lobe_profile: toyota_1uzfe_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110.75 * units.deg; // not used
    input intake_lobe_center: 110.0 * units.deg;
    input exhaust_lobe_center: 111.5 * units.deg;
    input advance: 0.0 * units.deg; // zeroed out
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node toyota_1uzfe_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 43.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 0.95;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(1.1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1.1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 5 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 12 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node toyota_1uzfe {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Toyota 1UZ-FE",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 1000 * units.rpm,
        redline: 6500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85),
        throttle_gamma: 2.0
		//jitter: 0.3,
		//hf_gain: 0.005
    )
	
	// Sources:
	// https://www.v-eight.com/multimedia/xls/UZ_Engine_Specifications.xls
	// https://www.lextreme.com/forums/threads/deck-height-between-1uz-and-2uz-the-same.3840/
	// https://www.lextreme.com/lexus-1uzfe-compression-ratio-with-different-gaskets/
    label bore(87.5 * units.mm)
	label bore_spacing(105.41 * units.mm)
    label stroke(82.5 * units.mm)
    label rod_length(146.0 * units.mm)
    label rod_mass(628 * units.g)
    label compression_height(34.00 * units.mm)
	label piston_mass(420 * units.g) // guess
	label piston_dome(-5.1 * units.cc)
	label deck_height((222.5 + 0.0) * units.mm) // gasket calculated for 10.0:1 compression is 0mm
    label crank_mass(56 * units.lb)
    label flywheel_mass(20 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 45.0 * units.deg // -45 degrees
    )

    rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: -90.0 * units.deg)
    rod_journal rj2(angle: 90.0 * units.deg)
    rod_journal rj3(angle: 180.0 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(750),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.997,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(650.0),
        runner_length: 6.5 * units.inch,
        velocity_decay: 0.1
    )
	
	label exhaust_radius((3.5 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(700.0),
        primary_tube_length: 30.0 * units.inch,
        primary_flow_rate: k_carb(550.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius) * 2,
		length: 2400 * units.mm,
		volume: (400 * units.mm * circle_area(exhaust_radius)) + (2000 * units.mm * circle_area(exhaust_radius) * 2)
    )

    exhaust_system exhaust(
		es_params,
		audio_volume: 1.0 * 0.1,
		impulse_response: ir_lib.default_0
	)
	
	label exhaust_stagger(30 * units.mm)

    cylinder_bank b0(bank_params, angle: -45.0 * units.deg) // R (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 0 + exhaust_stagger
        )

    cylinder_bank b1(bank_params, angle: 45.0 * units.deg) // L (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 3.5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 3 // intentional
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: bore_spacing * 0
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    toyota_1uzfe_camshaft_builder camshaft(
	    in_lobe_profile: toyota_1uzfe_lobe_profile_int(),
		ex_lobe_profile: toyota_1uzfe_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        toyota_1uzfe_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flip_display: false
        )
    )
    b1.set_cylinder_head (
        toyota_1uzfe_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
        .add_sample(1000 * units.rpm, 20 * units.deg)
        .add_sample(2000 * units.rpm, 25 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 35 * units.deg)
        .add_sample(5000 * units.rpm, 40 * units.deg)
        .add_sample(6000 * units.rpm, 42 * units.deg)
		.add_sample(7000 * units.rpm, 42 * units.deg)

    engine.add_ignition_module(
        toyota_1uzfe_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 6800 * units.rpm
        )
    )
}

// 1995 Lexus SC400 (UZZ30)
public node lexus_sc400_uzz30_vehicle {
    alias output __out:
        vehicle(
            mass: 1640 * units.kg,
            drag_coefficient: 0.31,
            cross_sectional_area: 1.98 * (units.m * units.m),
            diff_ratio: 3.92,
            tire_radius: 326.5 * units.mm, // 225/55VR16
            rolling_resistance: 500 * units.N
        );
}

public node toyota_a341e_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(2.804)
        .add_gear(1.532)
        .add_gear(1.000)
        .add_gear(0.705);
}

public node main {
    set_engine(toyota_1uzfe())
    set_vehicle(lexus_sc400_uzz30_vehicle())
    set_transmission(toyota_a341e_transmission())
}

main()