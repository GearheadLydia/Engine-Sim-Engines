import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node pontiac_iron_duke_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 4600 * units.rpm;
    input limiter_duration: 0.10;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/4.0) * cycle)
            .connect_wire(wires.wire3, (1.0/4.0) * cycle)
            .connect_wire(wires.wire4, (2.0/4.0) * cycle)
            .connect_wire(wires.wire2, (3.0/4.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

// using aftermarket Comp Cams cam
// https://www.compcams.com/high-energy-192-200-hydraulic-flat-cam-for-pontiac-151-iron-duke.html
public node pontiac_iron_duke_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 192 * units.deg,
            gamma: 1.0,
            lift: 455 * units.thou,
            steps: 100
        );
}

public node pontiac_iron_duke_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 200 * units.deg,
            gamma: 1.0,
            lift: 455 * units.thou,
            steps: 100
        );
}

public node pontiac_iron_duke_camshaft_builder {
    input lobe_profile: pontiac_iron_duke_lobe_profile_int();
    input ex_lobe_profile: pontiac_iron_duke_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 108 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0 * units.deg; // guess
    input base_radius: 1.5 / 2 * units.inch; // guess

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot180)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot180)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot180)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot180)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot180)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node pontiac_iron_duke_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 52.0 * units.cc;
    input flip_display: false;
    
    input flow_attenuation_in: 0.8;
    input flow_attenuation_ex: 0.85;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  25 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  76 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale, 100 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 146 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 175 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 212 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 230 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 255 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 275 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 294 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 300 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 314 * flow_attenuation_in)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  25 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  70 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale, 100 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 132 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 156 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 170 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 181 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 191 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 207 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 214 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 228 * flow_attenuation_ex)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(0.8 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(0.8 * units.inch),
        exhaust_runner_volume: circle_area(0.55 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.55 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node pontiac_iron_duke_techiv_lr8_engine {
    alias output __out: engine;

    engine engine(
        name: "Pontiac Iron Duke LR8",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 800 * units.rpm,
        redline: 4500 * units.rpm,
        throttle_gamma: 1.0
    )
    
    label lean_angle(0 * units.deg)

    label bore(4.00 * units.inch)
    label bore_spacing(4.4 * units.inch)
    label stroke(3.00 * units.inch)
    label rod_length(6.057 * units.inch)
    label rod_mass(600 * units.g)
    label piston_mass(450 * units.g)
    label deck_height((9.175 * units.inch) + (40 * units.thou))
    label compression_height(1.570 * units.inch)
    label piston_dome(-7.00 * units.cc) // for 9.0:1 CR
    label crank_mass(60 * units.lb)
    label flywheel_mass(15 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90.0 * units.deg + lean_angle
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 180 * units.deg)
    rod_journal rj2(angle: 180 * units.deg)
    rod_journal rj3(angle:  0  * units.deg)
    
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 50.0 * units.cm2,
        intake_flow_rate: k_carb(225.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.994,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(150.0),
        runner_length: 8.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((2.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(220.0),
        primary_tube_length: 7.0 * units.inch,
        primary_flow_rate: k_carb(150.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 900 * units.mm,
        volume: (500 * units.mm * circle_area(40 * units.mm)) + (500 * units.mm * circle_area(exhaust_radius))
    )
    
    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
 
    cylinder_bank b0(bank_params, angle: 0 * units.deg + lean_angle)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 6.6 * units.inch,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 0.6 * units.inch,
            sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 0.0 * units.inch,
            sound_attenuation: 0.6
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: 6.0 * units.inch,
            sound_attenuation: 0.8
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    pontiac_iron_duke_camshaft_builder camshaft(
        lobe_profile: pontiac_iron_duke_lobe_profile_int(),
        ex_lobe_profile: pontiac_iron_duke_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        pontiac_iron_duke_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 34 * units.deg)
        .add_sample(1000 * units.rpm, 39 * units.deg)
        .add_sample(2000 * units.rpm, 39 * units.deg)
        .add_sample(3000 * units.rpm, 39 * units.deg)
        .add_sample(4000 * units.rpm, 39 * units.deg)
        .add_sample(5000 * units.rpm, 39 * units.deg)
        .add_sample(6000 * units.rpm, 39 * units.deg)
        .add_sample(7000 * units.rpm, 39 * units.deg)

    engine.add_ignition_module(
        pontiac_iron_duke_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 1984 Pontiac Fiero Sport 2M4
public node pontiac_fiero_2m4_vehicle {
    alias output __out:
        vehicle(
            mass: 2458 * units.lb,
            drag_coefficient: 0.377,
            cross_sectional_area: 1.73 * (units.m) * (units.m),
            diff_ratio: 4.1,
            tire_radius: 307.5 * units.mm, // 215/60R14
            rolling_resistance: 2458 * units.lb * 9.81 * (215.0/275.0) * 0.01
        );
}

public node muncie_m19_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 250 * units.lb_ft
        )
        .add_gear(3.53)
        .add_gear(1.95)
        .add_gear(1.24)
        .add_gear(0.81);
}

public node main {
    set_engine(pontiac_iron_duke_techiv_lr8_engine())
    set_vehicle(pontiac_fiero_2m4_vehicle())
    set_transmission(muncie_m19_transmission())
}

main()