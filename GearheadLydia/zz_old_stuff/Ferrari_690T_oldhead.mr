import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node ferrari_690t_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7000 * units.rpm;
	input limiter_duration: 0.12;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 6.0) * cycle)
            .connect_wire(wires.wire6, (0.75 / 6.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 6.0) * cycle)
            .connect_wire(wires.wire4, (2.75 / 6.0) * cycle)
            .connect_wire(wires.wire2, (4.0 / 6.0) * cycle)
            .connect_wire(wires.wire5, (4.75 / 6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node ferrari_690t_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 230 * units.deg,
            gamma: 1.5,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node ferrari_690t_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 230 * units.deg,
            gamma: 1.5,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node ferrari_690t_camshaft_builder {
    input in_lobe_profile: ferrari_690t_lobe_profile_int();
	input ex_lobe_profile: ferrari_690t_lobe_profile_exh();
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: 110.0 * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance_in: 0.0 * units.deg;
    input advance_ex: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance_in,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: in_lobe_profile, advance: advance_in)
    camshaft _exhaust_cam_0(params, lobe_profile: ex_lobe_profile, advance: advance_ex)

    camshaft _intake_cam_1(params, lobe_profile: in_lobe_profile, advance: advance_in)
    camshaft _exhaust_cam_1(params, lobe_profile: ex_lobe_profile, advance: advance_ex)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + (1 * rot120) - rot30)
		.add_lobe(rot360 + intake_lobe_center + (5 * rot120) - rot30)
		.add_lobe(rot360 + intake_lobe_center + (3 * rot120) - rot30)

	_exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + (1 * rot120) - rot30)
		.add_lobe(rot360 - exhaust_lobe_center + (5 * rot120) - rot30)
		.add_lobe(rot360 - exhaust_lobe_center + (3 * rot120) - rot30)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + (0 * rot120))
		.add_lobe(rot360 + intake_lobe_center + (4 * rot120))
		.add_lobe(rot360 + intake_lobe_center + (2 * rot120))

	_exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + (0 * rot120))
		.add_lobe(rot360 - exhaust_lobe_center + (4 * rot120))
		.add_lobe(rot360 - exhaust_lobe_center + (2 * rot120))
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node ferrari_690t_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 51.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.1;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 40.0 * units.cc,
        intake_runner_cross_section_area: 20 * units.cm2,
        exhaust_runner_volume: 40.0 * units.cc,
        exhaust_runner_cross_section_area: 20 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node F690T {
    alias output __out: engine;

    wires wires()

    label bore(86.5 * units.mm)
    label stroke(82.0 * units.mm)
    label rod_length(152.5 * units.mm)
    label rod_mass(350 * units.g) // guesstimate based on aftermarket chromoly rods - stock rods are titanium
	label piston_mass(400 * units.g)
    label compression_height(1.184 * units.inch)
	label piston_dome(0.0 * units.cc)
	label deck_clearance(1.5 * units.mm)
    label crank_mass(45 * units.lb)
    label flywheel_mass(25 * units.lb)
    label flywheel_radius(5 * units.inch)

    engine engine(
        name: "Alfa Romeo 690T (firing only)",
        starter_torque: 300 * units.lb_ft,
		starter_speed: 600 * units.rpm,
        redline: 6500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 6.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85),
        throttle_gamma: 2.0
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 150.0 * units.deg
    )

    rod_journal rj0(angle: 0 * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(800.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(500.0),
        runner_length: 4.5 * units.inch,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_paramsS(
        outlet_flow_rate: k_carb(650.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        volume: 80.0 * units.L
    )

    exhaust_system_parameters es_paramsL(
        outlet_flow_rate: k_carb(650.0),
        primary_tube_length: 24.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        volume: 80.0 * units.L
    )

    exhaust_system exhaust0(es_paramsS, audio_volume: 0.2 * 0.01, impulse_response: impulse_response(filename: "../../sound-library/smooth/smooth_42.wav", volume: 0.01))
    exhaust_system exhaust1(es_paramsS, audio_volume: 1.0 * 0.01, impulse_response: impulse_response(filename: "../../sound-library/smooth/smooth_42.wav", volume: 0.01))

    exhaust_system exhaust2(es_paramsL, audio_volume: 0.1 * 0.01, impulse_response: impulse_response(filename: "../../sound-library/smooth/smooth_42.wav", volume: 0.01))
    exhaust_system exhaust3(es_paramsL, audio_volume: 0.5 * 0.01, impulse_response: impulse_response(filename: "../../sound-library/smooth/smooth_42.wav", volume: 0.01))

    cylinder_bank b1(bank_params, angle: 45.0 * units.deg) // L (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust2,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.5)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )

    cylinder_bank b0(bank_params, angle: -45.0 * units.deg) // R (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust3,
            ignition_wire: wires.wire5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.5)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    ferrari_690t_camshaft_builder camshaft()

    b0.set_cylinder_head (
        ferrari_690t_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: false
        )
    )
    b1.set_cylinder_head (
        ferrari_690t_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 30 * units.deg)
        .add_sample(1000 * units.rpm, 40 * units.deg)
        .add_sample(2000 * units.rpm, 45 * units.deg)
        .add_sample(3000 * units.rpm, 50 * units.deg)
        .add_sample(4000 * units.rpm, 55 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 65 * units.deg)
		.add_sample(7000 * units.rpm, 70 * units.deg)
		.add_sample(8000 * units.rpm, 75 * units.deg)
		.add_sample(9000 * units.rpm, 75 * units.deg)

    engine.add_ignition_module(
        ferrari_690t_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7000 * units.rpm
        )
    )
}

// 1999 Acura NSX Zanardi Edition
public node alfa_giulia_qv_vehicle {
    alias output __out:
        vehicle(
            mass: 1715 * units.kg,
            drag_coefficient: 0.32,
            cross_sectional_area: 24.693 * (units.foot * units.foot),
            diff_ratio: 3.09,
            tire_radius: 326.39 * units.mm, // P285/30R19
            rolling_resistance: 500 * units.N
        );
}

public node alfa_giulia_qv_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1200 * units.lb_ft
        )
        .add_gear(5.00)
        .add_gear(3.20)
        .add_gear(2.14)
        .add_gear(1.72)
        .add_gear(1.31)
        .add_gear(1.00)
        .add_gear(0.82)
        .add_gear(0.64);
}

public node main {
    set_engine(F690T())
    set_vehicle(alfa_giulia_qv_vehicle())
    set_transmission(alfa_giulia_qv_transmission())
}
