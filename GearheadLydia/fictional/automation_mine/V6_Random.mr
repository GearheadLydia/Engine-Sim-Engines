import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 123456

public node random_v6_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 9600 * units.rpm;
    input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 6.0) * cycle)
            .connect_wire(wires.wire2, (1.0 / 6.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 6.0) * cycle)
            .connect_wire(wires.wire4, (3.0 / 6.0) * cycle)
            .connect_wire(wires.wire5, (4.0 / 6.0) * cycle)
            .connect_wire(wires.wire6, (5.0 / 6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node random_v6_lobe_profile_int_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 180 * units.deg,
            gamma: 1.0,
            lift: 7.5 * units.mm,
            steps: 100
        );
}

public node random_v6_lobe_profile_exh_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 180 * units.deg,
            gamma: 1.0,
            lift: 7.5 * units.mm,
            steps: 100
        );
}

public node random_v6_lobe_profile_int_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 215 * units.deg,
            gamma: 1.0,
            lift: 11.5 * units.mm,
            steps: 100
        );
}

public node random_v6_lobe_profile_exh_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 215 * units.deg,
            gamma: 1.0,
            lift: 11.5 * units.mm,
            steps: 100
        );
}

public node random_v6_camshaft_builder {
    input in_lobe_profile_lo: random_v6_lobe_profile_int_lo();
    input ex_lobe_profile_lo: random_v6_lobe_profile_exh_lo();
    input in_lobe_profile_hi: random_v6_lobe_profile_int_hi();
    input ex_lobe_profile_hi: random_v6_lobe_profile_exh_hi();
    input intake_lobe_center_lo: 115.0 * units.deg;
    input exhaust_lobe_center_lo: 115.0 * units.deg;
    input intake_lobe_center_hi: 100.0 * units.deg;
    input exhaust_lobe_center_hi: 100.0 * units.deg;
    input advance_in_lo: 0.0 * units.deg;
    input advance_ex_lo: 0.0 * units.deg;
    input advance_in_hi: 0.0 * units.deg;
    input advance_ex_hi: 0.0 * units.deg;
    input base_radius: 13.5 * units.mm;

    output intake_cam_0_lo: _intake_cam_0_lo;
    output exhaust_cam_0_lo: _exhaust_cam_0_lo;
    output intake_cam_1_lo: _intake_cam_1_lo;
    output exhaust_cam_1_lo: _exhaust_cam_1_lo;

    output intake_cam_0_hi: _intake_cam_0_hi;
    output exhaust_cam_0_hi: _exhaust_cam_0_hi;
    output intake_cam_1_hi: _intake_cam_1_hi;
    output exhaust_cam_1_hi: _exhaust_cam_1_hi;

    camshaft_parameters params(base_radius: base_radius)

    camshaft _intake_cam_0_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in_lo)
    camshaft _exhaust_cam_0_lo(params, lobe_profile: ex_lobe_profile_lo, advance: advance_ex_lo)

    camshaft _intake_cam_1_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in_lo)
    camshaft _exhaust_cam_1_lo(params, lobe_profile: ex_lobe_profile_lo, advance: advance_ex_lo)

    camshaft _intake_cam_0_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in_hi)
    camshaft _exhaust_cam_0_hi(params, lobe_profile: ex_lobe_profile_hi, advance: advance_ex_hi)

    camshaft _intake_cam_1_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in_hi)
    camshaft _exhaust_cam_1_hi(params, lobe_profile: ex_lobe_profile_hi, advance: advance_ex_hi)


    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0_lo
        .add_lobe(rot360 + intake_lobe_center_lo + (0 * rot120))
        .add_lobe(rot360 + intake_lobe_center_lo + (2 * rot120))
        .add_lobe(rot360 + intake_lobe_center_lo + (4 * rot120))

    _exhaust_cam_0_lo
        .add_lobe(rot360 - exhaust_lobe_center_lo + (0 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_lo + (2 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_lo + (4 * rot120))

    _intake_cam_1_lo
        .add_lobe(rot360 + intake_lobe_center_lo + (1 * rot120))
        .add_lobe(rot360 + intake_lobe_center_lo + (3 * rot120))
        .add_lobe(rot360 + intake_lobe_center_lo + (5 * rot120))

    _exhaust_cam_1_lo
        .add_lobe(rot360 - exhaust_lobe_center_lo + (1 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_lo + (3 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_lo + (5 * rot120))

    _intake_cam_0_hi
        .add_lobe(rot360 + intake_lobe_center_hi + (0 * rot120))
        .add_lobe(rot360 + intake_lobe_center_hi + (2 * rot120))
        .add_lobe(rot360 + intake_lobe_center_hi + (4 * rot120))

    _exhaust_cam_0_hi
        .add_lobe(rot360 - exhaust_lobe_center_hi + (0 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_hi + (2 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_hi + (4 * rot120))

    _intake_cam_1_hi
        .add_lobe(rot360 + intake_lobe_center_hi + (1 * rot120))
        .add_lobe(rot360 + intake_lobe_center_hi + (3 * rot120))
        .add_lobe(rot360 + intake_lobe_center_hi + (5 * rot120))

    _exhaust_cam_1_hi
        .add_lobe(rot360 - exhaust_lobe_center_hi + (1 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_hi + (3 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center_hi + (5 * rot120))
}

public node random_v6_head {
    input cam_in_lo;
    input cam_ex_lo;
    input cam_in_hi;
    input cam_ex_hi;
    input chamber_volume: 46.0 * units.cc;
    input flip_display: false;
    
    input flow_intake: 350.0;
    input flow_exhaust: 300.0;
    input lift_max: 12.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 10.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 10.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

        
    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.75 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.75 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: vtec_valvetrain(
            vtec_intake_camshaft: cam_in_hi,
            vtec_exhaust_camshaft: cam_ex_hi,
            intake_camshaft: cam_in_lo,
            exhaust_camshaft: cam_ex_lo,
            min_rpm: 2800 * units.rpm
        ),
        flip_display: flip_display
    )
}


public node random_v6_engine {
    alias output __out: engine;

    wires wires()

    label vee_angle(60.0 * units.deg)

    engine engine(
        name: "Random V6",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1100 * units.rpm,
        redline: 9500 * units.rpm,
        throttle_gamma: 1.0
    )

    label bore(84.0 * units.mm)
    label bore_spacing(89.0 * units.mm)
    label stroke(84.0 * units.mm)
    label rod_length(140.0 * units.mm)
    label compression_height(20.0 * units.mm)
    label piston_dome(0.00 * units.cc)
    label chamber_volume(45.0 * units.cc)

    label crank_mass(70 * units.lb)
    label rod_mass(600 * units.g)
    label piston_mass(400 * units.g)
    label flywheel_mass(15 * units.lb)
    label flywheel_radius(6 * units.inch)

    label compression_ratio(11.0)
    label deck_clearance((((bore * bore / 4.0 * constants.pi * stroke)/(compression_ratio-1.0)) - chamber_volume + piston_dome) / (bore * bore / 4.0 * constants.pi))

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (90.0 * units.deg) + (vee_angle / 2.0)
    )

    rod_journal rj1(angle:   0.0 * units.deg)
    rod_journal rj2(angle: 120.0 * units.deg - vee_angle)
    rod_journal rj3(angle: 240.0 * units.deg)
    rod_journal rj4(angle:   0.0 * units.deg - vee_angle)
    rod_journal rj5(angle: 120.0 * units.deg)
    rod_journal rj6(angle: 240.0 * units.deg - vee_angle)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(650),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.997,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(250.0),
        runner_length: 5.5 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((4.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(600),
        primary_tube_length: 12.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2700 * units.mm,
        volume: 2700 * units.mm * circle_area(exhaust_radius) * 2
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.08, impulse_response: ir_lib.default_0)

    label pipe_length_1(0.6 * bore_spacing)
    label pipe_length_2(0.0 * bore_spacing)
    label pipe_length_3(0.3 * bore_spacing)
    
    label exhaust_stagger(20 * units.mm)

    cylinder_bank b0(bank_params, angle: vee_angle / 2.0) // L (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger
        )

    cylinder_bank b1(bank_params, angle: -vee_angle / 2.0) // R (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    random_v6_camshaft_builder camshaft()

    b0.set_cylinder_head (
        random_v6_head(
            cam_in_lo: camshaft.intake_cam_0_lo,
            cam_in_hi: camshaft.intake_cam_0_hi,
            cam_ex_lo: camshaft.exhaust_cam_0_lo,
            cam_ex_hi: camshaft.exhaust_cam_0_hi,
            chamber_volume: chamber_volume,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        random_v6_head(
            cam_in_lo: camshaft.intake_cam_1_lo,
            cam_in_hi: camshaft.intake_cam_1_hi,
            cam_ex_lo: camshaft.exhaust_cam_1_lo,
            cam_ex_hi: camshaft.exhaust_cam_1_hi,
            chamber_volume: chamber_volume,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 45 * units.deg)
        .add_sample(1000 * units.rpm, 65 * units.deg)
        .add_sample(2000 * units.rpm, 70 * units.deg)
        .add_sample(3000 * units.rpm, 70 * units.deg)
        .add_sample(4000 * units.rpm, 70 * units.deg)
        .add_sample(5000 * units.rpm, 70 * units.deg)
        .add_sample(6000 * units.rpm, 70 * units.deg)
        .add_sample(7000 * units.rpm, 70 * units.deg)
        .add_sample(8000 * units.rpm, 70 * units.deg)
        .add_sample(9000 * units.rpm, 70 * units.deg)

    engine.add_ignition_module(
        random_v6_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

public node mythos_athame_vehicle {
    alias output __out:
        vehicle(
            mass: 1460 * units.kg,
            drag_coefficient: 0.29,
            cross_sectional_area: 2.08 * (units.m * units.m),
            diff_ratio: 3.3,
            tire_radius: 326.5 * units.mm, // 285/30ZR19
            rolling_resistance: 1460 * units.kg * 9.81 * (285.0/275.0) * 0.01
        );
}

public node mythos_athame_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 800 * units.lb_ft
        )
        .add_gear(3.500)
        .add_gear(2.360)
        .add_gear(1.685)
        .add_gear(1.312)
        .add_gear(1.000)
        .add_gear(0.793);
}

public node main {
    set_engine(random_v6_engine())
    set_vehicle(mythos_athame_vehicle())
    set_transmission(mythos_athame_transmission())
}

main()