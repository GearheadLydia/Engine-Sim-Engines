import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 15426378
// in standard:  21843657

public node jaguar_aj133_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6600 * units.rpm;
    input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

// http://jagrepair.com/images/Training%20Guides/NP10%20Complete%20Manual%204-15-09.pdf
// "The CPS system controls the lifting height of the intake valves. At engine speeds from idle up to the range of 2,800 –
// 4,825 rpm (load dependent), the intake valves have a lifting height of 5.5mm. At speeds and loads outside of this
// range, the high lift cam (10.53mm) is used.
// Lifting Height Valve Opens Valve Closes
// Intake – 5.5 mm lifting height 27° BTDC to 35° ATDC 187° ATDC to 249° ATDC
// Intake – 10.53 mm lifting height 37° BTDC to 25° ATDC 213° ATDC to 275° ATDC
// Exhaust – 9.36 mm lifting height 244° BTDC or 194° BTDC 6° ATDC to 56° ATDC

public node jaguar_aj133_lobe_profile_int_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 224 * units.deg,
            gamma: 1.0,
            lift: 5.5 * units.mm,
            steps: 100
        );
}

public node jaguar_aj133_lobe_profile_int_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 238 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node jaguar_aj133_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 250 * units.deg,
            gamma: 1.0,
            lift: 9.36 * units.mm,
            steps: 100
        );
}

public node jaguar_aj133_camshaft_builder {
    input in_lobe_profile_lo: jaguar_aj133_lobe_profile_int_lo();
    input in_lobe_profile_hi: jaguar_aj133_lobe_profile_int_hi();
    input ex_lobe_profile: jaguar_aj133_lobe_profile_exh();
    input intake_lobe_profile_lo: in_lobe_profile_lo;
    input intake_lobe_profile_hi: in_lobe_profile_hi;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center_lo: 107.0 * units.deg; // mean of range: 106.0; +/- 31 deg
    input intake_lobe_center_hi: 110.0 * units.deg; // mean of range: 125.0; +/- 31 deg
    input exhaust_lobe_center: 109.0 * units.deg;    // mean of range:  94.0; +/- 31 deg
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L_lo: _intake_cam_L_lo;
    output intake_cam_R_lo: _intake_cam_R_lo;
    output intake_cam_L_hi: _intake_cam_L_hi;
    output intake_cam_R_hi: _intake_cam_R_hi;
    output exhaust_cam_L: _exhaust_cam_L;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L_lo(params, lobe_profile: intake_lobe_profile_lo)
    camshaft _intake_cam_R_lo(params, lobe_profile: intake_lobe_profile_lo)
    camshaft _intake_cam_L_hi(params, lobe_profile: intake_lobe_profile_hi)
    camshaft _intake_cam_R_hi(params, lobe_profile: intake_lobe_profile_hi)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)

    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot360(360 * units.deg)

    // firing order: 15426378
    _intake_cam_L_lo
        .add_lobe(rot360 + intake_lobe_center_lo + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center_lo + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center_lo + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center_lo + 2 * rot90)

    _intake_cam_R_lo
        .add_lobe(rot360 + intake_lobe_center_lo + 1 * rot90)
        .add_lobe(rot360 + intake_lobe_center_lo + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center_lo + 6 * rot90)
        .add_lobe(rot360 + intake_lobe_center_lo + 7 * rot90)

    _intake_cam_L_hi
        .add_lobe(rot360 + intake_lobe_center_hi + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center_hi + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center_hi + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center_hi + 2 * rot90)

    _intake_cam_R_hi
        .add_lobe(rot360 + intake_lobe_center_hi + 1 * rot90)
        .add_lobe(rot360 + intake_lobe_center_hi + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center_hi + 6 * rot90)
        .add_lobe(rot360 + intake_lobe_center_hi + 7 * rot90)

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
}

public node jaguar_aj133_head {
    input cam_in_lo;
    input cam_in_hi;
    input cam_ex;
    input chamber_volume: 43.1 * units.cc; // totally wild guess: same as AM14/AJ34???
    input flip_display: false;
    
    // guesses
    input flow_intake: 270.0;
    input flow_exhaust: 220.0;
    input lift_max: 9.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 10.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 10.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.1 * lift_max, k_28inH2O(0.16 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.3 * lift_max, k_28inH2O(0.48 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.5 * lift_max, k_28inH2O(0.74 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.7 * lift_max, k_28inH2O(0.90 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(0.9 * lift_max, k_28inH2O(0.98 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.1 * lift_max, k_28inH2O(1.01 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.1 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.1 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: vtec_valvetrain(
            vtec_intake_camshaft: cam_in_hi,
            vtec_exhaust_camshaft: cam_ex,
            intake_camshaft: cam_in_lo,
            exhaust_camshaft: cam_ex,
            min_rpm: 2800 * units.rpm // 2800-4400
        ),
        flip_display: flip_display
    )
}

public node jaguar_aj133_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Jaguar AJ133",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 6500 * units.rpm,
        throttle_gamma: 1.0
    )

    label bore(92.5 * units.mm)
    label bore_spacing(98.0 * units.mm)
    label stroke(93.0 * units.mm)
    label rod_length(154 * units.mm)
    label rod_mass(600 * units.g) // guess
    label piston_mass(400 * units.g) // guess
    label compression_height(28.1 * units.mm)
    label piston_dome(0.5 * units.cc) // for 11.5:1 CR
    label deck_height((230.55 + 0.6) * units.mm) // deck height is a guess; gasket should be right
    label crank_mass(41 * units.lb)
    label flywheel_mass(15 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // +45 degrees
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle: 270 * units.deg)
    rod_journal rj3(angle:  90 * units.deg)
    rod_journal rj4(angle: 180 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)

    // piston specs are guesses
    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )
    
    label exhaust_radius((3.5 * units.inch)/2)

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(600.0),
        idle_flow_rate: k_carb(0.01),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(200.0),
        runner_length: 8.5 * units.inch,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(550.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2400 * units.mm,
        volume: (400 * units.mm * circle_area(exhaust_radius)) + (2000 * units.mm * circle_area(exhaust_radius) * 2)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.1, impulse_response: ir_lib.default_0)

    label pipe_length_1(2.4 * bore_spacing)
    label pipe_length_2(1.6 * bore_spacing)
    label pipe_length_3(0.8 * bore_spacing)
    label pipe_length_4(0.0 * bore_spacing)
    
    label exhaust_stagger(0.4 * bore_spacing)

    cylinder_bank bL(bank_params, angle: 45.0 * units.deg) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + exhaust_stagger
        )

    cylinder_bank bR(bank_params, angle: -45 * units.deg) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1,
            sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2,
            sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3,
            sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4,
            sound_attenuation: 0.8
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    jaguar_aj133_camshaft_builder camshaft(
        in_lobe_profile_lo: jaguar_aj133_lobe_profile_int_lo(),
        in_lobe_profile_hi: jaguar_aj133_lobe_profile_int_hi(),
        ex_lobe_profile: jaguar_aj133_lobe_profile_exh()
    )

    bL.set_cylinder_head (
        jaguar_aj133_head(
            cam_in_lo: camshaft.intake_cam_L_lo,
            cam_in_hi: camshaft.intake_cam_L_hi,
            cam_ex: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )
    bR.set_cylinder_head (
        jaguar_aj133_head(
            cam_in_lo: camshaft.intake_cam_R_lo,
            cam_in_hi: camshaft.intake_cam_R_hi,
            cam_ex: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 68 * units.deg)
        .add_sample(1000 * units.rpm, 78 * units.deg)
        .add_sample(2000 * units.rpm, 78 * units.deg)
        .add_sample(3000 * units.rpm, 78 * units.deg)
        .add_sample(4000 * units.rpm, 78 * units.deg)
        .add_sample(5000 * units.rpm, 78 * units.deg)
        .add_sample(6000 * units.rpm, 78 * units.deg)
        .add_sample(7000 * units.rpm, 78 * units.deg)

    engine.add_ignition_module(
        jaguar_aj133_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2010 Jaguar XK 5.0 (X150)
public node jaguar_xk_50_x150_vehicle {
    alias output __out:
        vehicle(
            mass: 1660 * units.kg,
            drag_coefficient: 0.33,
            cross_sectional_area: 2.08 * (units.m * units.m),
            diff_ratio: 3.31,
            tire_radius: 339 * units.mm, // 275/40ZR18
            rolling_resistance: 1660 * units.kg * 9.81 * (275.0/275.0) * 0.01
        );
}

public node zf_6hp26_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 600 * units.lb_ft
        )
        .add_gear(4.171)
        .add_gear(2.340)
        .add_gear(1.521)
        .add_gear(1.143)
        .add_gear(0.867)
        .add_gear(0.691);
}

public node main {
    set_engine(jaguar_aj133_engine())
    set_vehicle(jaguar_xk_50_x150_vehicle())
    set_transmission(zf_6hp26_transmission())
}

main()