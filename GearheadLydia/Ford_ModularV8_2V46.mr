import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 13726548
// in standard:  26543187

public node ford_modular_2v46_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6200 * units.rpm;
	input limiter_duration: 0.1;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

// 2V specs:
// https://www.ford-trucks.com/forums/621045-stock-cam-specs.html
// Non-PI:
// Intake .462" lift/201 @.050"
// Exhaust .462" lift/208 @.050"
// 114 intake C/L
// 113 exhaust C/L
// PI:
// Intake .507" lift/200 @.050"
// Exhaust .534" lift/210 @.050"
// 114 intake C/L
// 115 exhaust C/L

public node ford_modular_2v46_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 200 * units.deg,
            gamma: 1.0,
            lift: 12.88 * units.mm,
            steps: 100
        );
}

public node ford_modular_2v46_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 210 * units.deg,
            gamma: 1.0,
            lift: 13.56 * units.mm,
            steps: 100
        );
}

public node ford_modular_2v46_camshaft_builder {
    input in_lobe_profile: ford_modular_2v46_lobe_profile_int();
	input ex_lobe_profile: ford_modular_2v46_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 114.5 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: -0.5 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node ford_modular_2v46_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 42.45 * units.cc;
    input flip_display: false;
	
	input flow_attenuation_in: 0.7;
	input flow_attenuation_ex: 0.7;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(1.15 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation_in)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation_in)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation_in)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation_in)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.15 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation_ex)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation_ex)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation_ex)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation_ex)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.1 * units.inch) * 5 * units.inch,
        intake_runner_cross_section_area: circle_area(1.1 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 12 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node Mod2V46 {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Ford Modular 2V",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 900 * units.rpm,
        redline: 6000 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85),
        throttle_gamma: 2.0
		//jitter: 0.3,
		//hf_gain: 0.005
    )

	// https://fordauthority.com/fmc/ford-motor-company-engines/ford-modular-family/ford-4-6l-engine/
    label bore(90.22 * units.mm)
	label bore_spacing(100.0 * units.mm)
    label stroke(90.0 * units.mm)
    label rod_length(150.7 * units.mm)
    label rod_mass(618 * units.g) // 4v number?
    label compression_height(31.00 * units.mm)
	label piston_mass(361 * units.g) // 4v number?
	label piston_dome(-18.1 * units.cc)
	label deck_height((227.0 + 0.2) * units.mm)
    label crank_mass(54.3 * units.lb)
    label flywheel_mass(29 * 2 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // -45 degrees
    )

    rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: -90.0 * units.deg)
    rod_journal rj2(angle: 90.0 * units.deg)
    rod_journal rj3(angle: 180.0 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(450),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.994,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(400.0),
        runner_length: 4.5 * units.inch,
        velocity_decay: 0.1
    )

	label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params_L(
        outlet_flow_rate: k_carb(250.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(400.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius),
		length: 600 * units.mm,
		volume: 600 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system_parameters es_params_R(
        outlet_flow_rate: k_carb(250.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(400.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius),
		length: 650 * units.mm,
		volume: 650 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaustL(es_params_L, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
    exhaust_system exhaustR(es_params_R, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)

	label pipe_length_1(2.7 * bore_spacing)
	label pipe_length_2(1.8 * bore_spacing)
	label pipe_length_3(0.9 * bore_spacing)
	label pipe_length_4(0.0 * bore_spacing)

    cylinder_bank b0(bank_params, angle: 45.0 * units.deg) // L (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_1,
			sound_attenuation: 0.7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_2,
			sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_3,
			sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_4,
			sound_attenuation: 1.0
        )

    cylinder_bank b1(bank_params, angle: -45.0 * units.deg) // R (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_1,
			sound_attenuation: 0.7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_2,
			sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_3,
			sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_4,
			sound_attenuation: 1.0
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    ford_modular_2v46_camshaft_builder camshaft(
	    in_lobe_profile: ford_modular_2v46_lobe_profile_int(),
		ex_lobe_profile: ford_modular_2v46_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        ford_modular_2v46_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flip_display: true
        )
    )
    b1.set_cylinder_head (
        ford_modular_2v46_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 15 * units.deg)
        .add_sample(1000 * units.rpm, 21 * units.deg)
        .add_sample(2000 * units.rpm, 24 * units.deg)
        .add_sample(3000 * units.rpm, 26 * units.deg)
        .add_sample(4000 * units.rpm, 29 * units.deg)
        .add_sample(5000 * units.rpm, 32 * units.deg)
        .add_sample(6000 * units.rpm, 35 * units.deg)
		.add_sample(7000 * units.rpm, 35 * units.deg)
		.add_sample(8000 * units.rpm, 35 * units.deg)
		.add_sample(9000 * units.rpm, 35 * units.deg)

    engine.add_ignition_module(
        ford_modular_2v46_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 6200 * units.rpm
        )
    )
}

// 2004 Ford Mustang GT (SN95)
public node ford_mustang_gt_sn95_vehicle {
    alias output __out:
        vehicle(
            mass: 3433 * units.lb,
            drag_coefficient: 0.35,
            cross_sectional_area: 2.08 * (units.m * units.m),
            diff_ratio: 3.27,
            tire_radius: 326.5 * units.mm, // 245/45R17
            rolling_resistance: 500 * units.N
        );
}

public node tremec_tr3650_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 600 * units.lb_ft
        )
        .add_gear(3.38)
        .add_gear(2.00)
        .add_gear(1.32)
        .add_gear(1.00)
        .add_gear(0.67);
}

public node main {
    set_engine(Mod2V46())
    set_vehicle(ford_mustang_gt_sn95_vehicle())
    set_transmission(tremec_tr3650_transmission())
}
