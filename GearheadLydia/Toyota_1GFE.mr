import "engine_sim.mr"

// SUPER UNFINISHED

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node toyota_1g_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7250 * units.rpm;
	input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
			.connect_wire(wires.wire3, (2.0/6.0) * cycle)
			.connect_wire(wires.wire6, (3.0/6.0) * cycle)
			.connect_wire(wires.wire2, (4.0/6.0) * cycle)
			.connect_wire(wires.wire4, (5.0/6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node toyota_1g_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 0.7,
            lift: 8.58 * units.mm,
            steps: 100
        );
}

public node toyota_1g_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 236 * units.deg,
            gamma: 0.7,
            lift: 8.28 * units.mm,
            steps: 100
        );
}

public node toyota_1g_camshaft_builder {
    input lobe_profile: toyota_1g_lobe_profile_int();
	input ex_lobe_profile: toyota_1g_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 115.0 * units.deg;
    input intake_lobe_center: 115.0 * units.deg;
    input exhaust_lobe_center: 121.0 * units.deg;
    input advance: 2.0 * units.deg;
    input base_radius: 16.0 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 3 * rot120)

	_exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node toyota_1g_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 65.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 65 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 155 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 255 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 75 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 105 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 164 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 168 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 176 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 30.0 * units.cc,
        intake_runner_cross_section_area: 2 * 12.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node toyota_1gfe {
    alias output __out: engine;

    engine engine(
        name: "Toyota 1G-FE",
        starter_torque: 100 * units.lb_ft,
        starter_speed: 600 * units.rpm,
        redline: 7000 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85
        ),
        throttle_gamma: 2.0
    )
	
	label lean_angle(0 * units.deg)

    label bore(75.0 * units.mm)
    label stroke(75.0 * units.mm)
    label rod_length(153.0 * units.mm) // wrong
    label rod_mass(300 * units.g)
	label piston_mass(280 * units.g)
    label compression_height(34.0 * units.mm) // wrong probably
	label piston_dome(0.0 * units.cc)
	label deck_height((219.0 + 1.0) * units.mm) // wrong
    label crank_mass(5 * units.kg)
    label flywheel_mass(25 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg + lean_angle
    )

    rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: 120*units.deg)
    rod_journal rj2(angle: 240*units.deg)
    rod_journal rj3(angle: 240*units.deg)
    rod_journal rj4(angle: 120*units.deg)
    rod_journal rj5(angle: 0*units.deg)
	
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    performer_rpm_intake intake(
        carburetor_cfm: 700.0,
        idle_flow_rate_cfm: 0.1,
        idle_throttle_plate_position: 0.994
    )
	
	label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(500.0),
        primary_tube_length: 25.0 * units.inch,
        primary_flow_rate: k_carb(350.0),
        velocity_decay: 0.4, //0.5
		collector_cross_section_area: circle_area(exhaust_radius),
		length: 500 * units.mm,
		volume: 500 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
	
	label exhaust_stagger(1.8 * units.inch)
	
    cylinder_bank b0(bank_params, angle: 0 * units.deg + lean_angle)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: 4.5 * units.inch + exhaust_stagger
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: 2.5 * units.inch + exhaust_stagger,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: 1 * units.inch + exhaust_stagger
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: 3.5 * units.inch,
			sound_attenuation: 0.7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: 2 * units.inch
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: 0 * units.inch,
			sound_attenuation: 0.7
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    toyota_1g_camshaft_builder camshaft(
	    lobe_profile: toyota_1g_lobe_profile_int(),
		ex_lobe_profile: toyota_1g_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        toyota_1g_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 15 * units.deg)
        .add_sample(1000 * units.rpm, 20 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 35 * units.deg)
        .add_sample(4000 * units.rpm, 40 * units.deg)
        .add_sample(5000 * units.rpm, 45 * units.deg)
        .add_sample(6000 * units.rpm, 50 * units.deg)
        .add_sample(7000 * units.rpm, 50 * units.deg)
        .add_sample(8000 * units.rpm, 50 * units.deg)
        .add_sample(9000 * units.rpm, 50 * units.deg)

    engine.add_ignition_module(
        toyota_1g_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7250 * units.rpm
        ))
}

// 2002 Toyota Altezza AS200 (GXE10)
public node toyota_altezza_gxe10_vehicle {
    alias output __out:
        vehicle(
            mass: 1570 * units.kg,
            drag_coefficient: 0.26,
            cross_sectional_area: 2.03 * (units.m * units.m),
            diff_ratio: 3.909,
            tire_radius: 312.5 * units.mm, // 215/45R17
            rolling_resistance: 460 * units.N
        );
}

public node toyota_j160_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(3.874)
        .add_gear(2.175)
        .add_gear(1.484)
        .add_gear(1.223)
        .add_gear(1.000)
        .add_gear(0.869);
}

public node main {
	set_engine(toyota_1gfe())
    set_vehicle(toyota_altezza_gxe10_vehicle())
    set_transmission(toyota_j160_transmission())
}

