import "engine_sim.mr"

// almost all specs are guesses

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

//firing order: 1 12 5 8 3 10 6 7 2 11 4 9

public node tvr_speed_twelve_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7700 * units.rpm;
	input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, (0.0/12.0) * cycle)
            .connect_wire(wires.wire12, (1.0/12.0) * cycle)
			.connect_wire(wires.wire05, (2.0/12.0) * cycle)
            .connect_wire(wires.wire08, (3.0/12.0) * cycle)
            .connect_wire(wires.wire03, (4.0/12.0) * cycle)
			.connect_wire(wires.wire10, (5.0/12.0) * cycle)
            .connect_wire(wires.wire06, (6.0/12.0) * cycle)
            .connect_wire(wires.wire07, (7.0/12.0) * cycle)
			.connect_wire(wires.wire02, (8.0/12.0) * cycle)
            .connect_wire(wires.wire11, (9.0/12.0) * cycle)
            .connect_wire(wires.wire04, (10.0/12.0) * cycle)
			.connect_wire(wires.wire09, (11.0/12.0) * cycle);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

// https://www.pistonheads.com/gassing/topic.asp?h=0&f=152&t=1210549
public node tvr_speed_twelve_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 268 * units.deg,
            gamma: 1.0,
            lift: 10.16 * units.mm,
            steps: 100
        );
}

public node tvr_speed_twelve_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 268 * units.deg,
            gamma: 1.0,
            lift: 10.16 * units.mm,
            steps: 100
        );
}

public node tvr_speed_twelve_camshaft_builder {
    input lobe_profile: tvr_speed_twelve_lobe_profile_int();
	input ex_lobe_profile: tvr_speed_twelve_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 106.0 * units.deg;
    input intake_lobe_center: 113.5 * units.deg;
    input exhaust_lobe_center: 107.5 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 16.0 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

	//firing order: 1 12 5 8 3 10 6 7 2 11 4 9
	
    _intake_cam_0
		.add_lobe(rot360 + intake_lobe_center + 0 * rot60) // #1
		.add_lobe(rot360 + intake_lobe_center + 8 * rot60) // #2
		.add_lobe(rot360 + intake_lobe_center + 4 * rot60) // #3
		.add_lobe(rot360 + intake_lobe_center + 10 * rot60) // #4
		.add_lobe(rot360 + intake_lobe_center + 2 * rot60) // #5
        .add_lobe(rot360 + intake_lobe_center + 6 * rot60) // #6

    _intake_cam_1
		.add_lobe(rot360 + intake_lobe_center + 7 * rot60) // #7
		.add_lobe(rot360 + intake_lobe_center + 3 * rot60) // #8
		.add_lobe(rot360 + intake_lobe_center + 11 * rot60) // #9
		.add_lobe(rot360 + intake_lobe_center + 5 * rot60) // #10
		.add_lobe(rot360 + intake_lobe_center + 9 * rot60) // #11
        .add_lobe(rot360 + intake_lobe_center + 1 * rot60) // #12

	_exhaust_cam_0
		.add_lobe(rot360 - exhaust_lobe_center + 0 * rot60) // #1
		.add_lobe(rot360 - exhaust_lobe_center + 8 * rot60) // #2
		.add_lobe(rot360 - exhaust_lobe_center + 4 * rot60) // #3
		.add_lobe(rot360 - exhaust_lobe_center + 10 * rot60) // $4
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot60) // #5
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot60) // #6

	_exhaust_cam_1
		.add_lobe(rot360 - exhaust_lobe_center + 7 * rot60) // #7
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot60) // #8
		.add_lobe(rot360 - exhaust_lobe_center + 11 * rot60) // #9
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot60) // #10
        .add_lobe(rot360 - exhaust_lobe_center + 9 * rot60) // #11
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot60) // #12
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node tvr_speed_twelve_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 44.0 * units.cc; // unknown; guess (makes compression ratio come out right)
    input flip_display: false;
	
	input flow_attenuation_in: 1.0;
	input flow_attenuation_ex: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  60 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale,  90 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(13 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(14 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  55 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale,  85 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(13 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(14 * lift_scale, 280 * flow_attenuation_ex)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.0 * units.inch) * 9 * units.inch,
        intake_runner_cross_section_area: circle_area(1.0 * units.inch),
        exhaust_runner_volume: circle_area(0.75 * units.inch) * 6 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.75 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node tvr_speed_twelve_itb {
    input throttlebody_cfm: 250;
    input idle_flow_rate_cfm: 0.001;
    input idle_throttle_plate_position: 0.9991;
    input throttle_gamma: 12.0;

    alias output __out: intake;

    intake intake(
        plenum_volume: (circle_area(1.5 * units.inch) * 12 * units.inch) / 6,
        plenum_cross_section_area: circle_area(1.5 * units.inch),
        intake_flow_rate: k_carb(throttlebody_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        throttle_gamma: throttle_gamma,
        runner_flow_rate: k_carb(475.0),
        runner_length: 4 * units.inch,
        velocity_decay: 0.1
    )
}

// http://www.rndengineering.co.uk/downloads/SPEED6%20SPREADS.pdf
public node tvr_speed_twelve_engine {
    alias output __out: engine;

    engine engine(
        name: "TVR Speed Twelve",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1800 * units.rpm,
        redline: 7500 * units.rpm,
        throttle_gamma: 1.0,
		simulation_frequency: 6000,
		hf_gain: 0.05,
		jitter: 0.6
    )

    label bore(96.0 * units.mm)
    label stroke(89.0 * units.mm)
    label rod_length(144.5 * units.mm)
    label rod_mass(450 * units.g)
	label piston_mass(347 * units.g)
    label compression_height(32.0 * units.mm) // just makes up stroke difference
	label deck_height((220.0 + 1.5) * units.mm) // deck height estimated from a drawing and the known stroke measurement
	label piston_dome(-8.0 * units.cc) // makes compression come out right
    label crank_mass(65 * units.lb)
    label flywheel_mass(8.5 * units.kg)
    label flywheel_radius(6.5 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg // +30 from vertical
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle:  0  * units.deg)
	
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    tvr_speed_twelve_itb itb01()
	tvr_speed_twelve_itb itb02()
	tvr_speed_twelve_itb itb03()
	tvr_speed_twelve_itb itb04()
	tvr_speed_twelve_itb itb05()
	tvr_speed_twelve_itb itb06()
    tvr_speed_twelve_itb itb07()
	tvr_speed_twelve_itb itb08()
	tvr_speed_twelve_itb itb09()
	tvr_speed_twelve_itb itb10()
	tvr_speed_twelve_itb itb11()
	tvr_speed_twelve_itb itb12()
	
	label exhaust_radius((4.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1600.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(450.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius),
		length: 2000 * units.mm,
		volume: (1800 * units.mm * circle_area(exhaust_radius)) + (200 * units.mm * circle_area(exhaust_radius) * 2)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.02, impulse_response: ir_lib.default_0)
	
	label pipe_length_1(70 * units.mm)
	label pipe_length_2(15 * units.mm)
	label pipe_length_3(30 * units.mm)
	label pipe_length_4(55 * units.mm)
	label pipe_length_5(0 * units.mm)
	label pipe_length_6(0 * units.mm)
	
	label exhaust_stagger(35 * units.mm)
		
    cylinder_bank b0(bank_params, angle: 30 * units.deg) // L (second)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire01,
            intake: itb01,
            exhaust_system: exhaust,
			primary_length: pipe_length_1,
			sound_attenuation: 0.6
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire02,
            intake: itb02,
            exhaust_system: exhaust,
			primary_length: pipe_length_2
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire03,
            intake: itb03,
            exhaust_system: exhaust,
			primary_length: pipe_length_3
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire04,
            intake: itb04,
            exhaust_system: exhaust,
			primary_length: pipe_length_4,
			sound_attenuation: 0.6
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire05,
            intake: itb05,
            exhaust_system: exhaust,
			primary_length: pipe_length_5
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire06,
            intake: itb06,
            exhaust_system: exhaust,
			primary_length: pipe_length_6
        )

    cylinder_bank b1(bank_params, angle: -30 * units.deg) // R (first)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire07,
            intake: itb07,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger,
			sound_attenuation: 0.6
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire08,
            intake: itb08,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire09,
            intake: itb09,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire10,
            intake: itb10,
            exhaust_system: exhaust,
			primary_length: pipe_length_4 + exhaust_stagger,
			sound_attenuation: 0.6
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire11,
            intake: itb11,
            exhaust_system: exhaust,
			primary_length: pipe_length_5 + exhaust_stagger
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire12,
            intake: itb12,
            exhaust_system: exhaust,
			primary_length: pipe_length_6 + exhaust_stagger
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    tvr_speed_twelve_camshaft_builder camshaft(
	    lobe_profile: tvr_speed_twelve_lobe_profile_int(),
		ex_lobe_profile: tvr_speed_twelve_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        tvr_speed_twelve_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        tvr_speed_twelve_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 30 * units.deg)
        .add_sample(1000 * units.rpm, 50 * units.deg)
        .add_sample(2000 * units.rpm, 55 * units.deg)
        .add_sample(3000 * units.rpm, 55 * units.deg)
        .add_sample(4000 * units.rpm, 54 * units.deg)
        .add_sample(5000 * units.rpm, 51 * units.deg)
        .add_sample(6000 * units.rpm, 48 * units.deg)
        .add_sample(7000 * units.rpm, 45 * units.deg)
        .add_sample(8000 * units.rpm, 45 * units.deg)

    engine.add_ignition_module(
        tvr_speed_twelve_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 1999 TVR Cerbera Speed Twelve
public node tvr_cerbera_speed_twelve_vehicle {
    alias output __out:
        vehicle(
            mass: 1000 * units.kg,
            drag_coefficient: 0.35, // guesstimate
            cross_sectional_area: 2.25 * (units.m * units.m), // guesstimate
            diff_ratio: 3.21,
            tire_radius: 345.5 * units.mm, // 335/35ZR18
            rolling_resistance: 600 * units.N
        );
}

// gear ratios guesstimated from Forza
public node tvr_cerbera_speed_twelve_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1600 * units.lb_ft
        )
        .add_gear(2.62)
        .add_gear(2.03)
        .add_gear(1.65)
        .add_gear(1.34)
        .add_gear(1.00)
        .add_gear(0.80);
}

public node main {
	set_engine(tvr_speed_twelve_engine())
    set_vehicle(tvr_cerbera_speed_twelve_vehicle())
    set_transmission(tvr_cerbera_speed_twelve_transmission())
}

main()