import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node ford_taunus_17_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 5750 * units.rpm;
	input limiter_duration: 0.11;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/4.0) * cycle)
            .connect_wire(wires.wire3, (1.0/4.0) * cycle)
			.connect_wire(wires.wire4, (2.0/4.0) * cycle)
			.connect_wire(wires.wire2, (3.0/4.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

// https://www.burtonpower.com/camshaft-2-9i-v6-standard-new-kcv6t35.html
public node ford_taunus_17_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 221 * units.deg, // 276 @ 16 thou
            gamma: 1.0,
            lift: 374 * units.thou, // with 1.47 rocker ratio
            steps: 100
        );
}

public node ford_taunus_17_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 222.5 * units.deg, // 278 @ 16 thou
            gamma: 1.0,
            lift: 372 * units.thou, // with 1.47 rocker ratio
            steps: 100
        );
}

public node ford_taunus_17_camshaft_builder {
    input in_lobe_profile: ford_taunus_17_lobe_profile_int();
	input ex_lobe_profile: ford_taunus_17_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 114.5 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.5 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + (0 * rot180))
		.add_lobe(rot360 + intake_lobe_center + (3 * rot180))

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + (1 * rot180))
		.add_lobe(rot360 + intake_lobe_center + (2 * rot180))

	_exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + (0 * rot180))
		.add_lobe(rot360 - exhaust_lobe_center + (3 * rot180))

	_exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + (1 * rot180))
		.add_lobe(rot360 - exhaust_lobe_center + (2 * rot180))
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node ford_taunus_17_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 42.0 * units.cc; // assumption; same as Cologne OHV
    input flip_display: false;
	
	input flow_attenuation: 0.8;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.0 * units.inch) * 4 * units.inch,
        intake_runner_cross_section_area: circle_area(1.0 * units.inch),
        exhaust_runner_volume: circle_area(0.6 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.6 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node ford_taunus_17 {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Ford Taunus V4",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 1200 * units.rpm,
        redline: 5500 * units.rpm,
        throttle_gamma: 1.0,
		hf_gain: 0.05,
		jitter: 0.5
    )

    label bore(90.0 * units.mm)
	label bore_spacing(120.9 * units.mm)
    label stroke(66.8 * units.mm)
    label rod_length(130.55 * units.mm)
    label rod_mass(587.0 * units.g)
	label piston_mass(400 * units.g)
    label compression_height(40.0 * units.mm)
	label deck_height((205.33 + 0.5) * units.mm) // head gasket is a guess
	label piston_dome(1.0 * units.cc) // guess - works out to 9.0 compression (don't know real compression ratio)
    label crank_mass(65 * units.lb)
    label flywheel_mass(40 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 120  * units.deg)
    rod_journal rj2(angle: 180  * units.deg)
    rod_journal rj3(angle: 300  * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

	intake intake (
		plenum_volume: 1.0 * units.L,
		plenum_cross_section_area: 50.0 * units.cm2,
		intake_flow_rate: k_carb(100.0),
		idle_flow_rate: k_carb(0.001),
		idle_throttle_plate_position: 0.990,
		throttle_gamma: 1.0,
		runner_flow_rate: k_carb(200.0),
		runner_length: 5.0 * units.inch,
		velocity_decay: 0.1
	)
	
	label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(100.0),
        primary_tube_length: 6.0 * units.inch,
        primary_flow_rate: k_carb(180.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius) * 2,
		length: 2000 * units.mm,
		volume: (1500 * units.mm * circle_area(exhaust_radius)) + (500 * units.mm * circle_area(exhaust_radius) * 2)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
	
	label pipe_length_1(1.1 * bore_spacing)
	label pipe_length_2(0.0 * bore_spacing)
	
	label exhaust_stagger(1.0 * units.inch)

    cylinder_bank b0(bank_params, angle: 30.0 * units.deg) // L (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger,
			sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger,
			sound_attenuation: 1.0
        )

    cylinder_bank b1(bank_params, angle: -30.0 * units.deg) // R (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_1,
			sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_2,
			sound_attenuation: 1.0
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    ford_taunus_17_camshaft_builder camshaft(
	    in_lobe_profile: ford_taunus_17_lobe_profile_int(),
		ex_lobe_profile: ford_taunus_17_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        ford_taunus_17_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        ford_taunus_17_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 70 * units.deg)
        .add_sample(1000 * units.rpm, 80 * units.deg)
        .add_sample(2000 * units.rpm, 80 * units.deg)
        .add_sample(3000 * units.rpm, 80 * units.deg)
        .add_sample(4000 * units.rpm, 80 * units.deg)
        .add_sample(5000 * units.rpm, 80 * units.deg)
        .add_sample(6000 * units.rpm, 80 * units.deg)

    engine.add_ignition_module(
        ford_taunus_17_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 1971 Saab 96 V4
public node saab_96_v4_vehicle {
    alias output __out:
        vehicle(
            mass: 920 * units.kg,
            drag_coefficient: 0.37,
            cross_sectional_area: 1.93 * (units.m * units.m),
            diff_ratio: 4.875,
            tire_radius: 315 * units.mm, // "155 - 15"
            rolling_resistance: 920 * units.kg * 9.81 * (155.0/275.0) * 0.01
        );
}

public node saab_96_v4_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 300 * units.lb_ft
        )
        .add_gear(3.479)
        .add_gear(2.088)
        .add_gear(1.296)
        .add_gear(0.838);
}

public node main {
    set_engine(ford_taunus_17())
    set_vehicle(saab_96_v4_vehicle())
    set_transmission(saab_96_v4_transmission())
}

main()