import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node bmw_m54b30_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6600 * units.rpm;
    input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
            .connect_wire(wires.wire3, (2.0/6.0) * cycle)
            .connect_wire(wires.wire6, (3.0/6.0) * cycle)
            .connect_wire(wires.wire2, (4.0/6.0) * cycle)
            .connect_wire(wires.wire4, (5.0/6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

// https://www.e46fanatics.com/threads/m54b25-stock-cam-specs-duration-lift-centerline.830717/

public node bmw_m54b30_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.0,
            lift: 9.7 * units.mm,
            steps: 100
        );
}

public node bmw_m54b30_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 244 * units.deg,
            gamma: 1.0,
            lift: 9.0 * units.mm,
            steps: 100
        );
}

public node bmw_m54b30_camshaft_builder {
    input in_lobe_profile: bmw_m54b30_lobe_profile_int();
    input ex_lobe_profile: bmw_m54b30_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 110.0 * units.deg; // guess; VANOS is in play
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 16.0 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot120)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node bmw_m54b30_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 34.0 * units.cc;
    input flip_display: false;
    
    alias output __out: head;

    // https://www.facebook.com/RHDengineering/posts/m50-vs-m54-head-flowblew-the-dust-off-the-flow-bench-today-and-ran-up-a-stock-m5/1499718123405103/
    // alternate source w different results: https://www.e46fanatics.com/threads/m54b30-specs-and-measurments.730757/
    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0,   0)
        .add_flow_sample( 1,  30)
        .add_flow_sample( 2,  60)
        .add_flow_sample( 3,  90)
        .add_flow_sample( 4, 120)
        .add_flow_sample( 5, 145)
        .add_flow_sample( 6, 167)
        .add_flow_sample( 7, 183)
        .add_flow_sample( 8, 203)
        .add_flow_sample( 9, 211)
        .add_flow_sample(10, 213)
        .add_flow_sample(11, 219)
        .add_flow_sample(12, 221)
        .add_flow_sample(13, 221)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0,   0)
        .add_flow_sample( 1,  30)
        .add_flow_sample( 2,  56)
        .add_flow_sample( 3,  86)
        .add_flow_sample( 4, 113)
        .add_flow_sample( 5, 135)
        .add_flow_sample( 6, 150)
        .add_flow_sample( 7, 158)
        .add_flow_sample( 8, 164)
        .add_flow_sample( 9, 167)
        .add_flow_sample(10, 167)
        .add_flow_sample(11, 169)
        .add_flow_sample(12, 171)
        .add_flow_sample(13, 170)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.2 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.2 * units.inch),
        exhaust_runner_volume: circle_area(0.6 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.6 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node bmw_m54b30_engine {
    alias output __out: engine;

    engine engine(
        name: "BMW M54B30",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1100 * units.rpm,
        redline: 6500 * units.rpm, // actual: 6500; 6800 for ZHP
        throttle_gamma: 1.0,
        // hf_gain: 0.005,
        // jitter: 0.6
        hf_gain: 0.2,
        jitter: 0.8
    )
    
    label lean_angle(30 * units.deg)

    label bore(84.0 * units.mm)
    label stroke(89.6 * units.mm)
    label rod_length(135.0 * units.mm)
    label rod_mass(602 * units.g)
    label piston_mass((313 + 108) * units.g)
    label compression_height(28.32 * units.mm)
    label deck_height((210.0 * units.mm) + (30 * units.thou))
    label piston_dome(-27.0 * units.cc)
    label crank_mass(28 * units.kg)
    label flywheel_mass(19 * units.kg)
    label flywheel_radius(120 * units.mm)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90.0 * units.deg + lean_angle
    )

    rod_journal rj1(angle:  0  * units.deg)
    rod_journal rj2(angle: 120 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 240 * units.deg)
    rod_journal rj5(angle: 120 * units.deg)
    rod_journal rj6(angle:  0  * units.deg)
    
    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(600.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9975,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(250.0),
        runner_length: 8.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(600.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2800 * units.mm,
        volume: 2800 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.001, impulse_response: ir_lib.default_0)
    
    label pipe_length_1(3.0 * units.inch)
    label pipe_length_2(0.0 * units.inch)
    label pipe_length_3(4.0 * units.inch)
    
    label exhaust_stagger(10 * units.inch)
 
    cylinder_bank b0(bank_params, angle: 0 * units.deg + lean_angle)
    b0
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    bmw_m54b30_camshaft_builder camshaft(
        in_lobe_profile: bmw_m54b30_lobe_profile_int(),
        ex_lobe_profile: bmw_m54b30_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        bmw_m54b30_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 45 * units.deg)
        .add_sample(1000 * units.rpm, 55 * units.deg)
        .add_sample(2000 * units.rpm, 60 * units.deg)
        .add_sample(3000 * units.rpm, 60 * units.deg)
        .add_sample(4000 * units.rpm, 60 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 60 * units.deg)
        .add_sample(7000 * units.rpm, 60 * units.deg)

    engine.add_ignition_module(
        bmw_m54b30_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 2002 BMW 330Ci (E46)
public node bmw_330ci_e46_vehicle {
    alias output __out:
        vehicle(
            mass: 1430 * units.kg,
            drag_coefficient: 0.32,
            cross_sectional_area: 2.0 * (units.m * units.m),
            diff_ratio: 2.93,
            tire_radius: 317.5 * units.mm, // 225/45R17W
            rolling_resistance: 1430 * units.kg * 9.81 * (225.0/275.0) * 0.01
        );
}

// for Z3M
public node zf_s5_31_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 600 * units.lb_ft
        )
        .add_gear(4.210)
        .add_gear(2.493)
        .add_gear(1.665)
        .add_gear(1.240)
        .add_gear(1.000);
}

public node main {
    set_engine(bmw_m54b30_engine())
    set_vehicle(bmw_330ci_e46_vehicle())
    set_transmission(zf_s5_31_transmission())
}

main()