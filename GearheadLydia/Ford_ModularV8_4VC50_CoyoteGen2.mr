import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 15486372
// in standard:  21873654

public node ford_modular_coyote_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7250 * units.rpm;
    input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node ford_modular_coyote_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 211 * units.deg, // adv.: 263
            gamma: 1.0,
            lift: 13.0 * units.mm,
            steps: 100
        );
}

public node ford_modular_coyote_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 211 * units.deg, // adv.: 263
            gamma: 1.0,
            lift: 13.0 * units.mm,
            steps: 100
        );
}

public node ford_modular_coyote_camshaft_builder {
    input in_lobe_profile: ford_modular_coyote_lobe_profile_int();
    input ex_lobe_profile: ford_modular_coyote_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 139.0 * units.deg;
    input exhaust_lobe_center: 123.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
}

public node ford_modular_coyote_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 57.0 * units.cc;
    input flip_display: false;
    
    alias output __out: head;
    
    // https://static.summitracing.com/global/images/instructions/sad-sa380_it.pdf
    // technically "JPC/RGR Stage 1" heads with "Stage 2" 100 thou numbers
	// can't find plausible truly stock numbers for this head
    function intake_flow(100 * units.thou)
    intake_flow
        .add_flow_sample(  0,   0)
        .add_flow_sample(100, 100)
        .add_flow_sample(200, 197)
        .add_flow_sample(300, 266)
        .add_flow_sample(400, 303)
        .add_flow_sample(500, 321)
        .add_flow_sample(600, 335)

    function exhaust_flow(100 * units.thou)
    exhaust_flow
        .add_flow_sample(  0,   0)
        .add_flow_sample(100,  87)
        .add_flow_sample(200, 158)
        .add_flow_sample(300, 201)
        .add_flow_sample(400, 213)
        .add_flow_sample(500, 224)
        .add_flow_sample(600, 232)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 5 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 5 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

// https://performanceparts.ford.com/download/instructionsheets/COYOTE_TECH_GUIDE_062819.PDF
public node ford_modular_coyote_gen2_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Ford Coyote (Gen2)",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 7000 * units.rpm,
        throttle_gamma: 1.0
        //jitter: 0.3,
        //hf_gain: 0.005
    )

    // https://performanceparts.ford.com/download/PDFS/Coyote%20Technical%20Reference2.pdf
    // https://www.corral.net/threads/what-is-the-weight-of-a-stock-5-0-rod-piston-and-pin.1298961/
    label bore(92.2 * units.mm)
    label stroke(92.7 * units.mm)
    label rod_length(150.7 * units.mm)
    label rod_mass(618 * units.g)
    label compression_height(29.82 * units.mm)
    label piston_mass((435+113) * units.g)
    label piston_dome(4.451 * units.cc)
    label deck_height((227.0 + 0.2) * units.mm)
    label crank_mass(54.3 * units.lb)
    label flywheel_mass(12 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // -45 degrees
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle: 270 * units.deg)
    rod_journal rj3(angle:  90 * units.deg)
    rod_journal rj4(angle: 180 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)


    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(500),
        idle_flow_rate: k_carb(0.0001),
        idle_throttle_plate_position: 0.994,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(280),
        runner_length: 6.5 * units.inch,
        velocity_decay: 0.1
    )

    label exhaust_radius((4.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(700),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(500),
        velocity_decay: 0.2, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2500 * units.mm,
        volume: 2500 * units.mm * circle_area(exhaust_radius) * 2
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.1, impulse_response: ir_lib.default_0)

    label pipe_length_1(5.0 * units.inch)
    label pipe_length_2(2.5 * units.inch)
    label pipe_length_3(1.0 * units.inch)
    label pipe_length_4(0.0 * units.inch)
    
    label exhaust_stagger(40 * units.mm)

    cylinder_bank bL(bank_params, angle: 45.0 * units.deg) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger,
            sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger,
            sound_attenuation: 0.95
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + exhaust_stagger
        )

    cylinder_bank bR(bank_params, angle: -45.0 * units.deg) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1,
            sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2,
            sound_attenuation: 0.95
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    ford_modular_coyote_camshaft_builder camshaft(
        in_lobe_profile: ford_modular_coyote_lobe_profile_int(),
        ex_lobe_profile: ford_modular_coyote_lobe_profile_exh()
    )

    bL.set_cylinder_head (
        ford_modular_coyote_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )
    bR.set_cylinder_head (
        ford_modular_coyote_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 35 * units.deg)
        .add_sample(1000 * units.rpm, 53 * units.deg)
        .add_sample(2000 * units.rpm, 55 * units.deg)
        .add_sample(3000 * units.rpm, 56 * units.deg)
        .add_sample(4000 * units.rpm, 55 * units.deg)
        .add_sample(5000 * units.rpm, 52 * units.deg)
        .add_sample(6000 * units.rpm, 49 * units.deg)
        .add_sample(7000 * units.rpm, 46 * units.deg)
        .add_sample(8000 * units.rpm, 46 * units.deg)

    engine.add_ignition_module(
        ford_modular_coyote_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2015 Ford Mustang GT Performance Package (S550)
public node ford_mustang_gt_s550_vehicle {
    alias output __out:
        vehicle(
            mass: 3706 * units.lb,
            drag_coefficient: 0.32,
            cross_sectional_area: 2.2 * (units.m * units.m),
            diff_ratio: 3.55, // might be 3.73 on these, not sure
            tire_radius: 351.79 * units.mm, // 275/40ZR19
            rolling_resistance: 3706 * units.lb * 9.81 * (275.0/275.0) * 0.01
        );
}

public node getrag_mt82_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 600 * units.lb_ft
        )
        .add_gear(3.657)
        .add_gear(2.430)
        .add_gear(1.686)
        .add_gear(1.315)
        .add_gear(1.000)
        .add_gear(0.651);
}

public node main {
    set_engine(ford_modular_coyote_gen2_engine())
    set_vehicle(ford_mustang_gt_s550_vehicle())
    set_transmission(getrag_mt82_transmission())
}

main()