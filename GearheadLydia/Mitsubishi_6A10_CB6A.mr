import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node mitsubishi_6a10_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7650 * units.rpm; // guess
    input limiter_duration: 0.1;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire2, (1.0/6.0) * cycle)
            .connect_wire(wires.wire3, (2.0/6.0) * cycle)
            .connect_wire(wires.wire4, (3.0/6.0) * cycle)
            .connect_wire(wires.wire5, (4.0/6.0) * cycle)
            .connect_wire(wires.wire6, (5.0/6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}


// cam profiles are totally made up

public node mitsubishi_6a10_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 210 * units.deg,
            gamma: 1.0,
            lift: 8.5 * units.mm,
            steps: 100
        );
}

public node mitsubishi_6a10_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 205 * units.deg,
            gamma: 1.0,
            lift: 8.5 * units.mm,
            steps: 100
        );
}

public node mitsubishi_6a10_camshaft_builder {
    input in_lobe_profile: mitsubishi_6a10_lobe_profile_int();
    input ex_lobe_profile: mitsubishi_6a10_lobe_profile_exh();
    input intake_lobe_center: 110.0 * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_L: _exhaust_cam_L;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: in_lobe_profile, advance: advance)
    camshaft _exhaust_cam_L(params, lobe_profile: ex_lobe_profile, advance: advance)

    camshaft _intake_cam_R(params, lobe_profile: in_lobe_profile, advance: advance)
    camshaft _exhaust_cam_R(params, lobe_profile: ex_lobe_profile, advance: advance)


    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + (0 * rot120))
        .add_lobe(rot360 + intake_lobe_center + (2 * rot120))
        .add_lobe(rot360 + intake_lobe_center + (4 * rot120))

    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + (0 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center + (2 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center + (4 * rot120))

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + (1 * rot120))
        .add_lobe(rot360 + intake_lobe_center + (3 * rot120))
        .add_lobe(rot360 + intake_lobe_center + (5 * rot120))

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + (1 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center + (3 * rot120))
        .add_lobe(rot360 - exhaust_lobe_center + (5 * rot120))
}

// https://www.ozvr4.com/threads/high-compression-ratio-turbo.14514/page-2
public node mitsubishi_6a10_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 33.0 * units.cc;
    input flip_display: false;
    
    // guesses
    input flow_intake: 250;
    input flow_exhaust: 200;
    input lift_max: 10.0 * units.mm;
    alias output __out: head;

    function intake_flow(lift_max / 5.0)
    intake_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_intake))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_intake))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_intake))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_intake))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_intake))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_intake))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_intake))

    function exhaust_flow(lift_max / 5.0)
    exhaust_flow
        .add_sample(0.0 * lift_max, k_28inH2O(0.00 * flow_exhaust))
        .add_sample(0.2 * lift_max, k_28inH2O(0.32 * flow_exhaust))
        .add_sample(0.4 * lift_max, k_28inH2O(0.63 * flow_exhaust))
        .add_sample(0.6 * lift_max, k_28inH2O(0.83 * flow_exhaust))
        .add_sample(0.8 * lift_max, k_28inH2O(0.95 * flow_exhaust))
        .add_sample(1.0 * lift_max, k_28inH2O(1.00 * flow_exhaust))
        .add_sample(1.2 * lift_max, k_28inH2O(1.02 * flow_exhaust))

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(0.9 * units.inch) * 4 * units.inch,
        intake_runner_cross_section_area: circle_area(0.9 * units.inch),
        exhaust_runner_volume: circle_area(0.65 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.65 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node mitsubishi_6a10_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Mitsubishi 6A10",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 7500 * units.rpm, // guess
        throttle_gamma: 1.0
    )

    label bore(73.0 * units.mm)
    label stroke(63.6 * units.mm)
    label rod_length(125.5 * units.mm) // real
    label rod_mass(500.0 * units.g) // guess
    label piston_mass(400 * units.g) // guess
    label compression_height(32.7 * units.mm) // guess
    label deck_clearance(1.1 * units.mm) // head gasket only
    label piston_dome(8 * units.cc) // for 10.0:1 CR
    label crank_mass(50 * units.lb)
    label flywheel_mass(30 * units.lb)
    label flywheel_radius(5 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle:  60 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 300 * units.deg)
    rod_journal rj5(angle: 120 * units.deg)
    rod_journal rj6(angle: 180 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)


    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake (
        plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 50.0 * units.cm2,
        intake_flow_rate: k_carb(300.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(300.0),
        runner_length: 12.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(300.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 0.77, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 1800 * units.mm,
        volume: 1800 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.02, impulse_response: ir_lib.default_0)
    
    label pipe_length_1(1.7 * units.inch)
    label pipe_length_2(0.0 * units.inch)
    label pipe_length_3(1.3 * units.inch)
    
    label exhaust_stagger(2.0 * units.inch)

    cylinder_bank bL(bank_params, angle: 30.0 * units.deg)
    bL
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger,
            sound_attenuation: 1.0
        )

    cylinder_bank bR(bank_params, angle: -30.0 * units.deg)
    bR
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3,
            sound_attenuation: 1.0
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    mitsubishi_6a10_camshaft_builder camshaft()

    bL.set_cylinder_head (
        mitsubishi_6a10_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )
    bR.set_cylinder_head (
        mitsubishi_6a10_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 50 * units.deg)
        .add_sample(1000 * units.rpm, 60 * units.deg)
        .add_sample(2000 * units.rpm, 60 * units.deg)
        .add_sample(3000 * units.rpm, 60 * units.deg)
        .add_sample(4000 * units.rpm, 60 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 60 * units.deg)
        .add_sample(7000 * units.rpm, 60 * units.deg)
        .add_sample(8000 * units.rpm, 60 * units.deg)
        .add_sample(9000 * units.rpm, 60 * units.deg)

    engine.add_ignition_module(
        mitsubishi_6a10_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 1993 Mitsubishi Mirage Royal (CB6A)
// thanks as always to Automobile Catalog
public node mitsubishi_mirage_royal_cb6a_vehicle {
    alias output __out:
        vehicle(
            mass: 1080 * units.kg,
            drag_coefficient: 0.3,
            cross_sectional_area: 1.9 * (units.m * units.m),
            diff_ratio: 4.35,
            tire_radius: 298.5 * units.mm, // 185/65R14H
            rolling_resistance: 1080 * units.kg * 9.81 * (185.0/275.0) * 0.01
        );
}

public node mitsubishi_mirage_royal_cb6a_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 200 * units.lb_ft
        )
        .add_gear(2.846)
        .add_gear(1.581)
        .add_gear(1.000)
        .add_gear(0.685);
}

public node main {
    set_engine(mitsubishi_6a10_engine())
    set_vehicle(mitsubishi_mirage_royal_cb6a_vehicle())
    set_transmission(mitsubishi_mirage_royal_cb6a_transmission())
}

main()