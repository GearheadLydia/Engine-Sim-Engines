import "engine_sim.mr"

// Audi W12 (Bentley Continental GT) by GearheadLydia
// 2022-09-19 - revision 1

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

label bank_angle_major(72 * units.deg / 2)
label bank_angle_minor(15 * units.deg / 2)

label bank_timing_offset(bank_angle_major * 2 - (72 * units.deg))

// firing order: 1-6-2-7-4-9-5-10-3-8

public node audi_w12_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7200 * units.rpm;
    input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01,  (0.0/10.0) * cycle)
            .connect_wire(wires.wire06,  (1.0/10.0) * cycle + bank_timing_offset)
            .connect_wire(wires.wire02,  (2.0/10.0) * cycle)
            .connect_wire(wires.wire07,  (3.0/10.0) * cycle + bank_timing_offset)
            .connect_wire(wires.wire04,  (4.0/10.0) * cycle)
            .connect_wire(wires.wire09,  (5.0/10.0) * cycle + bank_timing_offset)
            .connect_wire(wires.wire05,  (6.0/10.0) * cycle)
            .connect_wire(wires.wire10,  (7.0/10.0) * cycle + bank_timing_offset)
            .connect_wire(wires.wire03,  (8.0/10.0) * cycle)
            .connect_wire(wires.wire08,  (9.0/10.0) * cycle + bank_timing_offset);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
}

// cams copied from VR6 R32

public node audi_w12_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 272 * units.deg,
            gamma: 1.5,
            lift: 9.85 * units.mm,
            steps: 100
        );
}

public node audi_w12_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 258 * units.deg,
            gamma: 1.5,
            lift: 9.90 * units.mm,
            steps: 100
        );
}

public node audi_w12_camshaft_builder {
    input in_lobe_profile: audi_w12_lobe_profile_int();
    input ex_lobe_profile: audi_w12_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 86.5 * units.deg;
    input intake_lobe_center: 110.0  * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 19.0 * units.deg;
    input base_radius: 17 * units.mm;

    output intake_cam_LO: _intake_cam_LO;
    output exhaust_cam_LO: _exhaust_cam_LO;
    output intake_cam_LI: _intake_cam_LI;
    output exhaust_cam_LI: _exhaust_cam_LI;
    output intake_cam_RI: _intake_cam_RI;
    output exhaust_cam_RI: _exhaust_cam_RI;
    output intake_cam_RO: _intake_cam_RO;
    output exhaust_cam_RO: _exhaust_cam_RO;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_LO(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_LO(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_LI(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_LI(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_RI(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_RI(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_RO(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_RO(params, lobe_profile: exhaust_lobe_profile)


    // firing order: 1-6-2-7-4-9-5-10-3-8

    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot72(72 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_LO
        .add_lobe(rot360 + intake_lobe_center + (2 * rot72)) //  #2
        .add_lobe(rot360 + intake_lobe_center + (4 * rot72)) //  #4

    _intake_cam_LI
        .add_lobe(rot360 + intake_lobe_center + (0 * rot72)) //  #1
        .add_lobe(rot360 + intake_lobe_center + (8 * rot72)) //  #3
        .add_lobe(rot360 + intake_lobe_center + (6 * rot72)) //  #5

    _intake_cam_RI
        .add_lobe(rot360 + intake_lobe_center + (3 * rot72)) //  #7
        .add_lobe(rot360 + intake_lobe_center + (5 * rot72)) //  #9

    _intake_cam_RO
        .add_lobe(rot360 + intake_lobe_center + (1 * rot72)) //  #6
        .add_lobe(rot360 + intake_lobe_center + (9 * rot72)) //  #8
        .add_lobe(rot360 + intake_lobe_center + (7 * rot72)) // #10

    _exhaust_cam_LO
        .add_lobe(rot360 - exhaust_lobe_center + (2 * rot72)) //  #2
        .add_lobe(rot360 - exhaust_lobe_center + (4 * rot72)) //  #4

    _exhaust_cam_LI
        .add_lobe(rot360 - exhaust_lobe_center + (0 * rot72)) //  #1
        .add_lobe(rot360 - exhaust_lobe_center + (8 * rot72)) //  #3
        .add_lobe(rot360 - exhaust_lobe_center + (6 * rot72)) //  #5

    _exhaust_cam_RI
        .add_lobe(rot360 - exhaust_lobe_center + (3 * rot72)) //  #7
        .add_lobe(rot360 - exhaust_lobe_center + (5 * rot72)) //  #9

    _exhaust_cam_RO
        .add_lobe(rot360 - exhaust_lobe_center + (1 * rot72)) //  #6
        .add_lobe(rot360 - exhaust_lobe_center + (9 * rot72)) //  #8
        .add_lobe(rot360 - exhaust_lobe_center + (7 * rot72)) // #10
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node audi_w12_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 45.0 * units.cc;
    input intake_runner_volume: circle_area(1.1 * units.inch) * 2 * units.inch;
    input intake_runner_cross_section_area: circle_area(1.1 * units.inch);
    input exhaust_runner_volume: circle_area(0.85 * units.inch) * 2 * units.inch;
    input exhaust_runner_cross_section_area: circle_area(0.85 * units.inch);
    input flip_display: false;
    
    input flow_attenuation: 1.0;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0,    0  * flow_attenuation)
        .add_flow_sample(50,   25 * flow_attenuation)
        .add_flow_sample(100,  76 * flow_attenuation)
        .add_flow_sample(150, 100 * flow_attenuation)
        .add_flow_sample(200, 146 * flow_attenuation)
        .add_flow_sample(250, 175 * flow_attenuation)
        .add_flow_sample(300, 212 * flow_attenuation)
        .add_flow_sample(350, 230 * flow_attenuation)
        .add_flow_sample(400, 255 * flow_attenuation)
        .add_flow_sample(450, 275 * flow_attenuation)
        .add_flow_sample(500, 294 * flow_attenuation)
        .add_flow_sample(550, 300 * flow_attenuation)
        .add_flow_sample(600, 314 * flow_attenuation)
        .add_flow_sample(650, 314 * flow_attenuation)
        .add_flow_sample(700, 314 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0,    0  * flow_attenuation)
        .add_flow_sample(50,   25 * flow_attenuation)
        .add_flow_sample(100,  70 * flow_attenuation)
        .add_flow_sample(150, 100 * flow_attenuation)
        .add_flow_sample(200, 132 * flow_attenuation)
        .add_flow_sample(250, 140 * flow_attenuation)
        .add_flow_sample(300, 156 * flow_attenuation)
        .add_flow_sample(350, 170 * flow_attenuation)
        .add_flow_sample(400, 181 * flow_attenuation)
        .add_flow_sample(450, 191 * flow_attenuation)
        .add_flow_sample(500, 207 * flow_attenuation)
        .add_flow_sample(550, 214 * flow_attenuation)
        .add_flow_sample(600, 228 * flow_attenuation)
        .add_flow_sample(650, 228 * flow_attenuation)
        .add_flow_sample(700, 228 * flow_attenuation)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node vw_wr10_hypothetical_engine {
    alias output __out: engine;

    wires wires()

    label bore(84.0 * units.mm)
    label stroke(90.2 * units.mm)
    label rod_length(166.85 * units.mm)
    label rod_mass(434 * units.g)
    label piston_mass(400 * units.g)
    label compression_height(34.5 * units.mm)
    label piston_dome(10.0 * units.cc)
    label deck_height(248.00 * units.mm)
    label crank_mass(55 * units.lb)
    label flywheel_mass(25 * units.lb)
    label flywheel_radius(6 * units.inch)

    engine engine(
        name: "VW WR10",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1000 * units.rpm,
        redline: 6800 * units.rpm,
        throttle_gamma: 1.0,
        simulation_frequency: 10000
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (bank_angle_major) + (90 * units.deg)
    )

    // additional offset
    // allegedly total of 22 degrees on the VR6, but trigonometry supports about 20.77 degrees for true evenness
    // went for 20.75 degrees to make it a round number
    label crank_pin_offset(bank_angle_minor + 2.875 * units.deg)
    rod_journal rj1(angle: (((0.0 / 5.0) * 360)) * units.deg - crank_pin_offset)
    rod_journal rj2(angle: (((2.0 / 5.0) * 360)) * units.deg + crank_pin_offset)
    rod_journal rj3(angle: (((3.0 / 5.0) * 360)) * units.deg - crank_pin_offset)
    rod_journal rj4(angle: (((4.0 / 5.0) * 360)) * units.deg + crank_pin_offset)
    rod_journal rj5(angle: (((1.0 / 5.0) * 360)) * units.deg - crank_pin_offset)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)


    piston_parameters piston_params(
        mass: piston_mass,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake_L(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(500.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9968,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(800.0),
        runner_length: 4.0 * units.inch,
        velocity_decay: 0.1
    )

    intake intake_R(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(500.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9968,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(800.0),
        runner_length: 4.0 * units.inch,
        velocity_decay: 0.1
    )

    label exhaust_radius((3.5 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(700.0),
        primary_tube_length: 9.0 * units.inch,
        primary_flow_rate: k_carb(550.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 2500 * units.mm,
        volume: 2500 * units.mm * circle_area(exhaust_radius)
    )
    
    exhaust_system exhaustL(es_params, audio_volume:  1.0*0.05, impulse_response: ir_lib.default_0)
    exhaust_system exhaustR(es_params, audio_volume:  1.0*0.05, impulse_response: ir_lib.default_0)
    
    //12.5mm offset
    label bore_center_offset(12.5 * units.mm)
    label position_xO_offset(bore_center_offset *  0.72537437101228763799328411118973) // cos(43.5)
    label position_yO_offset(bore_center_offset * -0.68835457569375398438925614341961) // sin(43.5)
    label position_xI_offset(bore_center_offset * -0.87881711266196537412999514368452) // cos(28.5)
    label position_yI_offset(bore_center_offset *  0.47715876025960841504886300818939) // sin(28.5)
    
    label exhaust_length_stagger_LR(30 * units.mm)
    label exhaust_bore_spacing(40 * units.mm)
    
    label sound_attenuation_penalty(0.02)

    cylinder_bank bLO(bank_params, angle:  bank_angle_major + bank_angle_minor, position_x: -position_xO_offset, position_y: position_yO_offset) // LO (first)
    bLO
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire02,
            intake: intake_L,
            exhaust_system: exhaustL,
            primary_length: exhaust_bore_spacing * 3 + exhaust_length_stagger_LR,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 3))
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire04,
            intake: intake_L,
            exhaust_system: exhaustL,
            primary_length: exhaust_bore_spacing * 1 + exhaust_length_stagger_LR,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 1))
        )

    cylinder_bank bRI(bank_params, angle: -bank_angle_major + bank_angle_minor, position_x: position_xI_offset, position_y: position_yI_offset) // RI (second)
    bRI
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire07,
            intake: intake_R,
            exhaust_system: exhaustR,
            primary_length: exhaust_bore_spacing * 3,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 3))
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire09,
            intake: intake_R,
            exhaust_system: exhaustR,
            primary_length: exhaust_bore_spacing * 1,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 1))
        )
    
    cylinder_bank bLI(bank_params, angle:  bank_angle_major - bank_angle_minor, position_x: -position_xI_offset, position_y: position_yI_offset) // LI (third)
    bLI
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire01,
            intake: intake_L,
            exhaust_system: exhaustL,
            primary_length: exhaust_bore_spacing * 4 + exhaust_length_stagger_LR,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 4))
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire03,
            intake: intake_L,
            exhaust_system: exhaustL,
            primary_length: exhaust_bore_spacing * 2 + exhaust_length_stagger_LR,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 2))
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire05,
            intake: intake_L,
            exhaust_system: exhaustL,
            primary_length: exhaust_bore_spacing * 0 + exhaust_length_stagger_LR,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 0))
        )

    cylinder_bank bRO(bank_params, angle: -bank_angle_major - bank_angle_minor, position_x: position_xO_offset, position_y: position_yO_offset) // RO (fourth)
    bRO
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire06,
            intake: intake_R,
            exhaust_system: exhaustR,
            primary_length: exhaust_bore_spacing * 4,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 4))
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire08,
            intake: intake_R,
            exhaust_system: exhaustR,
            primary_length: exhaust_bore_spacing * 2,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 2))
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire10,
            intake: intake_R,
            exhaust_system: exhaustR,
            primary_length: exhaust_bore_spacing * 0,
            sound_attenuation: (1.0 - (sound_attenuation_penalty * 0))
        )

    engine
        .add_cylinder_bank(bLO)
        .add_cylinder_bank(bRI)
        .add_cylinder_bank(bLI)
        .add_cylinder_bank(bRO)

    engine.add_crankshaft(c0)

    audi_w12_camshaft_builder camshaft(
        in_lobe_profile: audi_w12_lobe_profile_int(),
        ex_lobe_profile: audi_w12_lobe_profile_exh()
    )

    label intake_runner_radius(1.2 * units.inch)
    label exhaust_runner_radius(0.85 * units.inch)
    
    label runner_length_shrt(2.75 * units.inch)
    label runner_length_long(4.25 * units.inch)

    bLO.set_cylinder_head (
        audi_w12_head(
            intake_camshaft: camshaft.intake_cam_LO,
            exhaust_camshaft: camshaft.exhaust_cam_LO,
            intake_runner_volume: circle_area(intake_runner_radius) * runner_length_long,
            intake_runner_cross_section_area: circle_area(intake_runner_radius),
            exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_shrt,
            exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: true
        )
    )
    bRI.set_cylinder_head (
        audi_w12_head(
            intake_camshaft: camshaft.intake_cam_RI,
            exhaust_camshaft: camshaft.exhaust_cam_RI,
            intake_runner_volume: circle_area(intake_runner_radius) * runner_length_shrt,
            intake_runner_cross_section_area: circle_area(intake_runner_radius),
            exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_long,
            exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: false
        )
    )
    bLI.set_cylinder_head (
        audi_w12_head(
            intake_camshaft: camshaft.intake_cam_LI,
            exhaust_camshaft: camshaft.exhaust_cam_LI,
            intake_runner_volume: circle_area(intake_runner_radius) * runner_length_shrt,
            intake_runner_cross_section_area: circle_area(intake_runner_radius),
            exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_long,
            exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: true
        )
    )
    bRO.set_cylinder_head (
        audi_w12_head(
            intake_camshaft: camshaft.intake_cam_RO,
            exhaust_camshaft: camshaft.exhaust_cam_RO,
            intake_runner_volume: circle_area(intake_runner_radius) * runner_length_long,
            intake_runner_cross_section_area: circle_area(intake_runner_radius),
            exhaust_runner_volume: circle_area(exhaust_runner_radius) * runner_length_shrt,
            exhaust_runner_cross_section_area: circle_area(exhaust_runner_radius),
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 50 * units.deg)
        .add_sample(1000 * units.rpm, 60 * units.deg)
        .add_sample(2000 * units.rpm, 60 * units.deg)
        .add_sample(3000 * units.rpm, 60 * units.deg)
        .add_sample(4000 * units.rpm, 60 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 60 * units.deg)
        .add_sample(7000 * units.rpm, 60 * units.deg)
        .add_sample(8000 * units.rpm, 60 * units.deg)
        .add_sample(9000 * units.rpm, 60 * units.deg)

    engine.add_ignition_module(
        audi_w12_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 1999 Volkswagen W12 Roadster
// some numbers from TDU, some guesses
public node volkswagen_w12_roadster_concept_vehicle {
    alias output __out:
        vehicle(
            mass: 2535 * units.lb,
            drag_coefficient: 0.3,
            cross_sectional_area: 1.8 * (units.m * units.m),
            diff_ratio: 3.52,
            tire_radius: 352 * units.mm, // 275/40ZR19
            rolling_resistance: 500 * units.N
        );
}

public node volkswagen_w12_roadster_concept_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 900 * units.lb_ft
        )
        .add_gear(4.171)
        .add_gear(2.34)
        .add_gear(1.521)
        .add_gear(1.143)
        .add_gear(0.867)
        .add_gear(0.691);
}

public node main {
    set_engine(vw_wr10_hypothetical_engine())
    set_vehicle(volkswagen_w12_roadster_concept_vehicle())
    set_transmission(volkswagen_w12_roadster_concept_transmission())
}

main()