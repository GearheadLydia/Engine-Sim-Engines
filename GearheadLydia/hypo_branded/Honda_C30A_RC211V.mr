import "engine_sim.mr"

// Honda C30A / RC211V hybrid

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node honda_c30a_v5_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8250 * units.rpm;
	input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1,  0.0  * units.deg)
            .connect_wire(wires.wire2, 254.5 * units.deg)
			.connect_wire(wires.wire5, 360.0 * units.deg)
			.connect_wire(wires.wire3, 464.5 * units.deg)
			.connect_wire(wires.wire4, 644.5 * units.deg);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
}

public node honda_c30a_v5_lobe_profile_int_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 235.5 * units.deg,
            gamma: 1.4,
            lift: 8.5 * units.mm,
            steps: 100
        );
}

public node honda_c30a_v5_lobe_profile_exh_lo {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240.5 * units.deg,
            gamma: 1.4,
            lift: 8.2 * units.mm,
            steps: 100
        );
}

public node honda_c30a_v5_lobe_profile_int_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 285 * units.deg,
            gamma: 1.5,
            lift: 10.2 * units.mm,
            steps: 100
        );
}

public node honda_c30a_v5_lobe_profile_exh_hi {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 280 * units.deg,
            gamma: 1.5,
            lift: 9.5 * units.mm,
            steps: 100
        );
}

public node honda_c30a_v5_camshaft_builder {
    input in_lobe_profile_lo: honda_c30a_v5_lobe_profile_int_lo();
	input ex_lobe_profile_lo: honda_c30a_v5_lobe_profile_exh_lo();
    input in_lobe_profile_hi: honda_c30a_v5_lobe_profile_int_hi();
    input ex_lobe_profile_hi: honda_c30a_v5_lobe_profile_exh_hi();
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center_lo: 100.0 * units.deg;
    input exhaust_lobe_center_lo: 100.0 * units.deg;
    input intake_lobe_center_hi: 106.75 * units.deg;
    input exhaust_lobe_center_hi: 104.0 * units.deg;
    input advance_in_lo: 0.0 * units.deg;
    input advance_ex_lo: 0.0 * units.deg;
	input advance_in_hi: 0.0 * units.deg;
	input advance_ex_hi: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_F_lo: _intake_cam_F_lo;
    output exhaust_cam_F_lo: _exhaust_cam_F_lo;
    output intake_cam_R_lo: _intake_cam_R_lo;
    output exhaust_cam_R_lo: _exhaust_cam_R_lo;

    output intake_cam_F_hi: _intake_cam_F_hi;
    output exhaust_cam_F_hi: _exhaust_cam_F_hi;
    output intake_cam_R_hi: _intake_cam_R_hi;
    output exhaust_cam_R_hi: _exhaust_cam_R_hi;

    camshaft_parameters params(
        advance: advance_in_lo,
        base_radius: base_radius
    )

    camshaft _intake_cam_F_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in_lo)
    camshaft _exhaust_cam_F_lo(params, lobe_profile: ex_lobe_profile_lo, advance: advance_ex_lo)

    camshaft _intake_cam_R_lo(params, lobe_profile: in_lobe_profile_lo, advance: advance_in_lo)
    camshaft _exhaust_cam_R_lo(params, lobe_profile: ex_lobe_profile_lo, advance: advance_ex_lo)

    camshaft _intake_cam_F_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in_hi)
    camshaft _exhaust_cam_F_hi(params, lobe_profile: ex_lobe_profile_hi, advance: advance_ex_hi)

    camshaft _intake_cam_R_hi(params, lobe_profile: in_lobe_profile_hi, advance: advance_in_hi)
    camshaft _exhaust_cam_R_hi(params, lobe_profile: ex_lobe_profile_hi, advance: advance_ex_hi)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_F_lo
        .add_lobe(rot360 + intake_lobe_center_lo +  0.0  * units.deg) // #1
		.add_lobe(rot360 + intake_lobe_center_lo + 464.5 * units.deg) // #3
		.add_lobe(rot360 + intake_lobe_center_lo + 360.0 * units.deg) // #5

    _intake_cam_R_lo
        .add_lobe(rot360 + intake_lobe_center_lo + 254.5 * units.deg) // #2
		.add_lobe(rot360 + intake_lobe_center_lo + 644.5 * units.deg) // #4

	_exhaust_cam_F_lo
        .add_lobe(rot360 - exhaust_lobe_center_lo +  0.0  * units.deg) // #1
		.add_lobe(rot360 - exhaust_lobe_center_lo + 464.5 * units.deg) // #3
		.add_lobe(rot360 - exhaust_lobe_center_lo + 360.0 * units.deg) // #5

	_exhaust_cam_R_lo
        .add_lobe(rot360 - exhaust_lobe_center_lo + 254.5 * units.deg) // #2
		.add_lobe(rot360 - exhaust_lobe_center_lo + 644.5 * units.deg) // #4

    _intake_cam_F_hi
        .add_lobe(rot360 + intake_lobe_center_hi +  0.0  * units.deg) // #1
		.add_lobe(rot360 + intake_lobe_center_hi + 464.5 * units.deg) // #3
		.add_lobe(rot360 + intake_lobe_center_hi + 360.0 * units.deg) // #5

    _intake_cam_R_hi
        .add_lobe(rot360 + intake_lobe_center_hi + 254.5 * units.deg) // #2
		.add_lobe(rot360 + intake_lobe_center_hi + 644.5 * units.deg) // #4

	_exhaust_cam_F_hi
        .add_lobe(rot360 - exhaust_lobe_center_hi +  0.0  * units.deg) // #1
		.add_lobe(rot360 - exhaust_lobe_center_hi + 464.5 * units.deg) // #3
		.add_lobe(rot360 - exhaust_lobe_center_hi + 360.0 * units.deg) // #5

	_exhaust_cam_R_hi
        .add_lobe(rot360 - exhaust_lobe_center_hi + 254.5 * units.deg) // #2
		.add_lobe(rot360 - exhaust_lobe_center_hi + 644.5 * units.deg) // #4
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node honda_c30a_v5_head {
    input cam_in_lo;
	input cam_ex_lo;
    input cam_in_hi;
	input cam_ex_hi;
    input chamber_volume: 51.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.1;
    input lift_scale: 45.0;
    alias output __out: head;

    function intake_flow(1.05 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)
        .add_flow_sample(13 * lift_scale, 335 * flow_attenuation)
        .add_flow_sample(14 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1.05 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(13 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(14 * lift_scale, 280 * flow_attenuation)

		
    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 30.0 * units.cc,
        intake_runner_cross_section_area: 10 * units.cm2,
        exhaust_runner_volume: 30.0 * units.cc,
        exhaust_runner_cross_section_area: 10 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
		valvetrain: vtec_valvetrain(
            vtec_intake_camshaft: cam_in_hi,
            vtec_exhaust_camshaft: cam_ex_hi,
            intake_camshaft: cam_in_lo,
            exhaust_camshaft: cam_ex_lo,
            min_rpm: 5800 * units.rpm
		),
        flip_display: flip_display
    )
}


public node c30a_v5 {
    alias output __out: engine;

    wires wires()

    label bore(90.0 * units.mm)
    label stroke(78.0 * units.mm)
    label rod_length(152.5 * units.mm)
    label rod_mass(350 * units.g) // guesstimate based on aftermarket chromoly rods - stock rods are titanium
	label piston_mass(400 * units.g)
    label compression_height(1.184 * units.inch)
	label piston_dome(0.0 * units.cc)
	label deck_height(8.715 * units.inch)
    label crank_mass(45 * units.lb)
    label flywheel_mass(25 * units.lb)
    label flywheel_radius(5 * units.inch)

    engine engine(
        name: "Honda C30A RC211V",
        starter_torque: 300 * units.lb_ft,
		starter_speed: 600 * units.rpm,
        redline: 8000 * units.rpm,
        throttle_gamma: 2.0,
		simulation_frequency: 7500
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 52.25 * units.deg
    )

    rod_journal rj1(angle:  0.0  * units.deg)
    rod_journal rj2(angle: 105.5 * units.deg) // 360 - 105.5
    rod_journal rj3(angle:  0.0  * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 0.5 * units.L,
        plenum_cross_section_area: 50.0 * units.cm2,
        intake_flow_rate: k_carb(500.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 2.0,
        runner_flow_rate: k_carb(150.0),
        runner_length: 4.5 * units.inch,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(350.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        volume: 50.0 * units.L
    )
    exhaust_system exhaustF(es_params, audio_volume: 1.0 * 0.01, impulse_response: impulse_response(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0.01), length: 1500 * units.mm)
    exhaust_system exhaustR(es_params, audio_volume: 0.9 * 0.01, impulse_response: impulse_response(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0.01), length: 1500 * units.mm)

    cylinder_bank bF(bank_params, angle: -37.75 * units.deg) // Front (first)
    bF
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaustF
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaustF
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaustF
        )

    cylinder_bank bR(bank_params, angle: 37.75 * units.deg) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaustR
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaustR
        )

    engine
        .add_cylinder_bank(bF)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    honda_c30a_v5_camshaft_builder camshaft()

    bF.set_cylinder_head (
        honda_c30a_v5_head(
            cam_in_lo: camshaft.intake_cam_F_lo,
			cam_in_hi: camshaft.intake_cam_F_hi,
            cam_ex_lo: camshaft.exhaust_cam_F_lo,
			cam_ex_hi: camshaft.exhaust_cam_F_hi,
            flip_display: false
        )
    )
    bR.set_cylinder_head (
        honda_c30a_v5_head(
            cam_in_lo: camshaft.intake_cam_R_lo,
			cam_in_hi: camshaft.intake_cam_R_hi,
            cam_ex_lo: camshaft.exhaust_cam_R_lo,
			cam_ex_hi: camshaft.exhaust_cam_R_hi,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 30 * units.deg)
        .add_sample(1000 * units.rpm, 40 * units.deg)
        .add_sample(2000 * units.rpm, 45 * units.deg)
        .add_sample(3000 * units.rpm, 50 * units.deg)
        .add_sample(4000 * units.rpm, 55 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 65 * units.deg)
		.add_sample(7000 * units.rpm, 70 * units.deg)
		.add_sample(8000 * units.rpm, 75 * units.deg)
		.add_sample(9000 * units.rpm, 75 * units.deg)

    engine.add_ignition_module(
        honda_c30a_v5_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 8250 * units.rpm
        )
    )
}

// 1999 Acura NSX Zanardi Edition
public node honda_nsx_na2_vehicle {
    alias output __out:
        vehicle(
            mass: 3015 * units.lb,
            drag_coefficient: 0.32,
            cross_sectional_area: 1.78 * (units.m * units.m),
            diff_ratio: 4.062,
            tire_radius: 314 * units.mm, // 245/40ZR17
            rolling_resistance: 500 * units.N
        );
}

public node honda_nsx_na2_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(3.066)
        .add_gear(1.956)
        .add_gear(1.428)
        .add_gear(1.125)
        .add_gear(0.914)
        .add_gear(0.717);
}

public node main {
    set_engine(c30a_v5())
    set_vehicle(honda_nsx_na2_vehicle())
    set_transmission(honda_nsx_na2_transmission())
}
