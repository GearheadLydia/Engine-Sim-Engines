import "engine_sim.mr"

// SUPER UNFINISHED

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node toyota_7m_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7400 * units.rpm;
    input limiter_duration: 0.1;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 5.0) * cycle)
            .connect_wire(wires.wire2, (1.0 / 5.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 5.0) * cycle)
            .connect_wire(wires.wire5, (3.0 / 5.0) * cycle)
            .connect_wire(wires.wire3, (4.0 / 5.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
}

// http://users.tpg.com.au/users/loats/technical/7mge/camshafts.html

public node toyota_7m_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 255 * units.deg,
            gamma: 1.5,
            lift: 300 * units.thou,
            steps: 100
        );
}

public node toyota_7m_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.5,
            lift: 280 * units.thou,
            steps: 100
        );
}

public node toyota_7m_camshaft_builder {
    input lobe_profile: toyota_7m_lobe_profile_int();
    input ex_lobe_profile: toyota_7m_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 123.75 * units.deg;
    input intake_lobe_center: 112.5 * units.deg;
    input exhaust_lobe_center: 135.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15.0 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot144(144 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot144)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot144)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot144)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot144)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot144)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot144)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot144)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot144)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot144)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot144)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node toyota_7m_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 40.0 * units.cc;
    input flip_display: false;
    
    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 65 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 155 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 255 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 75 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 105 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 164 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 168 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 176 * flow_attenuation)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 30.0 * units.cc,
        intake_runner_cross_section_area: 2 * 12.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node toyota_7mge {
    alias output __out: engine;

    engine engine(
        name: "Toyota 7M-GE",
        starter_torque: 100 * units.lb_ft,
        starter_speed: 600 * units.rpm,
        redline: 7000 * units.rpm,
        throttle_gamma: 2.0
    )
    
    label lean_angle(0 * units.deg)

    label bore(83.0 * units.mm)
    label stroke(91.0 * units.mm)
    label rod_length(151.89 * units.mm)
    label rod_mass(450 * units.g)
    label piston_mass(300 * units.g)
    label compression_height(32.75 * units.mm)
    label piston_dome(-12.0 * units.cc) // -18.5 for turbo
    label deck_height((230.5 + 0.5) * units.mm)
    label crank_mass(5 * units.kg)
    label flywheel_mass(25 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg + lean_angle
    )

    rod_journal rj1(angle: (0.0 / 5.0) * 360 * units.deg)
    rod_journal rj2(angle: (2.0 / 5.0) * 360 * units.deg)
    rod_journal rj3(angle: (3.0 / 5.0) * 360 * units.deg)
    rod_journal rj4(angle: (4.0 / 5.0) * 360 * units.deg)
    rod_journal rj5(angle: (1.0 / 5.0) * 360 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    performer_rpm_intake intake(
        carburetor_cfm: 700.0,
        idle_flow_rate_cfm: 0.1,
        idle_throttle_plate_position: 0.994
    )
    
    label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(500.0),
        primary_tube_length: 25.0 * units.inch,
        primary_flow_rate: k_carb(350.0),
        velocity_decay: 0.4, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 500 * units.mm,
        volume: 500 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
    
    // 7M-GE stock
    label pipe_length_1(45 * units.mm)
    label pipe_length_2(30 * units.mm)
    label pipe_length_3(15 * units.mm)
    label pipe_length_4(5 * units.mm)
    label pipe_length_5(15 * units.mm)
    
    // 7M-GTE stock
    // label pipe_length_2(40 * units.mm)
    // label pipe_length_1(60 * units.mm)
    // label pipe_length_3(20 * units.mm)
    // label pipe_length_4(5 * units.mm)
    // label pipe_length_5(15 * units.mm)
    
    cylinder_bank b0(bank_params, angle: 0 * units.deg + lean_angle)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1,
            sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_5,
            sound_attenuation: 1.0
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    toyota_7m_camshaft_builder camshaft(
        lobe_profile: toyota_7m_lobe_profile_int(),
        ex_lobe_profile: toyota_7m_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        toyota_7m_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 15 * units.deg)
        .add_sample(1000 * units.rpm, 20 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 35 * units.deg)
        .add_sample(4000 * units.rpm, 40 * units.deg)
        .add_sample(5000 * units.rpm, 45 * units.deg)
        .add_sample(6000 * units.rpm, 50 * units.deg)
        .add_sample(7000 * units.rpm, 50 * units.deg)
        .add_sample(8000 * units.rpm, 50 * units.deg)
        .add_sample(9000 * units.rpm, 50 * units.deg)

    engine.add_ignition_module(
        toyota_7m_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7400 * units.rpm
        ))
}

// 1992 Toyota Supra Turbo 3.0 (MA70)
public node toyota_supra_ma70_vehicle {
    alias output __out:
        vehicle(
            mass: 1611 * units.kg,
            drag_coefficient: 0.32,
            cross_sectional_area: 1.91 * (units.m * units.m),
            diff_ratio: 3.73,
            tire_radius: 316 * units.mm, // 225/50R16
            rolling_resistance: 490 * units.N
        );
}

public node toyota_r154_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 700 * units.lb_ft
        )
        .add_gear(3.250)
        .add_gear(1.955)
        .add_gear(1.310)
        .add_gear(1.000)
        .add_gear(0.753);
}

public node main {
    set_engine(toyota_7mge())
    set_vehicle(toyota_supra_ma70_vehicle())
    set_transmission(toyota_r154_transmission())
}

main()