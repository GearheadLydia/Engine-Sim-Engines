import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order:   1-6-5-10-2-7-3-8-4-9
// in GM layout: 2-1-10-9-4-3-6-5-8-7

public node mercedes_m113_55_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7250 * units.rpm;
    input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, (0.0/10.0) * cycle)
            .connect_wire(wires.wire06, (1.0/10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire05, (2.0/10.0) * cycle)
            .connect_wire(wires.wire10, (3.0/10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire02, (4.0/10.0) * cycle)
            .connect_wire(wires.wire07, (5.0/10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire03, (6.0/10.0) * cycle)
            .connect_wire(wires.wire08, (7.0/10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire04, (8.0/10.0) * cycle)
            .connect_wire(wires.wire09, (9.0/10.0) * cycle + 18 * units.deg);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
}

public node mercedes_m113_55_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 230 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node mercedes_m113_55_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 230 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node mercedes_m113_55_camshaft_builder {
    input in_lobe_profile: mercedes_m113_55_lobe_profile_int();
    input ex_lobe_profile: mercedes_m113_55_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 110.0 * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot18(18 * units.deg)
    label rot30(30 * units.deg)
    label rot54(54 * units.deg)
    label rot60(60 * units.deg)
    label rot72(72 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot360(360 * units.deg)
    
    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot72) //  #1
        .add_lobe(rot360 + intake_lobe_center + 4 * rot72) //  #2
        .add_lobe(rot360 + intake_lobe_center + 6 * rot72) //  #3
        .add_lobe(rot360 + intake_lobe_center + 8 * rot72) //  #4
        .add_lobe(rot360 + intake_lobe_center + 2 * rot72) //  #5

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 1 * rot72 + rot18) //  #6
        .add_lobe(rot360 + intake_lobe_center + 5 * rot72 + rot18) //  #7
        .add_lobe(rot360 + intake_lobe_center + 7 * rot72 + rot18) //  #8
        .add_lobe(rot360 + intake_lobe_center + 9 * rot72 + rot18) //  #9
        .add_lobe(rot360 + intake_lobe_center + 3 * rot72 + rot18) // #10

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot72)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot72)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot72)
        .add_lobe(rot360 - exhaust_lobe_center + 8 * rot72)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot72)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot72 + rot18)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot72 + rot18)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot72 + rot18)
        .add_lobe(rot360 - exhaust_lobe_center + 9 * rot72 + rot18)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot72 + rot18)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node mercedes_m113_55_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 46.0 * units.cc;
    input flip_display: false;
    
    input flow_attenuation: 0.95;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 4 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node mercedes_m113_987_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Mercedes-AMG M113 based V10",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1000 * units.rpm,
        redline: 6500 * units.rpm,
        throttle_gamma: 1.0
    )

    label bore(97.0 * units.mm)
    label bore_spacing(106 * units.mm) // not 100% sure where I got this
    label stroke(92.0 * units.mm)
    label rod_length(146.5 * units.mm)
    label rod_mass(434 * units.g)
    label compression_height(30.07 * units.mm)
    label piston_mass(292 * units.g)
    label piston_dome(0.00 * units.cc) // this one is a guess
    label deck_clearance(3.4 * units.mm) // makes compression ratio work out
    label crank_mass(85 * units.lb)
    label flywheel_mass(30 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // 45 degrees
    )

    rod_journal rj1(angle:   0 * units.deg)
    rod_journal rj2(angle: 288 * units.deg)
    rod_journal rj3(angle:  72 * units.deg)
    rod_journal rj4(angle: 216 * units.deg)
    rod_journal rj5(angle: 144 * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(550),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(350.0),
        runner_length: 5.5 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(400.0),
        primary_tube_length: 5.0 * units.inch,
        primary_flow_rate: k_carb(350.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2600 * units.mm,
        volume: (2000 * units.mm * circle_area(exhaust_radius)) + (600 * units.mm * circle_area(exhaust_radius) * 2)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.05, impulse_response: ir_lib.default_0)

    label pipe_length_1(5.10 * bore_spacing)
    label pipe_length_2(4.00 * bore_spacing)
    label pipe_length_3(2.90 * bore_spacing)
    label pipe_length_4(1.35 * bore_spacing)
    label pipe_length_5(0.00 * bore_spacing)
    
    label exhaust_stagger(22 * units.mm)

    cylinder_bank b0(bank_params, angle: 45.0 * units.deg) // L (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire01,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire02,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire03,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire04,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire05,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_5 + exhaust_stagger
        )

    cylinder_bank b1(bank_params, angle: -45.0 * units.deg) // R (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire06,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire07,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire08,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire09,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire10,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pipe_length_5
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    mercedes_m113_55_camshaft_builder camshaft(
        in_lobe_profile: mercedes_m113_55_lobe_profile_int(),
        ex_lobe_profile: mercedes_m113_55_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        mercedes_m113_55_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        mercedes_m113_55_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 35 * units.deg)
        .add_sample(1000 * units.rpm, 45 * units.deg)
        .add_sample(2000 * units.rpm, 50 * units.deg)
        .add_sample(3000 * units.rpm, 49 * units.deg)
        .add_sample(4000 * units.rpm, 48 * units.deg)
        .add_sample(5000 * units.rpm, 47 * units.deg)
        .add_sample(6000 * units.rpm, 45 * units.deg)
        .add_sample(7000 * units.rpm, 45 * units.deg)

    engine.add_ignition_module(
        mercedes_m113_55_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// SLK55 AMG 2008 (R171)
public node mercedes_slk_55_amg_r171_vehicle {
    alias output __out:
        vehicle(
            mass: 3420 * units.lb,
            drag_coefficient: 0.35,
            cross_sectional_area: (70.6 * units.inch) * (50 * units.inch) * 0.8,
            diff_ratio: 3.06,
            tire_radius: 314.96 * units.mm, // 245/35ZR18
            rolling_resistance: 500 * units.N
        );
}

public node mercedes_7g_tronic_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1200 * units.lb_ft
        )
        .add_gear(4.377)
        .add_gear(2.859)
        .add_gear(1.921)
        .add_gear(1.368)
        .add_gear(1.000)
        .add_gear(0.820)
        .add_gear(0.728);
}

// 2004 Mercedes-Benz CLK55 AMG (C209)
public node mercedes_clk_55_amg_c209_vehicle {
    alias output __out:
        vehicle(
            mass: 1638 * units.kg,
            drag_coefficient: 0.29,
            cross_sectional_area: 2.04 * (units.m * units.m),
            diff_ratio: 3.06,
            tire_radius: 317.5 * units.mm, // 255/35ZR18
            rolling_resistance: 1638 * units.kg * 9.81 * (255.0/275.0) * 0.01
        );
}

public node mercedes_5g_tronic_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 700 * units.lb_ft
        )
        .add_gear(3.588)
        .add_gear(2.186)
        .add_gear(1.405)
        .add_gear(1.000)
        .add_gear(0.831);
}

public node main {
    set_engine(mercedes_m113_987_engine())
    set_vehicle(mercedes_clk_55_amg_c209_vehicle())
    set_transmission(mercedes_5g_tronic_transmission())
}

main()