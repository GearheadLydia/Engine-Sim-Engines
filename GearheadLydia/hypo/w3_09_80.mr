import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order:  1-4-7-2-5-8-3-6-9

public node w18_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8000 * units.rpm;
	input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1,  (0.0/9.0) * cycle)
            .connect_wire(wires.wire4,  (1.0/9.0) * cycle)
			.connect_wire(wires.wire7,  (2.0/9.0) * cycle)
            .connect_wire(wires.wire2,  (3.0/9.0) * cycle)
            .connect_wire(wires.wire5,  (4.0/9.0) * cycle)
			.connect_wire(wires.wire8,  (5.0/9.0) * cycle)
            .connect_wire(wires.wire3,  (6.0/9.0) * cycle)
            .connect_wire(wires.wire6,  (7.0/9.0) * cycle)
			.connect_wire(wires.wire9,  (8.0/9.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
}

// cams copied from VR6 R32

public node w18_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 272 * units.deg,
            gamma: 1.5,
            lift: 9.85 * units.mm,
            steps: 100
        );
}

public node w18_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 258 * units.deg,
            gamma: 1.5,
            lift: 9.90 * units.mm,
            steps: 100
        );
}

public node w18_camshaft_builder {
    input in_lobe_profile: w18_lobe_profile_int();
	input ex_lobe_profile: w18_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_C: _intake_cam_C;
    output exhaust_cam_C: _exhaust_cam_C;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_C(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_C(params, lobe_profile: exhaust_lobe_profile)
    
	camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)

	label rot30(30 * units.deg)
	label rot60(60 * units.deg)
	label rot72(72 * units.deg)
    label rot80(80 * units.deg)
	label rot90(90 * units.deg)
	label rot120(120 * units.deg)
    label rot360(360 * units.deg)
	
    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + 0 * rot80) // #1
        .add_lobe(rot360 + intake_lobe_center + 3 * rot80) // #2
        .add_lobe(rot360 + intake_lobe_center + 6 * rot80) // #3

    _intake_cam_C
        .add_lobe(rot360 + intake_lobe_center + 1 * rot80) // #4
        .add_lobe(rot360 + intake_lobe_center + 4 * rot80) // #5
        .add_lobe(rot360 + intake_lobe_center + 7 * rot80) // #6

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + 2 * rot80) // #7
        .add_lobe(rot360 + intake_lobe_center + 5 * rot80) // #8
        .add_lobe(rot360 + intake_lobe_center + 8 * rot80) // #9
	
    _exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot80) // #1
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot80) // #2
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot80) // #3

    _exhaust_cam_C
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot80) // #4
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot80) // #5
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot80) // #6

    _exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot80) // #7
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot80) // #8
        .add_lobe(rot360 - exhaust_lobe_center + 8 * rot80) // #9
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node w18_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 46.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation_in: 1.0;
	input flow_attenuation_ex: 1.0;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  60 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale,  90 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(13 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(14 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  55 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale,  85 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(13 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(14 * lift_scale, 280 * flow_attenuation_ex)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.0 * units.inch) * 9 * units.inch,
        intake_runner_cross_section_area: circle_area(1.0 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 12 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node w18 {
    alias output __out: engine;

    wires wires()

	label lean_angle(0 * units.deg)
	
    label bore(86.0 * units.mm)
    label stroke(86.0 * units.mm)
    label rod_length(165.0 * units.mm)
    label rod_mass(400 * units.g)
	label piston_mass(250 * units.g)
    label compression_height(20.0 * units.mm)
	label piston_dome(0.0 * units.cc)
	label deck_clearance(0.8 * units.mm)
    label crank_mass(45 * units.lb)
    label flywheel_mass(20 * units.lb)
    label flywheel_radius(6 * units.inch)
	
	// label position_x((stroke / 2 + rod_length + compression_height + deck_clearance) * -0.2)
	label position_x(0)

    engine engine(
        name: "Hypothetical W9",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 900 * units.rpm,
        redline: 7500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85),
        throttle_gamma: 1.0,
		simulation_frequency: 3800
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: position_x,
        position_y: 0.0,
        tdc: 170 * units.deg + lean_angle // +80 degrees
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 240 * units.deg)
    rod_journal rj2(angle: 120 * units.deg)
	
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

	intake intakeL(
		plenum_volume: 2.0 * units.L,
		plenum_cross_section_area: 150.0 * units.cm2,
		intake_flow_rate: k_carb(700.0),
		idle_flow_rate: k_carb(0.1),
		idle_throttle_plate_position: 0.998,
		throttle_gamma: 3.0,
		runner_flow_rate: k_carb(600.0),
		runner_length: 6.0 * units.inch,
		velocity_decay: 0.1
	)

	intake intakeC(
		plenum_volume: 2.0 * units.L,
		plenum_cross_section_area: 150.0 * units.cm2,
		intake_flow_rate: k_carb(700.0),
		idle_flow_rate: k_carb(0.1),
		idle_throttle_plate_position: 0.998,
		throttle_gamma: 3.0,
		runner_flow_rate: k_carb(600.0),
		runner_length: 6.0 * units.inch,
		velocity_decay: 0.1
	)

	intake intakeR(
		plenum_volume: 2.0 * units.L,
		plenum_cross_section_area: 150.0 * units.cm2,
		intake_flow_rate: k_carb(700.0),
		idle_flow_rate: k_carb(0.1),
		idle_throttle_plate_position: 0.998,
		throttle_gamma: 3.0,
		runner_flow_rate: k_carb(600.0),
		runner_length: 6.0 * units.inch,
		velocity_decay: 0.1
	)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1200.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(550.0),
        velocity_decay: 1.0, //0.5
        length: 500 * units.mm,
        volume: 10.0 * units.L
    )

    exhaust_system exhaust(
		es_params,
		audio_volume: 1.0 * 0.003,
		impulse_response: ir_lib.default_0
	)
	
	label pipe_length_1(4 * units.cm)
	label pipe_length_2(2 * units.cm)
	label pipe_length_3(0 * units.cm)
	
	label exhaust_stagger_L(6 * units.cm)
	label exhaust_stagger_C(0 * units.cm)
	label exhaust_stagger_R(3 * units.cm)
 
    cylinder_bank bL(bank_params, angle: 80 * units.deg + lean_angle, position_x: position_x) // L (first)
    bL
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger_L
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intakeL,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger_L
        )
 
    cylinder_bank bC(bank_params, angle: 0 * units.deg + lean_angle, position_x: position_x) // C (third)
    bC
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire4,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire5,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger_C
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intakeC,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger_C
        )
		
    cylinder_bank bR(bank_params, angle: -80 * units.deg + lean_angle, position_x: position_x) // R (second)
    bR
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire7,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire8,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_2 + exhaust_stagger_R
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire9,
            intake: intakeR,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger_R
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bC)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    w18_camshaft_builder camshaft(
	    in_lobe_profile: w18_lobe_profile_int(),
		ex_lobe_profile: w18_lobe_profile_exh()
	)

    bL.set_cylinder_head (
        w18_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,
            flip_display: true
        )
    )
    bC.set_cylinder_head (
        w18_head(
            intake_camshaft: camshaft.intake_cam_C,
            exhaust_camshaft: camshaft.exhaust_cam_C,
            flip_display: false
        )
    )
    bR.set_cylinder_head (
        w18_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000  * units.rpm, 15 * units.deg)
        .add_sample(1000  * units.rpm, 38 * units.deg)
        .add_sample(2000  * units.rpm, 40 * units.deg)
        .add_sample(3000  * units.rpm, 40 * units.deg)
        .add_sample(4000  * units.rpm, 40 * units.deg)
        .add_sample(5000  * units.rpm, 40 * units.deg)
        .add_sample(6000  * units.rpm, 40 * units.deg)
		.add_sample(7000  * units.rpm, 40 * units.deg)
		.add_sample(8000  * units.rpm, 40 * units.deg)

    engine.add_ignition_module(
        w18_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 8000 * units.rpm
        )
    )
}

// 2008 Lamborghini Murcielago LP640
public node lamborghini_murcielago_vehicle {
    alias output __out:
        vehicle(
            mass: 3671 * units.lb,
            drag_coefficient: 0.33,
            cross_sectional_area: 2.01 * (units.m * units.m),
            diff_ratio: 3.141,
            tire_radius: 328.93 * units.mm, // 335/30ZR18
            rolling_resistance: 600 * units.N
        );
}

public node lamborghini_murcielago_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1000 * units.lb_ft
        )
        .add_gear(3.091)
        .add_gear(2.105)
        .add_gear(1.565)
        .add_gear(1.241)
        .add_gear(1.065)
        .add_gear(0.939);
}

public node main {
    set_engine(w18())
    set_vehicle(lamborghini_murcielago_vehicle())
    set_transmission(lamborghini_murcielago_transmission())
}
