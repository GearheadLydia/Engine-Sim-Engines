import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 18436572

public node rover_v8_35_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 5750 * units.rpm; // absolute guess
	input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

// https://www.v8forum.co.uk/forum/viewtopic.php?t=14826
public node rover_v8_tvr_500_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 196 * units.deg, // 254 advertised
            gamma: 1.0,
            lift: 374 * units.thou,
            steps: 100
        );
}

public node rover_v8_tvr_500_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 196 * units.deg, // 254 advertised
            gamma: 1.0,
            lift: 374 * units.thou,
            steps: 100
        );
}

public node rover_v8_35_camshaft_builder {
    input in_lobe_profile: rover_v8_tvr_500_lobe_profile_int();
    input ex_lobe_profile: rover_v8_tvr_500_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 107.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.6 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

	label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
	label rot120(120 * units.deg)
    label rot360(360 * units.deg)

	// firing order: 18436572

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)
}

public node rover_v8_35_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 36.0 * units.cc; // "36 until about 1993, 28 afterward"; I had 33 for some variant, don't know where I got that
	
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0, 0)
        .add_flow_sample(50, 25)
        .add_flow_sample(100, 75)
        .add_flow_sample(150, 100)
        .add_flow_sample(200, 130)
        .add_flow_sample(250, 180)
        .add_flow_sample(300, 190)
        .add_flow_sample(350, 220)
        .add_flow_sample(400, 240)
        .add_flow_sample(450, 250)
        .add_flow_sample(500, 260)
        .add_flow_sample(550, 260)
        .add_flow_sample(600, 260)
        .add_flow_sample(650, 255)
        .add_flow_sample(700, 250)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0, 0)
        .add_flow_sample(50, 25)
        .add_flow_sample(100, 50)
        .add_flow_sample(150, 75)
        .add_flow_sample(200, 100)
        .add_flow_sample(250, 125)
        .add_flow_sample(300, 160)
        .add_flow_sample(350, 175)
        .add_flow_sample(400, 180)
        .add_flow_sample(450, 190)
        .add_flow_sample(500, 200)
        .add_flow_sample(550, 205)
        .add_flow_sample(600, 210)
        .add_flow_sample(650, 210)
        .add_flow_sample(700, 210)

    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.4 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.4 * units.inch),
        exhaust_runner_volume: circle_area(0.8 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.8 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node rover_v8_35_tvr_engine {
    alias output __out: engine;

    wires wires()
	
    label bore(3.500 * units.inch)
	label bore_spacing(4.240 * units.inch)
    label stroke(2.800 * units.inch)
    label rod_length(5.660 * units.inch)
    label rod_mass(600 * units.g)
    label compression_height(1.843 * units.inch)
	label piston_mass(550 * units.g)
	label piston_dome(-4.55 * units.cc) // for 9.35:1 compression ratio
	label deck_height((8.960 * units.inch) + (27 * units.thou))
    label crank_mass(50 * units.lb)
    label flywheel_mass(57 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    engine engine(
        name: "Rover V8",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 1200 * units.rpm,
        redline: 5500 * units.rpm, // not actually sure how high this revs
        throttle_gamma: 1.0
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 45 * units.deg // -45 degrees off vertical
    )

    rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: -90.0 * units.deg)
    rod_journal rj2(angle: 90.0 * units.deg)
    rod_journal rj3(angle: 180.0 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100 * units.cm2,
        intake_flow_rate: k_carb(500),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(350.0),
        runner_length: 3.0 * units.inch,
        velocity_decay: 0.1
    )
	
	label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(500.0),
        primary_tube_length: 12.0 * units.inch,
        primary_flow_rate: k_carb(450.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius),
		length: 650 * units.mm,
		volume: 650 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaustL(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
    exhaust_system exhaustR(es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.default_0)
	
	label pipe_length_1(3.0 * bore_spacing)
	label pipe_length_2(2.4 * bore_spacing)
	label pipe_length_3(0.6 * bore_spacing)
	label pipe_length_4(0.0 * bore_spacing)
	
	label exhaust_stagger(50 * units.mm)

    cylinder_bank b1(bank_params, angle: 45.0 * units.deg) // L (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_4
        )

    cylinder_bank b0(bank_params, angle: -45 * units.deg) // R (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_1 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_2 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_3 + exhaust_stagger
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_4 + exhaust_stagger
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    rover_v8_35_camshaft_builder camshaft(
		in_lobe_profile: rover_v8_tvr_500_lobe_profile_int(),
		ex_lobe_profile: rover_v8_tvr_500_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        rover_v8_35_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: false
        )
    )
    b1.set_cylinder_head (
        rover_v8_35_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 37 * units.deg)
        .add_sample(1000 * units.rpm, 47 * units.deg)
        .add_sample(2000 * units.rpm, 47 * units.deg)
        .add_sample(3000 * units.rpm, 47 * units.deg)
        .add_sample(4000 * units.rpm, 47 * units.deg)
        .add_sample(5000 * units.rpm, 47 * units.deg)
        .add_sample(6000 * units.rpm, 47 * units.deg)
        .add_sample(7000 * units.rpm, 47 * units.deg)

    engine.add_ignition_module(
        rover_v8_35_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// https://www.tvr-car-club.co.uk/uploads/9/5/1/5/95156928/350_280_200ownershandbookforweb.pdf
// 1985 TVR Tasmin 350i
public node tvr_tasmin_350i_vehicle {
    alias output __out:
        vehicle(
            mass: 1021 * units.kg,
            drag_coefficient: 0.37, // A-C
            cross_sectional_area: 1.73 * (units.m * units.m), // A-C
            diff_ratio: 3.54,
            tire_radius: 326.5 * units.mm, // 205/60VR16
            rolling_resistance: 500 * units.N
        );
}

public node tvr_tasmin_350i_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(3.32)
        .add_gear(2.09)
        .add_gear(1.40)
        .add_gear(1.00)
        .add_gear(0.792);
}

public node main {
    set_engine(rover_v8_35_tvr_engine())
    set_vehicle(tvr_tasmin_350i_vehicle())
    set_transmission(tvr_tasmin_350i_transmission())
}

main()