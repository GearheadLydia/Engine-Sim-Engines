import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

//firing order: 1 7 5 11 3 9 6 12 2 8 4 10
// normalized:  1 2 9 10 5 6 11 12 3 4 7 8

public node bmw_m70_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6200 * units.rpm;
    input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, (0.0/12.0) * cycle)
            .connect_wire(wires.wire07, (1.0/12.0) * cycle)
            .connect_wire(wires.wire05, (2.0/12.0) * cycle)
            .connect_wire(wires.wire11, (3.0/12.0) * cycle)
            .connect_wire(wires.wire03, (4.0/12.0) * cycle)
            .connect_wire(wires.wire09, (5.0/12.0) * cycle)
            .connect_wire(wires.wire06, (6.0/12.0) * cycle)
            .connect_wire(wires.wire12, (7.0/12.0) * cycle)
            .connect_wire(wires.wire02, (8.0/12.0) * cycle)
            .connect_wire(wires.wire08, (9.0/12.0) * cycle)
            .connect_wire(wires.wire04, (10.0/12.0) * cycle)
            .connect_wire(wires.wire10, (11.0/12.0) * cycle);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

public node bmw_m70_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 246 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node bmw_m70_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 246 * units.deg,
            gamma: 1.0,
            lift: 10.5 * units.mm,
            steps: 100
        );
}

public node bmw_m70_camshaft_builder {
    input in_lobe_profile: bmw_m70_lobe_profile_int();
    input ex_lobe_profile: bmw_m70_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 112.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 10.0 * units.deg;
    input base_radius: 16.0 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 1 * rot60) // #7
        .add_lobe(rot360 + intake_lobe_center + 9 * rot60) // #8
        .add_lobe(rot360 + intake_lobe_center + 5 * rot60) // #9
        .add_lobe(rot360 + intake_lobe_center + 11 * rot60) // #10
        .add_lobe(rot360 + intake_lobe_center + 3 * rot60) // #11
        .add_lobe(rot360 + intake_lobe_center + 7 * rot60) // #12

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 0 * rot60) // #1
        .add_lobe(rot360 + intake_lobe_center + 8 * rot60) // #2
        .add_lobe(rot360 + intake_lobe_center + 4 * rot60) // #3
        .add_lobe(rot360 + intake_lobe_center + 10 * rot60) // #4
        .add_lobe(rot360 + intake_lobe_center + 2 * rot60) // #5
        .add_lobe(rot360 + intake_lobe_center + 6 * rot60) // #6

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot60) // #7
        .add_lobe(rot360 - exhaust_lobe_center + 9 * rot60) // #8
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot60) // #9
        .add_lobe(rot360 - exhaust_lobe_center + 11 * rot60) // #10
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot60) // #11
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot60) // #12

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot60) // #1
        .add_lobe(rot360 - exhaust_lobe_center + 8 * rot60) // #2
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot60) // #3
        .add_lobe(rot360 - exhaust_lobe_center + 10 * rot60) // $4
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot60) // #5
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot60) // #6
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node bmw_m70_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 35.0 * units.cc;
    input flip_display: false;
    
    input flow_attenuation: 0.9;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 65 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 155 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 255 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 75 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 105 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 164 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 168 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 176 * flow_attenuation)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.05 * units.inch) * 6 * units.inch,
        intake_runner_cross_section_area: circle_area(1.05 * units.inch),
        exhaust_runner_volume: circle_area(0.7 * units.inch) * 5 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.7 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

// deck height for M70: (75/2)+135+34.15+clearance
// deck height for S52: 210mm

public node bmw_m70b50_engine {
    alias output __out: engine;

    label bore(84.0 * units.mm)
    label bore_spacing(91.0 * units.mm)
    label stroke(75.0 * units.mm)
    label rod_length(135.0 * units.mm)
    label rod_mass(550 * units.g)
    label piston_mass(450 * units.g)
    label compression_height(34.15 * units.mm)
    label piston_dome(10.0 * units.cc)
    label deck_height((210.0 + 1.65) * units.mm)
    label crank_mass(60 * units.lb)
    label flywheel_mass(40 * units.lb)
    label flywheel_radius(6 * units.inch)

    engine engine(
        name: "BMW M70B50",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1500 * units.rpm,
        redline: 6000 * units.rpm,
        throttle_gamma: 1.0,
        simulation_frequency: 6000,
        hf_gain: 0.01,
        jitter: 0.5
    )

    wires wires()

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 5 * units.kg, radius: 6.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

    rod_journal rj0(angle:  0  * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle:  0  * units.deg)
    
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intakeL(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 50.0 * units.cm2,
        intake_flow_rate: k_carb(450.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.997,
        throttle_gamma: 0.8,
        runner_flow_rate: k_carb(350.0),
        runner_length: 2.0 * units.inch,
        velocity_decay: 0.1
    )

    intake intakeR(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 50.0 * units.cm2,
        intake_flow_rate: k_carb(450.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.997,
        throttle_gamma: 0.8,
        runner_flow_rate: k_carb(350.0),
        runner_length: 2.0 * units.inch,
        velocity_decay: 0.1
    )
    
    label exhaust_radius((4.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(800.0),
        primary_tube_length: 9.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius) * 2,
        length: 2500 * units.mm,
        volume: 2500 * units.mm * circle_area(exhaust_radius) * 2
    )

    exhaust_system exhaust(
        es_params,
        audio_volume: 1.0 * 0.1,
        impulse_response: ir_lib.default_0
    )
    
    label pipe_length_1(bore_spacing * 0.8)
    label pipe_length_2(bore_spacing * 0.4)
    label pipe_length_3(bore_spacing * 0.0)
    label pipe_length_4(bore_spacing * 0.5)
    label pipe_length_5(bore_spacing * 0.9)
    label pipe_length_6(bore_spacing * 1.3)
    
    label pipe_length_stagger(30 * units.mm)
 
    cylinder_bank b0(bank_params, angle: -30 * units.deg) // R (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire07,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_1 + pipe_length_stagger,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire08,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_2 + pipe_length_stagger,
            sound_attenuation: 0.4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire09,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_3 + pipe_length_stagger,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire10,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_4 + pipe_length_stagger,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire11,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_5 + pipe_length_stagger,
            sound_attenuation: 0.4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire12,
            intake: intakeL,
            exhaust_system: exhaust,
            primary_length: pipe_length_6 + pipe_length_stagger,
            sound_attenuation: 1.0
        )
        
    cylinder_bank b1(bank_params, angle: 30 * units.deg) // L (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire01,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_1,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire02,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_2,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire03,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_3,
            sound_attenuation: 0.4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire04,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_4,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire05,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_5,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire06,
            intake: intakeR,
            exhaust_system: exhaust,
            primary_length: pipe_length_6,
            sound_attenuation: 0.4
        )

    engine
        .add_cylinder_bank(b1)
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    bmw_m70_camshaft_builder camshaft(
        in_lobe_profile: bmw_m70_lobe_profile_int(),
        ex_lobe_profile: bmw_m70_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        bmw_m70_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    b1.set_cylinder_head (
        bmw_m70_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 25 * units.deg)
        .add_sample(1000 * units.rpm, 70 * units.deg)
        .add_sample(2000 * units.rpm, 80 * units.deg)
        .add_sample(3000 * units.rpm, 78 * units.deg)
        .add_sample(4000 * units.rpm, 72 * units.deg)
        .add_sample(5000 * units.rpm, 66 * units.deg)
        .add_sample(6000 * units.rpm, 62 * units.deg)
        .add_sample(7000 * units.rpm, 60 * units.deg)

    engine.add_ignition_module(
        bmw_m70_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// 1993 BMW 850Ci (E31)
public node bmw_850ci_e31_vehicle {
    alias output __out:
        vehicle(
            mass: 1870 * units.kg,
            drag_coefficient: 0.29,
            cross_sectional_area: 2.06 * (units.m * units.m),
            diff_ratio: 2.64,
            tire_radius: 344 * units.mm, // 235/60ZR16
            rolling_resistance: 450 * units.N
        );
}

public node getrag_560g_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1200 * units.lb_ft
        )
        .add_gear(4.25)
        .add_gear(2.53)
        .add_gear(1.68)
        .add_gear(1.24)
        .add_gear(1.00)
        .add_gear(0.83);
}

public node main {
    set_engine(bmw_m70b50_engine())
    set_vehicle(bmw_850ci_e31_vehicle())
    set_transmission(getrag_560g_transmission())
}

main()