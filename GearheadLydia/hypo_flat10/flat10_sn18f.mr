import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order: 1-8-3-10-7-6-9-2-5-4

public node hypo_flat10_sn18f_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 9650 * units.rpm;
	input limiter_duration: 0.05;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire01, (0.0 / 10.0) * cycle)
            .connect_wire(wires.wire08, (1.0 / 10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire03, (2.0 / 10.0) * cycle)
            .connect_wire(wires.wire10, (3.0 / 10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire07, (4.0 / 10.0) * cycle)
            .connect_wire(wires.wire06, (5.0 / 10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire09, (6.0 / 10.0) * cycle)
            .connect_wire(wires.wire02, (7.0 / 10.0) * cycle + 18 * units.deg)
            .connect_wire(wires.wire05, (8.0 / 10.0) * cycle)
            .connect_wire(wires.wire04, (9.0 / 10.0) * cycle + 18 * units.deg);
}

private node wires {
    output wire01: ignition_wire();
    output wire02: ignition_wire();
    output wire03: ignition_wire();
    output wire04: ignition_wire();
    output wire05: ignition_wire();
    output wire06: ignition_wire();
    output wire07: ignition_wire();
    output wire08: ignition_wire();
    output wire09: ignition_wire();
    output wire10: ignition_wire();
}

public node hypo_flat10_sn18f_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 245 * units.deg,
            gamma: 1.5,
            lift: 11.0 * units.mm,
            steps: 100
        );
}

public node hypo_flat10_sn18f_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.5,
            lift: 10.0 * units.mm,
            steps: 100
        );
}

public node hypo_flat10_sn18f_camshaft_builder {
    input in_lobe_profile: hypo_flat10_sn18f_lobe_profile_int();
	input ex_lobe_profile: hypo_flat10_sn18f_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: 105.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot18(18 * units.deg)
    label rot30(30 * units.deg)
	label rot36(36 * units.deg)
	label rot60(60 * units.deg)
	label rot72(72 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)
	
	// firing order: 1-8-3-10-7-6-9-2-5-4

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot72) // # 1
        .add_lobe(rot360 + intake_lobe_center + 2 * rot72) // # 3
        .add_lobe(rot360 + intake_lobe_center + 8 * rot72) // # 5
        .add_lobe(rot360 + intake_lobe_center + 4 * rot72) // # 7
        .add_lobe(rot360 + intake_lobe_center + 6 * rot72) // # 9

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 7 * rot72 + rot18) // # 2
        .add_lobe(rot360 + intake_lobe_center + 9 * rot72 + rot18) // # 4
        .add_lobe(rot360 + intake_lobe_center + 5 * rot72 + rot18) // # 6
        .add_lobe(rot360 + intake_lobe_center + 1 * rot72 + rot18) // # 8
        .add_lobe(rot360 + intake_lobe_center + 3 * rot72 + rot18) // # 10

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot72) // # 1
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot72) // # 3
        .add_lobe(rot360 - exhaust_lobe_center + 8 * rot72) // # 5
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot72) // # 7
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot72) // # 9

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot72 + rot18) // # 2
        .add_lobe(rot360 - exhaust_lobe_center + 9 * rot72 + rot18) // # 4
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot72 + rot18) // # 6
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot72 + rot18) // # 8
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot72 + rot18) // # 10
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node hypo_flat10_sn18f_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 51.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.1;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 195 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 270 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 30 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 115 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 100.0 * units.cc,
        intake_runner_cross_section_area: 2 * 12.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}


public node flat10_sn18f {
    alias output __out: engine;

    wires wires()

    label bore(86.0 * units.mm)
    label stroke(68.8 * units.mm)
    label rod_length(115 * units.mm)
    label rod_mass(350 * units.g) // guesstimate based on aftermarket chromoly rods - stock rods are titanium
	label piston_mass(380 * units.g)
    label compression_height(30 * units.mm)
	label piston_dome(0 * units.cc)
	label deck_clearance(1.0 * units.mm)
    label crank_mass(35 * units.lb)
    label flywheel_mass(15 * units.lb)
    label flywheel_radius(5 * units.inch)

    engine engine(
        name: "H10 Type F (spl. j. -18)",
        starter_torque: 300 * units.lb_ft,
		starter_speed: 600 * units.rpm,
        redline: 9500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85),
        throttle_gamma: 2.0,
		simulation_frequency: 7500
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 0.0 * units.deg
    )

    rod_journal rj01(angle:  0  * units.deg)
	rod_journal rj02(angle:  0  * units.deg - (18 * units.deg))
	rod_journal rj03(angle: 144 * units.deg)
	rod_journal rj04(angle: 144 * units.deg - (18 * units.deg))
	rod_journal rj05(angle: 216 * units.deg)
	rod_journal rj06(angle: 216 * units.deg - (18 * units.deg))
	rod_journal rj07(angle: 288 * units.deg)
	rod_journal rj08(angle: 288 * units.deg - (18 * units.deg))
    rod_journal rj09(angle:  72 * units.deg)
	rod_journal rj10(angle:  72 * units.deg - (18 * units.deg))

    c0
        .add_rod_journal(rj01)
        .add_rod_journal(rj02)
        .add_rod_journal(rj03)
        .add_rod_journal(rj04)
        .add_rod_journal(rj05)
        .add_rod_journal(rj06)
        .add_rod_journal(rj07)
        .add_rod_journal(rj08)
        .add_rod_journal(rj09)
        .add_rod_journal(rj10)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    performer_rpm_intake intake(
        carburetor_cfm: 650.0,
        idle_flow_rate_cfm: 0.001,
        idle_throttle_plate_position: 0.996
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(800.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(250.0),
        velocity_decay: 0.4, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system exhaustL(
		es_params,
        length: 495 * units.mm,
		audio_volume: 1.0 * 0.01,
		impulse_response: ir_lib.default_0
	)
    exhaust_system exhaustR(
		es_params,
        length: 500 * units.mm,
		audio_volume: 1.0 * 0.01,
		impulse_response: ir_lib.default_0
	)
	
	label pipe_length_1(10.0 * units.inch)
	label pipe_length_2(9.5 * units.inch)
	label pipe_length_3(8.0 * units.inch)
	label pipe_length_4(7.5 * units.inch)
	label pipe_length_5(7.0 * units.inch)

    cylinder_bank b0(bank_params, angle: -90.0 * units.deg) // R (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj01,
            ignition_wire: wires.wire01,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj03,
            ignition_wire: wires.wire03,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj05,
            ignition_wire: wires.wire05,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj07,
            ignition_wire: wires.wire07,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj09,
            ignition_wire: wires.wire09,
            intake: intake,
            exhaust_system: exhaustR,
			primary_length: pipe_length_5
        )

    cylinder_bank b1(bank_params, angle: 90.0 * units.deg) // L (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj02,
            ignition_wire: wires.wire02,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj04,
            ignition_wire: wires.wire04,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj06,
            ignition_wire: wires.wire06,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj08,
            ignition_wire: wires.wire08,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj10,
            ignition_wire: wires.wire10,
            intake: intake,
            exhaust_system: exhaustL,
			primary_length: pipe_length_5
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    hypo_flat10_sn18f_camshaft_builder camshaft(
	    in_lobe_profile: hypo_flat10_sn18f_lobe_profile_int(),
		ex_lobe_profile: hypo_flat10_sn18f_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        hypo_flat10_sn18f_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
    b1.set_cylinder_head (
        hypo_flat10_sn18f_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 30 * units.deg)
        .add_sample(1000 * units.rpm, 40 * units.deg)
        .add_sample(2000 * units.rpm, 45 * units.deg)
        .add_sample(3000 * units.rpm, 49 * units.deg)
        .add_sample(4000 * units.rpm, 52 * units.deg)
        .add_sample(5000 * units.rpm, 56 * units.deg)
        .add_sample(6000 * units.rpm, 62 * units.deg)
		.add_sample(7000 * units.rpm, 68 * units.deg)
		.add_sample(8000 * units.rpm, 70 * units.deg)
		.add_sample(9000 * units.rpm, 72 * units.deg)

    engine.add_ignition_module(
        hypo_flat10_sn18f_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 9650 * units.rpm
        )
    )
}

// 2010 Ferrari 458 Italia
public node ferrari_458_italia_vehicle {
    alias output __out:
        vehicle(
            mass: 3285 * units.lb,
            drag_coefficient: 0.33,
            cross_sectional_area: 1.95 * (units.m * units.m),
            diff_ratio: 4.44,
            tire_radius: 356.87 * units.mm, // 295/35ZR20
            rolling_resistance: 550 * units.N
        );
}

public node ferrari_458_italia_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 1500 * units.lb_ft
        )
        .add_gear(3.08)
        .add_gear(2.19)
        .add_gear(1.63)
        .add_gear(1.29)
        .add_gear(1.03)
        .add_gear(0.84)
        .add_gear(0.69);
}

public node main {
    set_engine(flat10_sn18f())
    set_vehicle(ferrari_458_italia_vehicle())
    set_transmission(ferrari_458_italia_transmission())
}
