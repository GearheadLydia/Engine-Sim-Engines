import "engine_sim.mr"

// mostly for sound at this point; power and such is inaccurate

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

// firing order is a guess

public node lotus_type_918_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7050 * units.rpm;
    input limiter_duration: 0.09;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (7.0 / 8.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node lotus_type_918_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 250 * units.deg,
            gamma: 1.0,
            lift: 9.5 * units.mm,
            steps: 100
        );
}

public node lotus_type_918_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 245 * units.deg,
            gamma: 1.0,
            lift: 9.0 * units.mm,
            steps: 100
        );
}

public node lotus_type_918_camshaft_builder {
    input in_lobe_profile: lotus_type_918_lobe_profile_int();
    input ex_lobe_profile: lotus_type_918_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 110.0 * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 5.0 * units.deg;
    input base_radius: 15 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot90(90 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 5 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 7 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node lotus_type_918_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 51.0 * units.cc; // unknown
    input flip_display: false;
    
    input flow_attenuation_in: 0.9;
    input flow_attenuation_ex: 0.9;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1.0 * units.mm)
    intake_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_in)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_in)
        .add_flow_sample( 2 * lift_scale,  60 * flow_attenuation_in)
        .add_flow_sample( 3 * lift_scale,  90 * flow_attenuation_in)
        .add_flow_sample( 4 * lift_scale, 125 * flow_attenuation_in)
        .add_flow_sample( 5 * lift_scale, 160 * flow_attenuation_in)
        .add_flow_sample( 6 * lift_scale, 195 * flow_attenuation_in)
        .add_flow_sample( 7 * lift_scale, 210 * flow_attenuation_in)
        .add_flow_sample( 8 * lift_scale, 235 * flow_attenuation_in)
        .add_flow_sample( 9 * lift_scale, 270 * flow_attenuation_in)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation_in)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation_in)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(13 * lift_scale, 335 * flow_attenuation_in)
        .add_flow_sample(14 * lift_scale, 335 * flow_attenuation_in)

    function exhaust_flow(1.0 * units.mm)
    exhaust_flow
        .add_flow_sample( 0 * lift_scale,   0 * flow_attenuation_ex)
        .add_flow_sample( 1 * lift_scale,  30 * flow_attenuation_ex)
        .add_flow_sample( 2 * lift_scale,  55 * flow_attenuation_ex)
        .add_flow_sample( 3 * lift_scale,  85 * flow_attenuation_ex)
        .add_flow_sample( 4 * lift_scale, 115 * flow_attenuation_ex)
        .add_flow_sample( 5 * lift_scale, 140 * flow_attenuation_ex)
        .add_flow_sample( 6 * lift_scale, 160 * flow_attenuation_ex)
        .add_flow_sample( 7 * lift_scale, 180 * flow_attenuation_ex)
        .add_flow_sample( 8 * lift_scale, 205 * flow_attenuation_ex)
        .add_flow_sample( 9 * lift_scale, 220 * flow_attenuation_ex)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation_ex)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation_ex)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(13 * lift_scale, 280 * flow_attenuation_ex)
        .add_flow_sample(14 * lift_scale, 280 * flow_attenuation_ex)

    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(0.9 * units.inch) * 5 * units.inch,
        intake_runner_cross_section_area: circle_area(0.9 * units.inch),
        exhaust_runner_volume: circle_area(0.6 * units.inch) * 5 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.6 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node lotus_type_918_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Lotus Type 918",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: 7000 * units.rpm,
        throttle_gamma: 1.0,
        simulation_frequency: 9000
    )

    // almost everything is a guess
    label bore(83.0 * units.mm)
    label bore_spacing(107.8 * units.mm) // Rover V8?
    label stroke(81.0 * units.mm)
    label rod_length(144.0 * units.mm)
    label rod_mass(500 * units.g)
    label piston_mass(400 * units.g)
    label compression_height(25.00 * units.mm)
    label piston_dome(5.00 * units.cc)
    label deck_clearance(0.5 * units.mm)
    label crank_mass(41 * units.lb)
    label flywheel_mass(12 * 2 * units.lb)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 20 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135.0 * units.deg // 45 degrees
    )

    rod_journal rj1(angle:  0  * units.deg)
    rod_journal rj2(angle: 180 * units.deg)
    rod_journal rj3(angle: 180 * units.deg)
    rod_journal rj4(angle:  0  * units.deg)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)

    // piston specs are guesses
    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height + deck_clearance
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(800.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9975,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(150.0),
        runner_length: 3.5 * units.inch,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(700.0),
        primary_tube_length: 8.0 * units.inch,
        primary_flow_rate: k_carb(150.0),
        velocity_decay: 1.0, //0.5
        volume: 2.0 * units.L,
        length: 500 * units.mm
    )

    exhaust_system exhaustL(es_params, audio_volume: 1.0 * 0.005, impulse_response: ir_lib.default_0)
    exhaust_system exhaustR(es_params, audio_volume: 1.0 * 0.005, impulse_response: ir_lib.default_0)
    
    label pipe_length_1(bore_spacing * 1.5)
    label pipe_length_2(bore_spacing * 1.0)
    label pipe_length_3(bore_spacing * 0.5)
    label pipe_length_4(bore_spacing * 0.0)
    
    label exhaust_stagger(60 * units.mm)
    
    label exh_vol_L(1.0)
    label exh_vol_R(1.0)

    cylinder_bank b0(bank_params, angle: 45.0 * units.deg) // L (first)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_1 + exhaust_stagger,
            sound_attenuation: exh_vol_L
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_2 + exhaust_stagger,
            sound_attenuation: exh_vol_L
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_3 + exhaust_stagger,
            sound_attenuation: exh_vol_L
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaustL,
            primary_length: pipe_length_4 + exhaust_stagger,
            sound_attenuation: exh_vol_L
        )

    cylinder_bank b1(bank_params, angle: -45 * units.deg) // R (second)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_1,
            sound_attenuation: exh_vol_R
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_2,
            sound_attenuation: exh_vol_R
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire7,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_3,
            sound_attenuation: exh_vol_R
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire8,
            intake: intake,
            exhaust_system: exhaustR,
            primary_length: pipe_length_4,
            sound_attenuation: exh_vol_R
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    lotus_type_918_camshaft_builder camshaft(
        in_lobe_profile: lotus_type_918_lobe_profile_int(),
        ex_lobe_profile: lotus_type_918_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        lotus_type_918_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        lotus_type_918_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 20 * units.deg)
        .add_sample(1000 * units.rpm, 50 * units.deg)
        .add_sample(2000 * units.rpm, 80 * units.deg)
        .add_sample(3000 * units.rpm, 80 * units.deg)
        .add_sample(4000 * units.rpm, 80 * units.deg)
        .add_sample(5000 * units.rpm, 80 * units.deg)
        .add_sample(6000 * units.rpm, 80 * units.deg)
        .add_sample(7000 * units.rpm, 80 * units.deg)
        .add_sample(8000 * units.rpm, 80 * units.deg)
        .add_sample(9000 * units.rpm, 80 * units.deg)

    engine.add_ignition_module(
        lotus_type_918_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 1996 Lotus Esprit V8 (S4 X180)
public node lotus_esprit_v8_x180_vehicle {
    alias output __out:
        vehicle(
            mass: 3042 * units.lb,
            drag_coefficient: 0.36,
            cross_sectional_area: 2.0 * (units.m * units.m), // guesstimate
            diff_ratio: 3.89,
            tire_radius: 329 * units.mm, // 285/35ZR18
            rolling_resistance: 600 * units.N
        );
}

public node renault_un1_027_transaxle {
    alias output __out:
        transmission(
            max_clutch_torque: 700 * units.lb_ft
        )
        .add_gear(3.364)
        .add_gear(2.059)
        .add_gear(1.381)
        .add_gear(1.037)
        .add_gear(0.760); // 0.8205 in non-V8 Esprit
}

public node main {
    set_engine(lotus_type_918_engine())
    set_vehicle(lotus_esprit_v8_x180_vehicle())
    set_transmission(renault_un1_027_transaxle())
}

main()