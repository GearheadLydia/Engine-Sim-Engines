import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node volkswagen_vr6_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7200 * units.rpm;
	input limiter_duration: 0.05;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
			.connect_wire(wires.wire3, (2.0/6.0) * cycle)
			.connect_wire(wires.wire6, (3.0/6.0) * cycle)
			.connect_wire(wires.wire2, (4.0/6.0) * cycle)
			.connect_wire(wires.wire4, (5.0/6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

// .........................................Intake... ..........Exhaust
// Clearance [cl].....................0.00mm...........0.00mm
// Duration [0.1mm+cl].............272°................258°
// Duration [1.0mm+cl].............211°................207°
// Valve Lift [cl=0]..................9.85mm...........9.90mm
// Cam Lift............................4.95mm...........4 .95mm
// Peak Angle..........................110°............... .110°
// Timing [1.00mm+cl]...........-5/36°..............36/9°
// Lift @ TDC.........................0.65mm...........0.45mm


public node volkswagen_vr6_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 272 * units.deg,
            gamma: 1.0,
            lift: 9.85 * units.mm,
            steps: 100
        );
}

public node volkswagen_vr6_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 258 * units.deg,
            gamma: 1.0,
            lift: 9.90 * units.mm,
            steps: 100
        );
}

public node volkswagen_vr6_camshaft_builder {
    input in_lobe_profile: volkswagen_vr6_lobe_profile_int();
	input ex_lobe_profile: volkswagen_vr6_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 86.5 * units.deg;
    input intake_lobe_center: 110.0  * units.deg;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 17 * units.mm;

    output intake_cam_L: _intake_cam_L;
    output exhaust_cam_L: _exhaust_cam_L;
    output intake_cam_R: _intake_cam_R;
    output exhaust_cam_R: _exhaust_cam_R;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_L(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_L(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_R(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_R(params, lobe_profile: exhaust_lobe_profile)


    label rot30(30 * units.deg)
	label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_L
        .add_lobe(rot360 + intake_lobe_center + (0 * rot120))
		.add_lobe(rot360 + intake_lobe_center + (2 * rot120))
		.add_lobe(rot360 + intake_lobe_center + (1 * rot120))

    _intake_cam_R
        .add_lobe(rot360 + intake_lobe_center + (4 * rot120))
		.add_lobe(rot360 + intake_lobe_center + (5 * rot120))
		.add_lobe(rot360 + intake_lobe_center + (3 * rot120))

	_exhaust_cam_L
        .add_lobe(rot360 - exhaust_lobe_center + (0 * rot120))
		.add_lobe(rot360 - exhaust_lobe_center + (2 * rot120))
		.add_lobe(rot360 - exhaust_lobe_center + (1 * rot120))

	_exhaust_cam_R
        .add_lobe(rot360 - exhaust_lobe_center + (4 * rot120))
		.add_lobe(rot360 - exhaust_lobe_center + (5 * rot120))
		.add_lobe(rot360 - exhaust_lobe_center + (3 * rot120))
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node volkswagen_vr6_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 45.0 * units.cc;
	input intake_runner_volume: circle_area(1.1 * units.inch) * 2 * units.inch;
	input intake_runner_cross_section_area: circle_area(1.1 * units.inch);
	input exhaust_runner_volume: circle_area(0.85 * units.inch) * 2 * units.inch;
	input exhaust_runner_cross_section_area: circle_area(0.85 * units.inch);
    input flip_display: false;
	
	input flow_attenuation: 0.9;
    input lift_scale: 50.0;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0,    0  * flow_attenuation)
        .add_flow_sample(50,   25 * flow_attenuation)
        .add_flow_sample(100,  76 * flow_attenuation)
        .add_flow_sample(150, 100 * flow_attenuation)
        .add_flow_sample(200, 146 * flow_attenuation)
        .add_flow_sample(250, 175 * flow_attenuation)
        .add_flow_sample(300, 212 * flow_attenuation)
        .add_flow_sample(350, 230 * flow_attenuation)
        .add_flow_sample(400, 255 * flow_attenuation)
        .add_flow_sample(450, 275 * flow_attenuation)
        .add_flow_sample(500, 294 * flow_attenuation)
        .add_flow_sample(550, 300 * flow_attenuation)
        .add_flow_sample(600, 314 * flow_attenuation)
        .add_flow_sample(650, 314 * flow_attenuation)
        .add_flow_sample(700, 314 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0,    0  * flow_attenuation)
        .add_flow_sample(50,   25 * flow_attenuation)
        .add_flow_sample(100,  70 * flow_attenuation)
        .add_flow_sample(150, 100 * flow_attenuation)
        .add_flow_sample(200, 132 * flow_attenuation)
        .add_flow_sample(250, 140 * flow_attenuation)
        .add_flow_sample(300, 156 * flow_attenuation)
        .add_flow_sample(350, 170 * flow_attenuation)
        .add_flow_sample(400, 181 * flow_attenuation)
        .add_flow_sample(450, 191 * flow_attenuation)
        .add_flow_sample(500, 207 * flow_attenuation)
        .add_flow_sample(550, 214 * flow_attenuation)
        .add_flow_sample(600, 228 * flow_attenuation)
        .add_flow_sample(650, 228 * flow_attenuation)
        .add_flow_sample(700, 228 * flow_attenuation)


		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node vr6_r36 {
    alias output __out: engine;

    wires wires()
	
	label lean_angle(0.0 * units.deg)
	label bank_angle(10.5 * units.deg / 2)

    label bore(89.0 * units.mm)
    label stroke(96.4 * units.mm)
    label rod_length(164.0 * units.mm)
    label rod_mass(434 * units.g)
	label piston_mass(400 * units.g)
    label compression_height(31.1 * units.mm)
	label piston_dome(10.0 * units.cc)
	label deck_height(248.00 * units.mm)
    label crank_mass(55 * units.lb)
    label flywheel_mass(25 * units.lb)
    label flywheel_radius(6 * units.inch)

    engine engine(
        name: "Volkswagen VR6 R36",
        starter_torque: 150 * units.lb_ft,
		starter_speed: 1200 * units.rpm,
        redline: 6800 * units.rpm,
        throttle_gamma: 1.0
    )

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg + lean_angle
    )

    rod_journal rj0(angle:  0  * units.deg + bank_angle)
    rod_journal rj1(angle: 120 * units.deg - bank_angle)
    rod_journal rj2(angle: 240 * units.deg + bank_angle)
    rod_journal rj3(angle: 240 * units.deg - bank_angle)
    rod_journal rj4(angle: 120 * units.deg + bank_angle)
    rod_journal rj5(angle:  0  * units.deg - bank_angle)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)


    piston_parameters piston_params(
        mass: piston_mass,
        //blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(500.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.995,
        throttle_gamma: 1.0,
        runner_flow_rate: k_carb(300.0),
        runner_length: 9.0 * units.inch,
        velocity_decay: 0.1
    )
	
	label exhaust_radius((3.5 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(500.0),
        primary_tube_length: 22.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
		collector_cross_section_area: circle_area(exhaust_radius),
		length: 2900 * units.mm,
		volume: 2900 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(es_params, audio_volume: 1.0 * 0.05, impulse_response: ir_lib.default_0)
	
	label position_x_offset(deck_height * 0.09237058744656158234409132412227)  // sin(7.5)
	label position_y_offset(deck_height * -0.00427530181541789787915499833799) // cos(7.5)-1
	
	label pipe_length_1(70 * units.mm)
	label pipe_length_2(40 * units.mm)
	label pipe_length_3(10 * units.mm)
	label pipe_length_4(00 * units.mm)
	label pipe_length_5(30 * units.mm)
	label pipe_length_6(60 * units.mm)
	label exhaust_stagger(50 * units.mm)

	cylinder_bank bL(bank_params, angle: bank_angle + lean_angle) // L (first) | angle: 7.5
    //cylinder_bank bL(bank_params, angle: 0, position_x: -position_x_offset, position_y: position_y_offset) // L (first) | angle: -7.5
    bL
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            ignition_wire: wires.wire1,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_1 + exhaust_stagger,
			sound_attenuation: 0.56
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire3,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_3 + exhaust_stagger,
			sound_attenuation: 0.7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire5,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_5 + exhaust_stagger,
			sound_attenuation: 0.63
        )

	cylinder_bank bR(bank_params, angle: -bank_angle + lean_angle) // R (second)
    //cylinder_bank bR(bank_params, angle: 0, position_x: position_x_offset, position_y: position_y_offset) // R (second) | angle: 7.5
    bR
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire2,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_2,
			sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire4,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_4,
			sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire6,
            intake: intake,
            exhaust_system: exhaust,
			primary_length: pipe_length_6,
			sound_attenuation: 0.8
        )

    engine
        .add_cylinder_bank(bL)
        .add_cylinder_bank(bR)

    engine.add_crankshaft(c0)

    volkswagen_vr6_camshaft_builder camshaft(
	    in_lobe_profile: volkswagen_vr6_lobe_profile_int(),
		ex_lobe_profile: volkswagen_vr6_lobe_profile_exh()
	)

    bL.set_cylinder_head (
        volkswagen_vr6_head(
            intake_camshaft: camshaft.intake_cam_L,
            exhaust_camshaft: camshaft.exhaust_cam_L,			
			intake_runner_volume: circle_area(1.0 * units.inch) * 5 * units.inch,
			intake_runner_cross_section_area: circle_area(1.0 * units.inch),
			exhaust_runner_volume: circle_area(0.85 * units.inch) * 2 * units.inch,
			exhaust_runner_cross_section_area: circle_area(0.85 * units.inch),
            flip_display: true
        )
    )
    bR.set_cylinder_head (
        volkswagen_vr6_head(
            intake_camshaft: camshaft.intake_cam_R,
            exhaust_camshaft: camshaft.exhaust_cam_R,
			intake_runner_volume: circle_area(1.0 * units.inch) * 2 * units.inch,
			intake_runner_cross_section_area: circle_area(1.0 * units.inch),
			exhaust_runner_volume: circle_area(0.85 * units.inch) * 5 * units.inch,
			exhaust_runner_cross_section_area: circle_area(0.85 * units.inch),
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 20 * units.deg)
        .add_sample(1000 * units.rpm, 40 * units.deg)
        .add_sample(2000 * units.rpm, 49 * units.deg)
        .add_sample(3000 * units.rpm, 55 * units.deg)
        .add_sample(4000 * units.rpm, 58 * units.deg)
        .add_sample(5000 * units.rpm, 60 * units.deg)
        .add_sample(6000 * units.rpm, 60 * units.deg)
		.add_sample(7000 * units.rpm, 60 * units.deg)
		.add_sample(8000 * units.rpm, 60 * units.deg)

    engine.add_ignition_module(
        volkswagen_vr6_distributor(
            wires: wires,
            timing_curve: timing_curve
        )
    )
}

// 2008 Volkswagen Passat R36 (B6)
public node volkswagen_passat_r36_b6_vehicle {
    alias output __out:
        vehicle(
            mass: 3724 * units.lb,
            drag_coefficient: 0.30,
            cross_sectional_area: 2.26 * (units.m * units.m),
            diff_ratio: 3.09,
            tire_radius: 321.5 * units.mm, // P235/45R17
            rolling_resistance: 500 * units.N
        );
}

public node volkswagen_passat_r36_b6_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(4.04)
        .add_gear(2.37)
        .add_gear(1.56)
        .add_gear(1.16)
        .add_gear(0.85)
        .add_gear(0.67);
}

public node main {
    set_engine(vr6_r36())
    set_vehicle(volkswagen_passat_r36_b6_vehicle())
    set_transmission(volkswagen_passat_r36_b6_transmission())
}

main()